{"dataset": "code_medium", "id": "code_medium_0", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit an existing Python script to read a 3D array of size 3 x 3 x 3\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = [[[0 for x in range(3)] for y in range(3)] for z in range(3)]\nfor x in range(3):\n    for y in range(3):\n        for z in range(3):\n            arr[x][y][z] = int(input())\n```"}]}
{"dataset": "code_medium", "id": "code_medium_1", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput the code for a function to generate the Fibonacci sequence up to the given number n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_fibonacci(n):\n    fibonacci_list = [0, 1]\n    i = 1\n    while i < n:\n        fibonacci_list.append(fibonacci_list[i] + fibonacci_list[i-1])\n        i = i + 1\n    return fibonacci_list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_2", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that implements the __len__ method to return the length of a given string.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass StringLength:\n    def __len__(self, string):\n        return len(string)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_3", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide an example of using Python's range() function to generate a range of numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Print numbers from 0 to 9\nfor x in range(10):\n  print(x)\n# Print numbers from 3 to 8\nfor x in range(3, 9):\n  print(x)\n# Print numbers from 3 to 8 incrementing by 2\nfor x in range(3, 9, 2):\n  print(x)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_4", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a HTTP request to get the content of the given URL.\n\n### Input:\nhttps://example.com\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\nresponse = requests.get(\"https://example.com\")\nprint(response.content)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_5", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to delete a specific row from a table named 'Orders'.\n\n### Input:\nPrimary Key of the order: 1234\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef delete_row(table, order_key):\n    query = 'DELETE FROM {} WHERE order_key = ?'.format(table)\n    try:\n        cursor.execute(query, (order_key,))\n        cursor.commit()\n    except:\n        cursor.rollback()\n        print('Error occurred while deleting order')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_6", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFormulate a regex expression in Python to check if a given string is an email address.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re \ndef is_email(string): \n   regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w+$'\n   if(re.search(regex,string)): \n      print(\"Valid Email\")  \n   else: \n      print(\"Invalid Email\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_7", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a predicate to check for valid email syntax.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_valid_email(string):\n    return re.match(\"[^@]+@[^@]+\\.[^@]+\", string) != None\n```"}]}
{"dataset": "code_medium", "id": "code_medium_8", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class that detects if a String contains a palindrome\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass PalindromeChecker:\n  def __init__(self, word):\n    self.word = word\n \n  def contains_palindrome(self):\n    for i in range(len(self.word)):\n      if self.word[i] == self.word[len(self.word) - 1 - i]:\n        return True\n    return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_9", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code to make it print out the sum of two numbers.\n\n### Input:\nnum1 = 10\nnum2 = 5\n\nprint(num1 * num2)\n\n### Response:"}, {"role": "assistant", "content": "```python\nnum1 = 10\nnum2 = 5\nprint(num1 + num2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_10", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nVisualize the given data using a bar chart.\n\n### Input:\ndata = [['January', 10], ['February', 15], ['March', 20], ['April', 17]]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport matplotlib.pyplot as plt\nmonths = [x[0] for x in data]\nvalues = [x[1] for x in data]\nplt.bar(months, values)\nplt.xlabel(\"Month\") \nplt.ylabel(\"Number\") \nplt.show()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_11", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an approach in Python to retrieve a record from a database.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport sqlite3\ndef retrieve_record(db_name, table_name, id):\n    try:  \n        con = sqlite3.connect(db_name)\n        cur = con.cursor()\n        cur.execute(\"SELECT * FROM {} where id={};\".format(table_name, id))\n        record = cur.fetchone()\n    except:\n        record = None\n    finally:    \n        cur.close()\n        con.close()\n    return record\n```"}]}
{"dataset": "code_medium", "id": "code_medium_12", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nName all the built-in functions in Python\n\n### Response:"}, {"role": "assistant", "content": "```python\nabs(), all(), any(), ascii(), bin(), bool(), bytearray(), calls(), chr(), dir(), divmod(), enumerate(), eval(), filter(), float(), format(), frozenset(), hex(), int(), isinstance(), len(), list(), map(), max(), min(), oct(), open(), ord(), pow(), print(), range(), reversed(), round(), set(), slice(), sorted(), str(), sum(), tuple(), type(), zip()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_13", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code using try and except blocks.\n\n### Input:\nif (len(list) == 0):\n    print(\"List is empty\")\n\n### Response:"}, {"role": "assistant", "content": "```python\ntry:\n    if (len(list) == 0):\n        print(\"List is empty\")\nexcept:\n    print(\"No list is given\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_14", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEvaluate this code and output the result.\n\n### Input:\nx = 5\ny = 7\nz = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\nx = 5\ny = 7\nz = 8\nresult = (x + y) * z\nprint(result)\n# Output: 75\n```"}]}
{"dataset": "code_medium", "id": "code_medium_15", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a script that takes inputs from the user and prints out the Fibonacci sequence up to a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci_seq(n):\n    # Start and endpoints for the Fibonacci sequence\n    num1 = 0 \n    num2 = 1\n  \n    # List to store the sequence \n    Fibonacci_seq = [num1, num2]\n  \n    while num2 < n:\n        num3 = num1 + num2 \n        num1 = num2 \n        num2 = num3\n        Fibonacci_seq.append(num2)\n  \n    print(Fibonacci_seq)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_16", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random string with the specified length n.\n\n### Input:\nn=10\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport string\nimport random\ndef generate_random_string(n):\n    \"\"\"\n    Generate a random string with the length n \n    \"\"\"\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=n))\nprint(generate_random_string(10))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_17", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes in a string and returns a new string in which all the characters are reversed.\n\n### Input:\ns = \"Hello World\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverseString(s): \n\trev = s[::-1] \n\treturn rev \ns = \"Hello World\"\nprint(reverseString(s))\n# Output\n# dlroW olleH\n```"}]}
{"dataset": "code_medium", "id": "code_medium_18", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program to parse a JSON array.\n\n### Input:\n[{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport json\ndata = [{\"name\":\"John\", \"age\":30},{\"name\":\"Alice\", \"age\":25}]\nfor entry in data:\n    name = entry['name']\n    age = entry['age']\n    print(f'The name is {name} and age is {age}')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_19", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to find the occurrence of a given character in a given string.\n\n### Input:\nGiven string: \"Hello World!\"\nCharacter to find: o\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef occurance_count(str, char):\n    count = 0\n    for c in str:\n        if c == char:\n            count += 1\n    \n    return count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_20", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random password using a given string of characters.\n\n### Input:\nString: \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nGenerate a random password using a given string of characters\n\"\"\"\nimport random \ndef generate_password(string):\n    password = ''\n    for _ in range(16):\n        password += random.choice(string)\n    return password\nif __name__ == '__main__':\n    string = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()\"\n    print(generate_password(string))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_21", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a REST API endpoint handler to get the latest books from a database.\n\n### Response:"}, {"role": "assistant", "content": "```python\n@app.route(\"/books/latest\", methods=[\"GET\"])\ndef get_latest_books():\n    cursor = conn.cursor()\n    query = \"SELECT * FROM books ORDER BY id DESC LIMIT 10;\"\n    cursor.execute(query)\n    books = cursor.fetchall()\n    return jsonify(books)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_22", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a given list by the second element of each pair\n\n### Input:\nmy_list = [(2, 9), (1, 4), (3, 5)]\n\n### Response:"}, {"role": "assistant", "content": "```python\nsorted_list = sorted(my_list, key=lambda x: x[1])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_23", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the maximum product of three numbers in an array.\n\n### Input:\n[1, -5, -6, 10, 20, 15]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_product_of_three(arr):\n    \"\"\"Find the maximum product of three numbers in an array.\"\"\"\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n    # Return max product of the first three numbers\n    return arr[0] * arr[1] * arr[2]\nif __name__ == '__main__':\n    print(max_product_of_three([1, -5, -6, 10, 20, 15]))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_24", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method to filter out odd numbers from an array.\n\n### Input:\narray = [6, 5, 9, 10, 11, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef filter_odd_numbers(array): \n    result = [] \n    for i in array: \n        if i % 2 == 0: \n            result.append(i) \n    return result\n# Driver code\narray = [6, 5, 9, 10, 11, 8] \nprint(filter_odd_numbers(array))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_25", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function which takes an array and returns the maximum number.\n\n### Input:\n[2, 4, 8, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_num(arr):\n    n = arr[0]\n    for i in range(len(arr)):\n        if arr[i] > n:\n            n = arr[i]\n    return n\nmax_num([2, 4, 8, 6]) # Output: 8\n```"}]}
{"dataset": "code_medium", "id": "code_medium_26", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a report in PDF format that displays the most frequent words used in the New York Times articles.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\nfrom textblob import TextBlob\nfrom nltk.tokenize import word_tokenize \nfrom nltk.tokenize import sent_tokenize\nfrom nltk.probability import FreqDist\nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_pdf import PdfPages\ndef get_top_words(string):\n tokenized_words = word_tokenize(string)\n freqdist = FreqDist(tokenized_words)\n return freqdist.most_common(15)\n# Download nltk dependencies\n# nltk.download('punkt')\n# nltk.download('vader_lexicon')\n# Scrape news articles\narticles = scrape_nyt()\n# Get top words\ntop_words = []\nfor article in articles:\n top_words.append(get_top_words(article))\n# Create PDF report\npp = PdfPages('nyt_word_freq.pdf')\nplt.figure(figsize=(15,10))\nplt.bar(*zip(*top_words))\nplt.xticks(rotation=90)\npp.savefig()\npp.close()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_27", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that removes duplicates from an array and returns an array of the unique values.\n\n### Input:\narray = [5,5,5,10,10,15]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_duplicates(array):\n \n  new_array = []\n  for number in array:\n    if number not in new_array:\n      new_array.append(number)\n \n  return new_array\nprint(remove_duplicates([5,5,5,10,10,15]))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_28", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the square root of a number without using any built-in function.\n\n### Input:\nnum = 25\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_sqrt(num):\n   # Babylonian method\n   x = num\n   y = 1\n \n   while x > y:\n       x = (x + y) / 2\n       y = num / x\n \n   return x\ncalculate_sqrt(num)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_29", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to fetch the weather data of a given city\n\n### Input:\nBangalore\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\ncity = \"Bangalore\"\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid=your_api_key\"\n# Fetching the JSON data\nresponse = requests.get(url)\ndata = response.json()\n \n# Get the main weather data\nweather_data = data[\"main\"]\n \n# Obtain the current temperature \ntemp = weather_data[\"temp\"]\n \nprint(f\"The current temperature in {city} is {temp} degrees Celsius.\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_30", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSwap the first and last items in a given list.\n\n### Input:\nmy_list = [3, 4, 8, 11, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef swap_first_last(my_list):\n    my_list[0], my_list[-1] = my_list[-1], my_list[0]\n    return my_list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_31", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a dictionary with 10 elements and display it.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndictionary = {\n 'A': 'Apple',\n 'B': 'Ball',\n 'C': 'Cat',\n 'D': 'Dog',\n 'E': 'Elephant',\n 'F': 'Fish',\n 'G': 'Goat',\n 'H': 'Horse',\n 'I': 'Ink',\n 'J': 'Jelly'\n}\n \nprint(dictionary)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_32", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes in a string of text and counts the number of times each letter appears in the string\n\n### Input:\ntext = \"The quick brown fox jumps over the lazy dog\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_letters(text):\n    letter_count = {}\n    for character in text:\n        if character not in letter_count:\n            letter_count[character] = 1\n        else:\n            letter_count[character] += 1\n    return letter_count\nprint(count_letters(text))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_33", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a program in Python to check if a number is Odd or Even.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef odd_even(n):\n\tif (n % 2 == 0):\n\t\tprint(\"Even\")\n\telse:\n\t\tprint(\"Odd\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_34", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program that takes a string as a parameter and prints the character at index 4 if the length of the string is greater than 4.\n\n### Input:\nastring = \"Python\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef character_at_index(astring):\n    if len(astring) > 4:\n        print(astring[4])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_35", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an array containing the next n numbers in the Fibonacci sequence.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_fibonacci_sequence(n):\n    sequence = [0, 1] \n    for i in range(2, n):\n        sequence.append(sequence[i-1] + sequence[i-2])\n    return sequence\n```"}]}
{"dataset": "code_medium", "id": "code_medium_36", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code that takes a list of words as input and changes the case of each item in the list.\n\n### Input:\n[cat, dog, apple]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef toUpperCase(words):\n    upper_words=[]\n    for word in words:\n      upper_words.append(word.upper())\n    return upper_words\nif __name__ == \"__main__\":\n    print(toUpperCase(['cat','dog','apple']))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_37", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the given code to allow the user to input a number and print it twice.\n\n### Response:"}, {"role": "assistant", "content": "```python\nnum = int(input(\"Enter a number: \"))\nprint(num * 2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_38", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an expression in Python to remove all punctuation from a given string.\n\n### Input:\nstring = \"This, is a test string!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\nstring = re.sub(r'[^\\w\\s]','',string)\nprint(string) # Output: This is a test string\n```"}]}
{"dataset": "code_medium", "id": "code_medium_39", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGive an example of inheritance in Python\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Animal:\n  def __init__(self, name):\n    self.name = name\n   \n  def eat(self):\n    print(f\"{self.name} is eating\")\nclass Dog(Animal):\n  def bark(self):\n    print(f\"{self.name} is barking\")\ndog = Dog(\"Fido\")\ndog.eat()\ndog.bark()\n# Output:\n# Fido is eating\n# Fido is barking\n```"}]}
{"dataset": "code_medium", "id": "code_medium_40", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 10-character string with an even distribution of lowercase letters and numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport string\nimport random\ndef random_str():\n    chars = string.ascii_lowercase + string.digits\n    return ''.join(random.choice(chars) for _ in range(10))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_41", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to find the number of elements in the list which have a value larger than the given number 'k'.\n\n### Input:\n[10, 15, 20, 25], k = 15\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_larger(lst, k):\n    count = 0\n    for i in lst:\n        if i > k:\n            count += 1\n    return count\n        \nprint(count_larger([10, 15, 20, 25], 15))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_42", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that join two strings into one\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef join_strings(string1, string2):\n    return string1 + string2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_43", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the data structure created in question 4, write a function to populate the person details.\n\n### Input:\nname: John\nage: 23\nstreet: 123 Main St\ncity: New York\nstate: NY\nzip: 10222\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef populate_person(name, age, street, city, state, zip):\n    person_data['name'] = name\n    person_data['age'] = age\n    person_data['address']['street'] = street\n    person_data['address']['city'] = city\n    person_data['address']['state'] = state\n    person_data['address']['zip'] = zip\n```"}]}
{"dataset": "code_medium", "id": "code_medium_44", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string s, write a function to check if the string is a palindrome.\n\n### Input:\ns = \"A man, a plan, a canal: Panama!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_palindrome(s):\n    s = s.lower().replace(' ', '').replace(',', '').replace(':', '').replace('!', '')\n    return s == ''.join(reversed(s))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_45", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given list of dictionaries to a tuple of tuples.\n\n### Input:\nlst = [{\"name\":\"John\", \"age\":21}, {\"name\":\"Bill\", \"age\":30}]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef convert_to_tuple(lst):\n    tup = [(x['name'], x['age']) for x in lst]\n    return tuple(tup)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_46", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nParse and extract the dates from a given text.\n\n### Input:\nThe conference will be held on Wednesday, June 16th, 2021\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\ntext = \"The conference will be held on Wednesday, June 16th, 2021\"\n# Extract dates\ndates = re.findall(r'\\d{1,2}[-/.]\\d{1,2}[-/.]\\d{2,4}',text) \n# Print the dates\nfor date in dates:\n    print(date)\n    \n# Output\n# 06/16/2021\n```"}]}
{"dataset": "code_medium", "id": "code_medium_47", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to decode a given URL encoded string.\n\n### Input:\n%40%7C%2523%5B\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef decode_url(string):\n    string = string.replace('%40', '@')\n    string = string.replace('%7C', '|')\n    string = string.replace('%2523', '#')\n    string = string.replace('%5B', '[')\n    return string\n```"}]}
{"dataset": "code_medium", "id": "code_medium_48", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a binary string to a decimal integer.\n\n### Input:\nbinString=\"11101\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binaryToDecimal(binString): \n    num = 0\n    for i in range(len(binString)): \n        num += int(binString[i]) * pow(2, len(binString)-1-i) \n    return num\n  \nbinString=\"11101\"\nbinaryToDecimal(binString) # output: 29\n```"}]}
{"dataset": "code_medium", "id": "code_medium_49", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput all numbers between 1 to 5 except for 3 using Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor x in range(1, 6):\n    if x != 3:\n        print(x)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_50", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the mean of the given array.\n\n### Input:\nmy_array = [2, 7, 6, 8, 4, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\nmean = sum(my_array)/len(my_array)  # Calculates the mean of the array\n```"}]}
{"dataset": "code_medium", "id": "code_medium_51", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an AI model to classify emails with spam contents.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# import necessary libraries in Python\nimport pandas as pd\nimport numpy as np \nfrom sklearn.model_selection import train_test_split\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\n# read data \ndf = pd.read_csv('emails.csv')\nX = df['text']\ny = df['label']\n# Vectorize emails using TF-IDF\nvectorizer = TfidfVectorizer()\nX_vec = vectorizer.fit_transform(X)\n# split dataset into training and test data \nX_train, X_test, y_train, y_test = train_test_split(X_vec, y, test_size=0.2, random_state=2)\n# train model using the training data\nclf = MultinomialNB()\nclf.fit(X_train, y_train)\n# evaluate performance on the test data\nscore = clf.score(X_test, y_test)\nprint(f'Model Accuracy: {score*100}%')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_52", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that inverts the case for the given string.\n\n### Input:\nString: wElCOme\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef invert_case(input_string):\n    result = \"\"\n    for x in input_string: \n        if x.isupper():\n            result += x.lower() \n        else: \n            result += x.upper() \n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_53", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a machine learning model to predict the probability of a patient having a certain type of cancer.\n\n### Input:\nfeatures = [Height, Weight, Age, Gender]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport numpy as np\nimport pandas as pd\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n# read in the data\ndf = pd.read_csv('data.csv')\n# separate the features and labels\nX = df.drop('cancer', axis=1)\ny = df['cancer']\n# split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n# create a support vector machine model\nmodel = SVC()\n# fit the model on the data\nmodel.fit(X_train, y_train)\n# make predictions\npredictions = model.predict(X_test)\n# measure the accuracy of the model\nscore = accuracy_score(y_test, predictions)\nprint(score)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_54", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a comma separated string, write a Python program to convert the string into a list.\n\n### Input:\nmy_string = \"Hello,World,Hi\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nmy_list = my_string.split(',')\nprint(\"List:\", my_list)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_55", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to code a program that converts a given number of days to years, month and days.\n\n### Input:\n450 days\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef convertToYMD(num_days):\n    years = int(num_days/365)\n    rem_days = num_days % 365\n    months = int(rem_days / 30)\n    days = rem_days % 30\n    return [years, months, days]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_56", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nExtract a character's count from a given string.\n\n### Input:\nstring = \"this is a sample string\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_characters(string):\n    '''This function takes a string as argument and returns a dictionary\n       that contains the count of characters in the given string.''' \n    # create an empty dictionary\n    char_count = {}\n    # iterate over the characters and add to dictionary if not already present\n    for char in string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            # Increment the count if already present\n            char_count[char] += 1 \n    return char_count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_57", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUse try-except statements to detect and handle exceptions in the code.\n\n### Input:\nfor i in range(n):\n    x = 1/i\n\n### Response:"}, {"role": "assistant", "content": "```python\ntry:\n    for i in range(n):\n        x = 1/i\nexcept ZeroDivisionError:\n    print(\"Zero division error encountered!\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_58", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing data from the Wikipedia API, write a Python program to list the population of India.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport json\nimport requests\nurl = 'https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&titles=India'\nresponse = requests.get(url)\ndata = json.loads(response.text)\npopulation = data['query']['pages']['571045']['revisions'][0]['*'].split('\\n')[3].split('=')[1].strip().split('|')[0]\nprint('The population of India is', population)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_59", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code to print elements of a given list in reverse order.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_list(numbers):\n    return numbers[::-1]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_60", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the following program so that it prints the squares of numbers from 0 to 10.\n\n### Input:\nfor i in range(10):\n print(i)\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(11):\n print(i*i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_61", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to tokenize a given sentence into words.\n\n### Input:\nI am a programmer\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef tokenize_sentence(sentence):\n    tokens = sentence.split()\n    return tokens\n```"}]}
{"dataset": "code_medium", "id": "code_medium_62", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random probability distribution with mean 0 and standard deviation 1 in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport numpy as np\ndist = np.random.normal(0, 1, 1000)  # mean, standard deviation, samples\n```"}]}
{"dataset": "code_medium", "id": "code_medium_63", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given JavaScript object, access the property oldest_child.\n\n### Input:\nfamily = {\n    mother: 'Sabina',\n    father: 'Nasir',\n    children: [\n        {\n        name: 'Ben',\n        age: 12\n        },\n        {\n        name: 'Amy',\n        age: 14\n        }\n    ]\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\nfamily.children[1].name;\n```"}]}
{"dataset": "code_medium", "id": "code_medium_64", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a while loop in Python, print numbers from 5 to 19.\n\n### Response:"}, {"role": "assistant", "content": "```python\ni = 5\nwhile i < 20:\n    print(i)\n    i += 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_65", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRun a sentiment analysis of the following sentence using Python.\n\n### Input:\nThe food was really good but the service was terrible.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nRun a sentiment analysis of the sentence using Python\n\"\"\"\nimport nltk \nfrom textblob import TextBlob \ntext = 'The food was really good but the service was terrible.'\nblob = TextBlob(text) \nfor sentence in blob.sentences:\n    print(sentence.sentiment)\n# Output\nSentiment(polarity=0.05, subjectivity=0.6)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_66", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou will be given a list of strings as input. Write a program to print out the longest string in the list.\n\n### Input:\n['Hello', 'World', 'I', 'Am', 'Here']\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_longest_str(str_list):\n    longest_str = str_list[0]\n    for str in str_list:\n        if len(str) > len(longest_str):\n            longest_str = str\n    \n    return longest_str\n```"}]}
{"dataset": "code_medium", "id": "code_medium_67", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a low-level PyTorch implementation of the following neural network structure, using the class PyTorch provides.\n\n### Input:\nInput shape: (300, 100)\n\nOutput shape: (2, 5)\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport torch\nclass MyNetwork(torch.nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.fc1 = torch.nn.Linear(300, 150)\n        self.fc2 = torch.nn.Linear(150, 100)\n        self.fc3 = torch.nn.Linear(100, 50)\n        self.fc4 = torch.nn.Linear(50, 5)\n        self.softmax = torch.nn.Softmax(dim=1)\n    def forward(self, x):\n        x = self.fc1(x)\n        x = self.fc2(x)\n        x = self.fc3(x)\n        x = self.fc4(x)\n        \n        return self.softmax(x)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_68", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes a dictionary, a key and a value as parameters and adds the key and value to the given dictionary.\n\n### Input:\nmy_dict = { 'fruit': 'apple' }\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef add_dict_entry(d, key, value):\n    d[key] = value\n    return d\n```"}]}
{"dataset": "code_medium", "id": "code_medium_69", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function that creates a dictionary from two lists which contain the keys and values, respectively.\n\n### Input:\nkeys = [\"name\", \"age\", \"city\"]\nvalues = [\"John\", 30, \"New York\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef create_dictionary(keys, values):\n    # Create an empty dictionary\n    my_dict = {}\n    # Populate the dictionary with elements from lists\n    for i in range(len(keys)): \n        my_dict[keys[i]] = values[i]\n    return my_dict\n```"}]}
{"dataset": "code_medium", "id": "code_medium_70", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReverse a linked list.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverseList(node): \n    prev = None\n    while (node != None): \n        next = node.next\n        node.next = prev \n        prev = node  \n        node = next\n    return prev\n```"}]}
{"dataset": "code_medium", "id": "code_medium_71", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that accepts two strings as input, and then check to see if the two strings are an anagram of each other.\n\n### Input:\nword1 = \u2018earth\u2019\nword2 = \u2018heart\u2019\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef check_anagrams(word1, word2):\n    return sorted(word1) == sorted(word2)\n  \nword1 = 'earth'\nword2 = 'heart'\nprint(check_anagrams(word1, word2))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_72", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nExplain a Python program to check whether a number is Armstrong or not.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_armstrong(num):\n    digits = [int(d) for d in str(num)]\n    num_digits = len(digits)\n    armstrong_sum = 0\n    for digit in digits:\n        armstrong_sum += digit ** num_digits\n    return num == armstrong_sum\n#Test code\nnum = 153\nprint(is_armstrong(num)) # Output will be True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_73", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a query in MongoDB to fetch all documents where the field 'status' is 'active'.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndb.collection.find({\"status\": \"active\"})\n```"}]}
{"dataset": "code_medium", "id": "code_medium_74", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a regex string to find all words that contain the letters 'a' and 'z' in them.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\npattern = r'\\b[a-zA-Z]*a[a-zA-Z]*z[a-zA-Z]*\\b'\nwords = re.findall(pattern, \"The quick brown fox jumped over the lazy dog\")\nfor word in words:\n    print(word)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_75", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSum the numbers from 1 to 10 using a for loop in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ntotal = 0\nfor i in range(1, 11):\n  total += i\nprint(total)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_76", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an iterator in Python that yields only even numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef even_numbers():\n    i = 0\n    while True:\n        if i % 2 == 0:\n            yield i\n        i += 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_77", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint the first 10 Fibonacci numbers using a loop.\n\n### Response:"}, {"role": "assistant", "content": "```python\na, b = 0, 1\nfor i in range(10):\n    print(a)\n    a, b = b, a + b\n```"}]}
{"dataset": "code_medium", "id": "code_medium_78", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that multiplies two numbers and return the result.\n\n### Input:\na = 10\nb = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef multiply(a, b):\n    return a * b\nresult = multiply(a, b)\nprint(result)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_79", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array containing a string with duplicates, output an array with only unique strings.\n\n### Input:\n['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana']\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_duplicates(arr): \n    unique_arr = []\n    for item in arr:\n        if item not in unique_arr:\n            unique_arr.append(item)\n    return unique_arr\n# Driver code \narr = ['apple', 'apple', 'orange', 'kiwi', 'apple', 'banana', 'banana'] \nprint (remove_duplicates(arr))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_80", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of all integers up to the given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_of_integers(num):\n    total = 0\n    for i in range(1, num + 1):\n        total += i\n    return total\n```"}]}
{"dataset": "code_medium", "id": "code_medium_81", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct two strings from a given string and print these strings separately.\n\n### Input:\nstr = \"Hello World!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nstr1 = str[:5]\nstr2 = str[6:]\nprint(str1)\nprint(str2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_82", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a dictionary from the provided list of tuples such that the keys and values are switched.\n\n### Input:\ntuples = [('Hello', 5), ('World', 10)]\n\n### Response:"}, {"role": "assistant", "content": "```python\n#Create a new dictionary\nnewDict = {}\n#Iterate through the list and swap the keys and values\nfor tup in tuples:\n    key, value = tup\n    newDict[value] = key\n#Print the new dictionary\nprint(newDict)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_83", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a number in base 10 to binary\n\n### Input:\nnum = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef base10_to_binary(num):\n    binary_num = ''\n    while num > 0:\n        remainder = num % 2\n        binary_num = str(remainder) + binary_num\n        num = num // 2\n    return binary_num\nbase10_to_binary(5)  # '101'\n```"}]}
{"dataset": "code_medium", "id": "code_medium_84", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program to print the Pyramid pattern using asterisks.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nConstruct a program to print the Pyramid pattern using asterisks\n\"\"\"\nfor i in range(0, 5):\n    for j in range(0, i+1):\n        print(\"*\", end=\"\")\n    print()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_85", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nIdentify the issue in the following function and suggest a fix\n\n### Input:\ndef print_multiply(x, y):\n    for i in range(10):\n        print(x*i)\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_multiply(x, y):\n    for i in range(10):\n        print(x*y)  # change i to y\n```"}]}
{"dataset": "code_medium", "id": "code_medium_86", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a program that takes in two strings and check if they are anagrams.\n\n### Input:\nsilent and listen\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_anagram(s1, s2):\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_87", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the following code, to use Python's modern type hint annotation.\n\n### Input:\ndef my_func(list):\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef my_func(list: list) -> int:\n    '''Some docstring'''\n    result = 0\n    for l in list:\n        result += l\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_88", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd a try-catch block around the code example that catches an exception if it is thrown.\n\n### Input:\nwith open(\"myfile.txt\") as f:\n    for line in f:\n        print(line)\n\n### Response:"}, {"role": "assistant", "content": "```python\ntry:\n    with open(\"myfile.txt\") as f:\n        for line in f:\n            print(line)\nexcept:\n    print(\"An exception has been thrown\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_89", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python class \"Car\" with fields \"make\" and \"model\".\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Car:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n```"}]}
{"dataset": "code_medium", "id": "code_medium_90", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to insert the given character at a particular position in a given string.\n\n### Input:\nString = \"Geek university\"\nCharacter = 's'\nPosition = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertStr(str, char, pos): \n\treturn str[:pos] + char + str[pos:] \nstr = \"Geek university\"\nchar = 's'\npos = 8\nprint(insertStr(str, char, pos))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_91", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nReverse a given array's elements and print the resulting array.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = [1, 2, 3, 4, 5]\narr.reverse()\nprint(arr)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_92", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes a string, a key and a value as parameters and replaces all occurrences of the key with the value in the string.\n\n### Input:\ns = \"This is a sample sentence with some keys to replace.\"\nkey = \"keys\"\nvalue = \"words\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef replace_key_value(s, key, value):\n  replacedStr = s.replace(key, value) \n  return replacedStr\n```"}]}
{"dataset": "code_medium", "id": "code_medium_93", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, write a script that prints out the elements of a list.\n\n### Input:\nlist = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist = [1, 2, 3, 4, 5]\nfor x in list:\n    print(x)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_94", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to check whether two numbers are divisible by each other.\n\n### Input:\nnum1 = 8\nnum2 = 4\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef divisible_by_each_other(num1, num2):\n    \"\"\"\n    A function to check whether two numbers are divisible by each other\n    \"\"\"\n    if num1 % num2 == 0 or num2 % num1 == 0:\n        return True\n    else:\n        return False\nnum1 = 8\nnum2 = 4\nresult = divisible_by_each_other(num1, num2)\nprint(result) # True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_95", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a function that takes the list and returns only the odd numbers in the list.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef extract_odd_numbers(numbers):\n    return [x for x in numbers if x % 2 != 0]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_96", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for loop that calculates the sum of the numbers from 0 to n.\n\n### Response:"}, {"role": "assistant", "content": "```python\nn = 5\ntotal = 0\nfor i in range(n+1): \n    total += i\n   \nprint(total) # Output: 15\n```"}]}
{"dataset": "code_medium", "id": "code_medium_97", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to print the value at a given index in a given Array.\n\n### Input:\ntestArray = [1, 2, 3, 4, 5]\nindex = 2\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef printIndex(testArray, index):\n    print(testArray[index])\ntestArray = [1, 2, 3, 4, 5]\nindex = 2\nprintIndex(testArray, index)\n# Output: 3\n```"}]}
{"dataset": "code_medium", "id": "code_medium_98", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint all powers of 2 less than or equal to n.\n\n### Input:\nn = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef power_of_2(n): \n    res = []\n    for i in range(n+1):\n        if i & (i-1) == 0:\n            res.append(i)\n        \n    return res\n```"}]}
{"dataset": "code_medium", "id": "code_medium_99", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given function so that it returns the sum of all numbers in the input array.\n\n### Input:\ndef get_sum(arr):\n    return arr[0]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_sum(arr):\n    sum = 0\n    for item in arr:\n        sum += item\n    return sum\n```"}]}
{"dataset": "code_medium", "id": "code_medium_100", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function in Python to filter out all negative numbers in a given list.\n\n### Input:\n[2, 3, -1, 4, -5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef filter_negative_numbers(nums):\n    # return only positive numbers\n    return [num for num in nums if num >= 0]\nprint(filter_negative_numbers([2, 3, -1, 4, -5, 6]))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_101", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code that checks if a given string only contains alphabets.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re \n  \ndef is_alphabetic(string):  \n    Pattern = re.compile(\"^[a-zA-Z]*$\")\n    return bool(Pattern.match(string))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_102", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a code to generate a histogram from given data.\n\n### Input:\n[2, 3, 5, 6, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef histogram(lst): \n    frequency = {} \n  \n    for item in lst: \n        frequency[item] = frequency.get(item, 0) + 1 \n  \n    for item in frequency: \n        print(item, '-->', '*' * frequency[item])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_103", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the index of a given item in an array\n\n### Input:\narr = [1, 4, 6, 8, 9]\nitem = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_index(arr, item):\n    \"\"\"\n    Finds the index of a given item in an array\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num == item:\n            return i\n    return -1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_104", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to convert a given decimal number into its binary form.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef decimal_to_binary(num):\n    binary = []\n    while num > 0:\n        binary.append(num%2)\n        num //= 2\n    binary.reverse()\n    return binary\n```"}]}
{"dataset": "code_medium", "id": "code_medium_105", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to detect if an array contains duplicate values\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_duplicate_array(arr): \n    return len(arr) != len(set(arr))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_106", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd up the elements of a given matrix.\n\n### Input:\nmatrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Initialize the sum\nsum = 0\n# Iterate over the matrix\nfor row in matrix:\n    # Iterate over the elements of each row\n    for elem in row:\n        # Add up the elements\n        sum += elem\n# Print the sum\nprint(sum)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_107", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to print the even numbers in the range of a given two numbers.\n\n### Input:\nstart = 10\nend = 20\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor num in range(start, end+1):\n    if num % 2 == 0:\n        print(num)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_108", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given two strings. Write a function that checks whether the two strings are an anagram or not.\n\n### Input:\n\"listen\", \"silent\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_anagram(str1, str2):\n  str1 = str1.lower()\n  str2 = str2.lower()\n  if sorted(str1) == sorted(str2):\n    return True\n  else:\n    return False\nprint(is_anagram('listen', 'silent'))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_109", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a linked list, write a program to delete a given node.\n\n### Input:\n1 -> 2 -> 3 -> 4 -> 5 -> NULL\nNode = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Node: \n    def __init__(self, data): \n        self.data = data  \n        self.next = None\ndef delete_node(head, node):\n    prev = None\n    curr = head\n    while(curr is not None and curr.data != node):\n        prev = curr\n        curr = curr.next\n    prev.next = curr.next\n```"}]}
{"dataset": "code_medium", "id": "code_medium_110", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFrom a given list of words, create a new list with only the words that contain the letter 'a'.\n\n### Input:\nmy_list = [\"cat\", \"dog\", \"apple\", \"pear\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\nnew_list = [word for word in my_list if \"a\" in word] # Output: [\"cat\", \"apple\", \"pear\"]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_111", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a lambda function to add two given numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\nlambda x,y: x+y\n```"}]}
{"dataset": "code_medium", "id": "code_medium_112", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that uses regular expressions to check whether a given URL is correctly formatted or not.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\ndef is_valid_url(url):\n # Check if the URL is valid using a regex\n regex = re.compile(r\"^(?:http|ftp)s?://([^/]+[.])*[^/]+/?.*$\")\n if regex.match(url):\n  return True\n return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_113", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a snippet of code to extract all the URLs from the given string.\n\n### Input:\nThis string contains some urls such as https://www.google.com and https://www.facebook.com.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\nstring = \"This string contains some urls such as https://www.google.com and https://www.facebook.com.\"\nurls = re.findall('http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', string) \nprint(urls)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_114", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide an input to the following code so that it prints out the sum of all numbers between 1 and 5.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# initialise sum\nsum = 0\n# loop over given range\nfor i in range(1, 6):\n    sum += i\nprint(sum)\n# Output: 15\n```"}]}
{"dataset": "code_medium", "id": "code_medium_115", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that takes in a numeric value, X, and prints all the positive divisors of that number.\n\n### Input:\nX = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_divisors(x):\n    divisors = []\n    for i in range(1, x + 1):\n        if(x % i == 0):\n            divisors.append(i)\n    print(divisors)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_116", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the following code to print a 2D array passed as parameter.\n\n### Input:\ndef print2Dlist (list) :\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print2Dlist (list) :\n\tfor row in list:\n\t\tfor element in row:\n\t\t\tprint (element, end=\" \") \n\t\tprint ()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_117", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to generate a list with the first 20 Fibonacci numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n):\n    \"\"\"\n    Generate a list with the first n Fibonacci numbers.\n    \"\"\"\n    fib_list = [0, 1]\n    # Generate the list and stop when n is reached\n    while len(fib_list) < n:\n        fib_list.append(fib_list[-1] + fib_list[-2])\n    \n    return fib_list\nif __name__ == '__main__':\n    print(fibonacci(20))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_118", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to split a string of words by comma.\n\n### Input:\nstring = 'apple,orange,banana,grapes'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef split_by_comma(string):\n    return string.split(\",\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_119", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUse NLTK to analyse the sentiment of a given text.\n\n### Input:\nThe movie is awesome\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport nltk\nfrom nltk.sentiment.vader import SentimentIntensityAnalyzer\n \nsid = SentimentIntensityAnalyzer()\n \ntext = \"The movie is awesome\"\n  \nscores = sid.polarity_scores(text)\n  \nprint(scores['compound'])\n# Output\n0.6249\n```"}]}
{"dataset": "code_medium", "id": "code_medium_120", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to compare two strings and return the number of different characters in each string.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compare_strings(s1, s2):\n    s1_chars = list(s1)\n    s2_chars = list(s2)\n    num_diff_chars = 0\n    for char in s1_chars:\n        if char not in s2_chars:\n            num_diff_chars += 1\n    for char in s2_chars:\n        if char not in s1_chars:\n            num_diff_chars += 1\n    return num_diff_chars\n```"}]}
{"dataset": "code_medium", "id": "code_medium_121", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that takes in a list of names and creates a dictionary with the names as keys and their lengths as values.\n\n### Input:\nnames = [\"Mary\", \"John\", \"Mike\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef name_length_dict(names):\n    name_length_dict = dict()\n    for name in names:\n        name_length_dict[name] = len(name)\n    return name_length_dict \nname_length_dict(names)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_122", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following code to prevent SQL injection attacks.\n\n### Input:\nquery = \"SELECT * FROM users WHERE username = '\" + username + \"'\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport MySQLdb\nquery = \"SELECT * FROM users WHERE username = %s\"\ndb = MySQLdb.connect(host=\"localhost\", user=\"user\", passwd=\"pass\", db=\"mydb\")\ncur = db.cursor()\ncur.execute(query, (username,))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_123", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for loop in Python to iterate through the list [3, 2, 5, 4, 6] in reverse order.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor num in reversed([3, 2, 5, 4, 6]):\n    print(num)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_124", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to shuffle an array.\n\n### Input:\n[1, 2, 3, 4, 5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\ndef shuffleArray(arr):\n    # Create a copy of the array\n    temp_arr = arr.copy()\n    # Iterate through the array and randomly\n    # swap elements\n    for i in range(len(temp_arr)):\n        j = random.randint(0, len(temp_arr)-1)\n        temp_arr[i], temp_arr[j] = temp_arr[j], temp_arr[i]\n    return temp_arr\n```"}]}
{"dataset": "code_medium", "id": "code_medium_125", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an if-else statement which checks if the number is positive or negative.\n\n### Input:\nint num = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\nif (num > 0):\n    print(\"The number is positive\")\nelse:\n    print(\"The number is negative\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_126", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to build an API endpoint to support role-based authentication.\n\n### Input:\nUser roles: 'admin', 'manager', 'employee'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef authentication(role):\n    if role == 'admin':\n        return 'Admin privileges granted.'\n    elif role == 'manager':\n        return 'Manager privileges granted.'\n    elif role == 'employee':\n        return 'Employee privileges granted.'\n    else:\n        return 'Login failed. Invalid role.'\n```"}]}
{"dataset": "code_medium", "id": "code_medium_127", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing lambda expressions, write a function to convert a given temperature value in celsius to fahrenheit.\n\n### Response:"}, {"role": "assistant", "content": "```python\nconvert_c_to_F = lambda x: x*9/5 + 32\n```"}]}
{"dataset": "code_medium", "id": "code_medium_128", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new array containing the result of applying a given function to each element of an original array.\n\n### Input:\nArray: [1, 2, 3, 4]\nFunction: x * 2\n\n### Response:"}, {"role": "assistant", "content": "```python\nnew_arr = [i*2 for i in [1, 2, 3, 4]]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_129", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a recursive function for calculating the factorial of a number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef factorial(num):\n    # base case\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)\n# Usage\nprint(factorial(3)) # 6\n```"}]}
{"dataset": "code_medium", "id": "code_medium_130", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a 2D array of binary values and another 2D array, find the indices of the first array where the values of both arrays are equivalent.\n\n### Input:\narray1 = [[1, 0, 0, 1],[1, 0, 1, 0],[0, 0, 0, 1],[1, 0, 1, 0]]\narray2 = [[1, 0, 1, 0], [1, 0, 0, 1], [0, 0, 0, 1], [1, 0, 0, 1]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_empty_position(array1, array2):\n    results = []\n    for i in range(len(array1)):\n        for j in range(len(array1[0])):\n            if array1[i][j] == array2[i][j] and array1[i][j] == 0:\n                results.append((i, j))\n    return results\n```"}]}
{"dataset": "code_medium", "id": "code_medium_131", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an IF ELSE statement in Python to print either \"Number is even\" or \"Number is odd\" depending on the number input.\n\n### Response:"}, {"role": "assistant", "content": "```python\nif (num % 2 == 0):\n    print(\"Number is even\")\nelse:\n    print(\"Number is odd\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_132", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the given for loop code to a functional programming approach.\n\n### Input:\nlist = [1,2,3,4]\nfor i in list:\n    new_list.append(i * 2)\n\n### Response:"}, {"role": "assistant", "content": "```python\nnew_list = list(map(lambda x: x * 2, list))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_133", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes in a list and sorts by the reverse order of its length.\n\n### Input:\n[\u201chi\u201d, \u201chello\u201d, \u201chey\u201d, \u201chola\u201d]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_by_length(arr):\n    \"\"\"\n    Sort a list by the reverse order of its length.\n    \"\"\"\n    arr.sort(key=len, reverse=True)\n    return arr\n```"}]}
{"dataset": "code_medium", "id": "code_medium_134", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the following list of strings to uppercase in Python.\n\n### Input:\nList: ['one', 'two', 'three']\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist_strings = [\"one\", \"two\", \"three\"]\nlist_strings = [string.upper() for string in list_strings]\nprint(list_strings)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_135", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the number of days in a month specified by the user.\n\n### Input:\nMonth: February\n\n### Response:"}, {"role": "assistant", "content": "```python\ndays = 28\nif month == 'February':\n    print(days)\nelse:\n    print('Invalid Month')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_136", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a function that takes an array of integers and returns an array of the squares of the input values.\n\n### Input:\n[2, 4, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef array_squares(arr):\n    return list(map(lambda x: x**2 , arr))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_137", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to check if the string has all unique characters in Python\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef isUnique(string): \n \n    # Assuming character set is ASCII (128 characters) \n    if len(string) > 128: \n        return False\n \n    char_set = [False for _ in range(128)] \n    for char in string: \n        char_value = ord(char) \n \n        if char_set[char_value]: \n            return False\n \n        char_set[char_value] = True\n \n    return True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_138", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the code below to print the 10th and 11th element of the array\n\n### Input:\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11] \nprint(arr[9], arr[10])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_139", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number between the two numbers provided.\n\n### Input:\nmin = 5\nmax = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\ndef randomNumber(min, max):\n    return random.randint(min, max)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_140", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function to check for an anagram in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef anagram_check(s1, s2):\n    s1 = s1.replace(' ','').lower()\n    s2 = s2.replace(' ','').lower()\n    \n    if(sort(s1) == sort(s2)):\n        return True\n    \n    return False\n    \ndef sort(s):\n    return sorted(s)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_141", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to count how many times a given element appears in the list.\n\n### Input:\nmy_list = [1, 2, 5, 4, 2, 1, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\nmy_list = [1, 2, 5, 4, 2, 1, 5]\ncount = 0\nfor i in my_list:\n  if i == 5:\n    count += 1\nprint(count) #2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_142", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the following code, clean up the bugs and make sure the output functions correctly.\n\n### Input:\ndef example_func(lst):\n   for element in lst:\n      if (type(element) == int):\n         lst.append(element + 5)\n   return lst\n \nexample_func([1, 2, \"hello\"])\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef example_func(lst):\n   output_lst = []\n   for element in lst:\n      if (type(element) == int):\n         output_lst.append(element + 5)\n   return output_lst\n \nexample_func([1, 2, \"hello\"])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_143", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to compare two strings and return a boolean result.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compare(string1, string2):\n    if string1 == string2:\n        return True\n    else:\n        return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_144", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code to remove all numbers greater than specified value from a given list.\n\n### Input:\n[1, 6, 4, 9, 5, 8, 2], 7\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_greater(arr, value):\n    new_arr = []\n    for num in arr:\n        if num <= value:\n            new_arr.append(num)\n    return new_arr\n```"}]}
{"dataset": "code_medium", "id": "code_medium_145", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes a list of words and detects if they are anagrams.\n\n### Input:\na_list=[\"potato\",\"tomato\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_anagram(a_list):\n    \n    l1 = [''.join(sorted(word)) for word in a_list[0]]\n    l2 = [''.join(sorted(word)) for word in a_list[1]]\n    return l1 == l2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_146", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following 2D array. Create a function to find the sum of each row.\n\n### Input:\nArray = [[2, 5, 6], [4, 1, 3], [5, 9, 0]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_row(arr):\n    total = []\n    for row in arr:\n        total.append(sum(row))\n    return total\n```"}]}
{"dataset": "code_medium", "id": "code_medium_147", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCheck if the two strings are anagrams\n\n### Input:\nbombe\nbemob\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_anagram(str1, str2): \n    return sorted(str1) == sorted(str2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_148", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list comprehension\n\n### Input:\nGiven a list of numbers: nums = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\n[x*2 for x in nums]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_149", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to generate random numbers from 1 to 10 in a given range.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\ndef random_num_gen(start, end):\n  \n  random_nums = []\n  \n  for _ in range(start, end + 1):\n    random_nums.append(random.randint(1, 10))\n  \n  return random_nums\n```"}]}
{"dataset": "code_medium", "id": "code_medium_150", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes two integers and returns the remainder when the greater integer is divided by the smaller integer.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remainder(a,b):\n    if a > b:\n        return a % b\n    else:\n        return b % a\n```"}]}
{"dataset": "code_medium", "id": "code_medium_151", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove an empty tuple from a list of tuples.\n\n### Input:\nlist1 = [ (), ('a',), ('b', 'c'), ('d', 'e', 'f')]\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist2 = [ t for t in list1 if t ]\nprint(list2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_152", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class Person with a name, age and gender attributes.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Person:\n    def __init__(self, name, age, gender):\n        self.name = name\n        self.age = age\n        self.gender = gender\n```"}]}
{"dataset": "code_medium", "id": "code_medium_153", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class that can represent a 2D coordinate system.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a class that can represent a 2D coordinate system\n\"\"\"\nclass CoordinateSystem:\n  def __init__(self,x,y):\n    self.x = x\n    self.y = y\n  \n  def add(self,other):\n    x = self.x + other.x\n    y = self.y + other.y\n    return CoordinateSystem(x,y)\nif __name__ == '__main__':\n    a = CoordinateSystem(1,2)\n    b = CoordinateSystem(3,4)\n    print(a.add(b)) # <__main__.CoordinateSystem object at 0x000002B50FE37B70>\n```"}]}
{"dataset": "code_medium", "id": "code_medium_154", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to generate all possible pairs of a given list of numbers\n\n### Input:\n[1, 2, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a program to generate all possible pairs of a given list of numbers\n\"\"\"\ndef generate_pairs(nums):\n    pairs = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            pairs.append((nums[i], nums[j]))\n    return pairs\nif __name__ == '__main__':\n    print(generate_pairs([1, 2, 3]))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_155", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFix the bug in the following code by modifying the function is_star_jumping_high_enough:\n\ndef is_star_jumping_high_enough(star_height):\n    \"\"\"return true if star height is greater than 5\"\"\"\n    if star_height < 5:\n        return True\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_star_jumping_high_enough(star_height):\n    \"\"\"return true if star height is greater than 5\"\"\"\n    if star_height > 5:\n        return True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_156", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you create a for loop in Python to loop through a list?\n\n### Response:"}, {"role": "assistant", "content": "```python\n# loop through a list\nlist = [1, 2, 3, 4, 5]\nfor item in list:\n    print(item)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_157", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to represent a Person object. The class should contain the person's name, age, and occupation.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Person:\n  def __init__(self, name, age, occupation):\n    self.name = name\n    self.age = age\n    self.occupation = occupation\n```"}]}
{"dataset": "code_medium", "id": "code_medium_158", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array of descending numbers starting from 10 to 1 using a for loop.\n\n### Response:"}, {"role": "assistant", "content": "```python\nnumberArray = []\nfor x in range(10, 0, -1):\n    numberArray.append(x)\nprint(numberArray) # [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_159", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a for loop, print out a countdown from 10 to 1.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(10, 0, -1): \n    print(i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_160", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array where each element is the maximum of each row in a given matrix.\n\n### Input:\n[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_elements(matrix):\n    max_elements = []\n    for row in matrix:\n        max_elements.append(max(row))\n    return max_elements\n```"}]}
{"dataset": "code_medium", "id": "code_medium_161", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to make a dictionary that contains a number as a key, and its cube as the corresponding value.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef cube_dictionary(n):\n    d = {}\n    for i in range(1, n+1):\n        d[i] = i**3\n    return d\n```"}]}
{"dataset": "code_medium", "id": "code_medium_162", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint the 3rd to 5th characters in a given string.\n\n### Input:\nstring = \"Hello World\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_chars(string):\n    print(string[2:5])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_163", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to identify palindromic numbers between 1 and a given number n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef printPalindromicNumbers(n): \n    for num in range(1, n + 1):\n        s = str(num)\n        if(s == s[::-1]):\n            print(num, end=\" \")\nprintPalindromicNumbers(100)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_164", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that takes an array of strings and returns a dictionary whose keys are the strings and the values are the lengths of the strings.\n\n### Input:\narr = [\"apple\", \"banana\", \"cherry\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef array_lengths_to_dict(arr):\n    my_dict = {}\n    for s in arr:\n        my_dict[s] = len(s)\n    return my_dict\narr = [\"apple\", \"banana\", \"cherry\"]\nprint(array_lengths_to_dict(arr))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_165", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function to generate Fibonacci sequence given a number n.\n\n### Input:\nn = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n):\n    a = 0\n    b = 1\n    if n == 0:\n        return a\n    elif n == 1:\n        return b\n    else:\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b\n```"}]}
{"dataset": "code_medium", "id": "code_medium_166", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes two lists as arguments and returns a dictionary with elements of the first list as keys and elements of the second list as values.\n\n### Input:\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef zip_lists(list1, list2):\n  zipped_dict = {}\n  for k, v in zip(list1, list2):\n    zipped_dict[k] = v\n  return zipped_dict\nprint(zip_lists(list1, list2))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_167", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an if statement that checks if an integer, num, is less than 10.\n\n### Input:\nnum = 7\n\n### Response:"}, {"role": "assistant", "content": "```python\nif num < 10:\n    print(\"num is less than 10\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_168", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to check if a string consists of only alphabetic characters.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef check_alphabetic(s):\n    for c in s:\n        if not c.isalpha():\n            return False\n    return True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_169", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the total of all the elements in the list using a loop.\n\n### Input:\nmy_list = [2, 5, 9, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ntotal = 0\nfor num in my_list:\n    total += num\nprint(total) # 20\n```"}]}
{"dataset": "code_medium", "id": "code_medium_170", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the provided input, calculate the SHA256 checksum in Python.\n\n### Input:\nstring = \"Hello World!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport hashlib\n \ndef sha256_calc(string):\n    \"\"\"\n    Calculate SHA256 checksum in Python.\n    \"\"\"\n    sha_signature = hashlib.sha256(string.encode()).hexdigest()\n    return sha_signature\n```"}]}
{"dataset": "code_medium", "id": "code_medium_171", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code to format the given text using a given indentation level.\n\n### Input:\ntext = \"This is a sample text to format.\"\nindentation = 4\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef indent_text(text, indentation):\n    \"\"\"\n    A function to format the given text using a given indentation level.\n    Input: string, integer\n    Output: string\n    \"\"\"\n    # Split the text into lines\n    lines = text.splitlines()\n    # Iterate through each line of the text\n    for i in range(len(lines)):\n        # Add the indentation to each line\n        lines[i] = \" \" * indentation + lines[i]\n    # Join all the lines\n    indented_text = \"\\n\".join(lines)\n    \n    return indented_text\n```"}]}
{"dataset": "code_medium", "id": "code_medium_172", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes a string and an integer as input and returns the string repeated n times.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef repeat_string(string, n):\n    \"\"\"\n    This function takes a string and an integer as input and returns the \n    string repeated n times.\n    Parameters:\n    string (string): The string that needs to be repeated.\n    n (int): The number of times the string needs to be repeated.\n    Returns:\n    string: The repeated string\n    \"\"\"\n    return string * n\n```"}]}
{"dataset": "code_medium", "id": "code_medium_173", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to parse a text string given a regular expression and return the matches.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\ndef parse(expression, string):\n  matches = re.finditer(expression, string)\n  return [match.group(0) for match in matches]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_174", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing TensorFlow, create a model that predicts the price of an item from its features.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport tensorflow as tf\n# Define the inputs, weights and bias.\ninputs = tf.keras.Input(shape=(features))\nweights = tf.keras.layers.Dense(3, activation='relu')(inputs)\nbias = tf.Variable(tf.random_normal([1]))\n# Create the model.\nmodel = tf.keras.Model(inputs, weights + bias)\n# Compile and fit the model.\nmodel.compile(optimizer='adam', loss='mse', metrics=['accuracy'])\nmodel.fit(x_train, y_train, validation_split=0.2, epochs=50)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_175", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function that prints the first n terms in a Fibonacci sequence.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_fibonacci(n):\n    fib1 = 0\n    fib2 = 1\n    for i in range(n):\n        print(fib1)\n        temp = fib1\n        fib1 = fib2\n        fib2 = temp + fib2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_176", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that given a string of character, returns the number of vowels in it.\n\n### Input:\nExample string: \"hello world\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_vowels(s): \n    vowels = 'aeiou'\n    count = 0\n    for char in s: \n        if char in vowels: \n            count += 1\n    return count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_177", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, construct a function that returns the highest and the lowest numbers.\n\n### Input:\nnumbers = [3, 10, 2, 8, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_min_max(numbers):\n    # Set min and max to first number\n    lowest = numbers[0]\n    highest = numbers[0]\n    # Iterate through each number \n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    # Return min and max in a tuple\n    return (lowest, highest)\nmin_max_nums = get_min_max([3, 10, 2, 8, 5])\nprint(min_max_nums)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_178", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code to print the items from a given array in reverse.\n\n### Input:\n[1,2,3,4]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Define the function to print array in reverse\ndef print_reverse(arr):\n \n # Base case\n if len(arr) == 0 :\n  return\n # Print the last value\n print(arr.pop())\n # Recursive call with array - 1 \n return print_reverse(arr)\n# Get the array\narr = [1,2,3,4]\n# Print the array in reverse\nprint(\"The array in reverse is: \")\nprint_reverse(arr)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_179", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a method to remove a given item from a given list.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_item(lst, item):\n if item in lst:\n    lst.remove(item)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_180", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function which takes two lists and outputs all the common elements.\n\n### Input:\nlist1=[2,4,6,8]\nlist2=[1,2,3,4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef common_elements(list1, list2):\n    list3 = []\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list3.append(i)\n    return list3\n```"}]}
{"dataset": "code_medium", "id": "code_medium_181", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a TensorFlow program to construct a basic neural network\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport tensorflow as tf\n# Set up the layers for the model\nmodel = tf.keras.models.Sequential([\n    # Set up the first layer\n    tf.keras.layers.Dense(64, input_shape = (784, ), activation = 'relu'),\n    # Set up the second layer\n    tf.keras.layers.Dense(64, activation = 'relu'),\n    # Set up the output layer\n    tf.keras.layers.Dense(10, activation = 'softmax')\n])\n# Compile the model\nmodel.compile(\n  optimizer = 'adam',\n  loss = 'sparse_categorical_crossentropy',\n  metrics = ['accuracy']\n)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_182", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to normalize a given pandas dataframe.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef normalize_df(df): \n    normalized_df=(df-df.min())/(df.max()-df.min())\n    return normalized_df\nnorm_df = normalize_df(df)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_183", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nReverse the given list using python.\n\n### Input:\nlist_to_reverse = [2, 3, 5, 6, 8, 10, 11]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_list(input_list):\n    \"\"\"Return a reversed copy of the list\"\"\"\n    return input_list[::-1]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_184", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to search a list of integers and print the index of the first matched item.\n\n### Input:\nnums=[4, 7, 1, 2, 5], target=7\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search_list(nums, target):\n    \"\"\"\n    Function to search a list of integers and print the index of the first matched item \n    \"\"\"\n    for i in range(len(nums)):\n        if nums[i] == target:\n            return i\n    return -1\nprint(search_list([4, 7, 1, 2, 5], 7))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_185", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a regular expression that can detect emails.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\n# Regular expression\nregex = r\"(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\"\n# Search for any emails that match the regular expression\nmatches = re.findall(regex, string)\n# Print out the emails that were found\nfor match in matches:\n    print(match)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_186", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing MongoDB, create a query to find all documents where the status is \"ACTIVE\".\n\n### Response:"}, {"role": "assistant", "content": "```python\ndb.collection.find({status: \"ACTIVE\"})\n```"}]}
{"dataset": "code_medium", "id": "code_medium_187", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to group the elements in a list into a dictionary with the list element as the key and the number of times the element is repeated in the list as the value.\n\n### Input:\n[1, 2, 2, 2, 3, 3, 4, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef group_list(list): \n  result = {} \n  for element in list: \n    if element in result: \n      result[element] += 1 \n    else: \n      result[element] = 1 \n  \n  return result \nlist = [1, 2, 2, 2, 3, 3, 4, 4, 5] \nresult = group_list(list) \nprint(result) #{1: 1, 2: 3, 3: 2, 4: 2, 5: 1}\n```"}]}
{"dataset": "code_medium", "id": "code_medium_188", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of tuples, return a new list with the value of each tuple increased by one.\n\n### Input:\ntuples = [(1,2), (2,3), (3,4)]\n\n### Response:"}, {"role": "assistant", "content": "```python\nnew_tuples = []\nfor t in tuples:\n    new_tuples.append((t[0] + 1, t[1] + 1))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_189", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes two numbers as inputs and returns the larger number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_num(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n```"}]}
{"dataset": "code_medium", "id": "code_medium_190", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new array 'b' from array 'a' containing only even numbers.\n\n### Input:\na = [1, 2, 3, 4, 5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\nb = [num for num in a if num % 2 == 0]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_191", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script to normalize each word in a given sentence by converting it into lowercase.\n\n### Input:\nThe Quick Brown Fox Jumps Over The Lazy Dog.\n\n### Response:"}, {"role": "assistant", "content": "```python\nsentence = \"The Quick Brown Fox Jumps Over The Lazy Dog\"\nsentence = sentence.lower().split()\nsentence = ' '.join(sentence)\nprint(sentence)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_192", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to output true if the given string is a palindrome, otherwise output false.\n\n### Input:\nstring = \"racecar\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_palindrome(str):\n    \"\"\"Checks if a given string is a palindrome.\n    \n    Parameters:\n    str (str): string to be tested\n    \"\"\"\n    str = str.lower()\n    return str[::-1] == str\nif __name__ == '__main__':\n    string = \"racecar\"\n    print(is_palindrome(string))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_193", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nLocate and erase all text nodes from the following XML string.\n\n### Input:\n<body>\n  <div>Hello world!</div>\n  <div>Good bye world!</div>\n</body>\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef delete_text_nodes(xml_string): \n  root = ET.fromstring(xml_string) # parse the XML string \n  elems = root.findall(\".//text()\") # find all text nodes \n  for e in elems: \n    e.getparent().remove(e) # remove the text node \n  return ET.tostring(root) # return the parsed XML string\n```"}]}
{"dataset": "code_medium", "id": "code_medium_194", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the re library, trim the following string of all whitespace.\n\n### Input:\nmy_string = \"  Hello, World!  \"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\nmy_string = \"  Hello, World!  \"\nmodified_string = re.sub('\\s+', '', my_string)\nprint(modified_string)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_195", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to search an element in a linked list.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search_node(node, target):\n    while node is not None: \n        if node.data == target: \n            return node\n        else: \n            node = node.next\n    return None\n```"}]}
{"dataset": "code_medium", "id": "code_medium_196", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, write an algorithm to find the maximum difference between any two elements in the array.\n\n### Input:\nnums = [3, 2, 7, 1, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_max_difference(nums):\n    # Initialize a max difference\n    max_diff = float('-inf')\n    \n    # Iterate through the array\n    for i in range(1, len(nums)):\n        diff = nums[i] - nums[i-1]\n        if diff > max_diff:\n            max_diff = diff\n    \n    return max_diff\n# Call the function\nfind_max_difference([3, 2, 7, 1, 4]) # returns 6\n```"}]}
{"dataset": "code_medium", "id": "code_medium_197", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to determine if two rectangles intersect.\n\n### Input:\nrect1 = (x1, y1, w1, h1)\nrect2 = (x2, y2, w2, h2)\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_intersect(rect1, rect2):\n    if rect1[0] > rect2[0] + rect2[2] or rect1[0] + rect1[2] < rect2[0] or rect1[1] > rect2[1] + rect2[3] or rect1[1] + rect1[3] < rect2[1]:\n        return False\n    else:\n        return True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_198", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd a condition to the following code in Python to check if the given number is greater or less than 5.\n\n### Input:\nnum = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\nif num > 5:\n    print(\"The number is greater than 5\")\nelif num < 5:\n    print(\"The number is less than 5\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_199", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nHow could the following code be optimized?\n\n### Input:\ndef remove_duplicates(input_list):\n    temp_list = []\n    for item in input_list:\n        if item not in temp_list:\n            temp_list.append(item)\n    return temp_list\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_duplicates(input_list):\n    return list(set(input_list)) #This is more efficient than iterating over the list to remove duplicate items.\n```"}]}
{"dataset": "code_medium", "id": "code_medium_200", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the following input and code, edit the code so the output returns a list with only the unique elements from the list.\n\n### Input:\nlist1 = [1,2,2,4,4,4,5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef unique_list(list1):\n    unique_list = []\n    for x in list1:  \n        if x not in unique_list: \n            unique_list.append(x) \n      \n    return unique_list\n# testing\nlist1 = [1,2,2,4,4,4,5]\nprint(unique_list(list1)) # Output: [1, 2, 4, 5]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_201", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nTransform the C code into an equivalent Python program.\n\n### Input:\nint main()\n{\n    int i, j;\n    for (i = 0; i < 3; i++) \n        for (j = 0; j < 4; j++)\n            printf(\"%d %d\\n\", i, j);\n    return 0;\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(3):\n    for j in range(4):\n        print(i, j)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_202", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to print the maximum and minimum number in a given list.\n\n### Input:\nmy_list = [5, 4, 7, 1, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_extremes(my_list):\n    print(\"Maximum:\", max(my_list))\n    print(\"Minimum:\", min(my_list))\n# Output\nMaximum: 7\nMinimum: 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_203", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two numbers a and b, write a function to swap their values.\n\n### Input:\na = 5, b = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef swap(a, b):\n    a, b = b, a\n    return a, b\na, b = swap(5, 8)\nprint(\"a =\", a, \"and b =\", b)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_204", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function that returns the first two characters of a string.\n\n### Input:\nstring = \"GPT-3\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef first_two_chars(string):\n  return string[:2]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_205", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function which takes a parameter and returns the sum of its cube of its digits\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_of_cube_of_digits(num):\n    sum = 0\n    while (num > 0):\n        digit = num % 10\n        sum += digit**3\n        num //= 10\n    return sum\n```"}]}
{"dataset": "code_medium", "id": "code_medium_206", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code to add a new item to the end of the list.\n\n### Input:\nlist_of_items = [\"apple\", \"orange\", \"cherry\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist_of_items = [\"apple\", \"orange\", \"cherry\"]\nlist_of_items.append(\"banana\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_207", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind any two numbers in an array such that their sum is equal to a given value.\n\n### Input:\narray = [3, 4, 5, 6, 7, 8]\nvalue = 11\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(len(array)):\n for j in range(i+1, len(array)):\n  if array[i] + array[j] == value:\n   print(array[i], array[j])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_208", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to check if an item is in a list\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef check_list_contains(item_list, item):\n    \"\"\"This function checks if an item is in a list\"\"\"\n    return item in item_list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_209", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput the first 10 numbers in the Fibonacci series.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \nfor i in range(10):\n    print(fibonacci(i))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_210", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nwhat is the shortest code to print multiple strings on the same line?\n\n### Response:"}, {"role": "assistant", "content": "```python\nprint(*[\"String1\", \"String2\", \"String3\"])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_211", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a linear search in a list.\n\n### Input:\nlist = [1, 5, 9, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef linear_search(list, key):\n    for index, value in enumerate(list):\n        if value == key:\n            return index\n    return -1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_212", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that detects whether a given string is a palindrome.\n\n### Input:\nstring = \u2018level\u2019\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef detect_palindrome(string): \n    reversed_string = string[::-1] \n    if (string == reversed_string): \n        return \"This string is a palindrome\" \n    else: \n        return \"This string is not a palindrome\"\nprint(detect_palindrome(string))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_213", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function that uses a for loop to print all odd numbers from 1 to 10.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_odd_numbers():\n    for i in range(1, 11):\n        if i % 2 != 0:\n            print(i)\nprint_odd_numbers()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_214", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to process the following data and return the average temperature for the last five days.\n\n### Input:\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\ntemps = [27, 28, 29, 20, 21]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_avg_temp(days, temps):\n    total = 0\n    for i in range(len(days)):\n        total += temps[i]\n        \n    avg = total / len(days)\n    \n    return avg\n```"}]}
{"dataset": "code_medium", "id": "code_medium_215", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code snippet so that it is compatible with Python 3\n\n### Input:\nsum = 0\nfor num in range(10):\n   sum = sum + num\nprint sum\n\n### Response:"}, {"role": "assistant", "content": "```python\nsum = 0\nfor num in range(10):\n   sum += num\nprint(sum)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_216", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a linked list using the given data.\n\n### Input:\nData: [5, 6, 2, 9, 0]\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n# Given data\ndata = [5, 6, 2, 9, 0]\n# Create linked list\nlinked_list = LinkedList()\nfor i in data:\n    linked_list.insert(i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_217", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the list in Ascending order of the second element of each element in the list.\n\n### Input:\nlist = [(-5, 2), (1, 0), (1, 3), (3, 4), (-3, -9), (-10, -2)]\n\n### Response:"}, {"role": "assistant", "content": "```python\nsorted_list = sorted(list, key=lambda x: x[1])\nprint(sorted_list)\n# Output: [(-3, -9), (1, 0), (-10, -2), (-5, 2), (1, 3), (3, 4)]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_218", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object that uses constructor overloading in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    def __init__(self, name, age, job):\n        self.name = name\n        self.age = age\n        self.job = job\np1 = Person('John Doe', 25)\np2 = Person('Jane Doe', 30, 'Software Engineer')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_219", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to generate all string combinations of a given alphabet\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_strings(alphabet): \n    n = len(alphabet)  \n  \n    # Run a loop for all elements in array one by one \n    for i in range(1 << n): \n  \n        # Create a string s of length n \n        s = \"\" \n        for j in range(n): \n  \n            # Check if jth bit of i is set or not \n            # and if set append character j to s \n            if i & (1 << j): \n                s += alphabet[j] \n  \n        # Print the generated string \n        print(s)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_220", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to transform a dataset into a matrix, where rows represent data points followed by their labels.\n\n### Input:\ndataset=[(2, 3, 1), (5, 4, -1), (1, 8, 1)]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef dataset_to_matrix(dataset):\n    matrix = [[x, y, z] for x, y, z in dataset]\n    return matrix\n```"}]}
{"dataset": "code_medium", "id": "code_medium_221", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a function that takes an array and counts the odd numbers in it.\n\n### Input:\ninput_array = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef countOddNumbers(input_array): \n count = 0\n for num in input_array:\n  if num % 2 != 0: \n   count += 1\n return count\nprint(countOddNumbers(input_array))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_222", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the program so that the \"count\" variable counts from 0 to 10 11.\n\n### Input:\ncount = 0\nwhile count < 10:\n    print(count)\n\n### Response:"}, {"role": "assistant", "content": "```python\ncount = 0\nwhile count <= 10:\n    print(count)\n    count = count + 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_223", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can we join two lists in Python?\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\n# Join two lists\nlist3 = list1 + list2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_224", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random string of 12 characters using Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport string\nimport random\n''.join(random.choices(string.ascii_letters + string.digits, k=12))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_225", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code which takes in a list of strings, and returns a string with all the characters of the strings sequentially.\n\n### Input:\nstrings = [\"Hello\", \"World\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_strings(strings):\n    merged_string = ''\n    for string in strings:\n        merged_string += string\n    return merged_string\nmerge_strings(strings)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_226", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to check if an email address is valid depending on the given conditions.\n\n### Input:\nEmail address: johnsmith@example.com\nCheck the following conditions:\n1. Must contain an \"@\" symbol\n2. Must contain a \".\"\n3. Must have at least 6 characters\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\ndef is_valid_email(email):\n    regex = r\"^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[a-zA-Z]{2,6}$\"\n    if re.search(regex, email) is not None:\n        return True\n    else:\n        return False\nemail = 'johnsmith@example.com'\nif is_valid_email(email):\n    print(\"Valid email\")\nelse:\n    print(\"Invalid email\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_227", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes in a list of strings and returns True if any of the strings contains the letter `a`.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef contains_A(strings):\n    for string in strings:\n        if 'a' in string:\n            return True\n    return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_228", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to determine whether the given array contains an odd number of elements.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_odd(arr):\n    return len(arr) % 2 != 0\n```"}]}
{"dataset": "code_medium", "id": "code_medium_229", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Bash script that runs a Python code\n\n### Input:\nPython code:\n\ndef hello_world():\n    print(\"Hello World!\")\n\n### Response:"}, {"role": "assistant", "content": "```python\n#!/bin/bash\n \npython << END\ndef hello_world():\n    print(\"Hello World!\")\nhello_world()\nEND\n```"}]}
{"dataset": "code_medium", "id": "code_medium_230", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given list, write a code to get a list of all the words starting with \"T\"\n\n### Input:\nwords_list = ['Meteor', 'Timeline', 'Tablet', 'Timeframe', 'Trophy']\n\n### Response:"}, {"role": "assistant", "content": "```python\nwords_starting_with_T = [word for word in words_list if word.startswith('T')]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_231", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nTake a list of numbers and remove the numbers that are greater than 10.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_greater_than_10(numbers):\n    return [x for x in numbers if x <= 10]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_232", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to convert a given date string into a timestamp.\n\n### Input:\ndate_string = \"2020-07-24 14:50:00\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport datetime\ndef convert_to_timestamp(date_string):\n    \"\"\"Write a code to convert a given date string into a timestamp.\"\"\"\n    date_object = datetime.datetime.strptime(date_string, '%Y-%m-%d %H:%M:%S')\n    timestamp = datetime.datetime.timestamp(date_object)\n    return timestamp\nconvert_to_timestamp(\"2020-07-24 14:50:00\") # Outputs 1595538200.0\n```"}]}
{"dataset": "code_medium", "id": "code_medium_233", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data visualization to show the average salary per gender\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport matplotlib.pyplot as plt\n  \nmale_salaries = [3000, 3500, 3000, 3500, 4000] \nfemale_salaries = [2500, 3000, 2500, 3000, 3500] \n  \nplt.bar(range(len(male_salaries)), male_salaries, width=0.35, \n            label='Male Salaries') \n  \nplt.bar([x+0.35 for x in range(len(female_salaries))], \n            female_salaries, width=0.35, \n            label='Female Salaries') \n  \nplt.xlabel('Employee') \nplt.ylabel('Salaries') \nplt.title('Salaries per Gender') \nplt.legend(loc=\"upper right\") \nplt.show()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_234", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function for printing each letter of a string on a separate line.\n\n### Input:\nstr = \"Hello World\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_letter_separately(str): \n\tfor letter in str: \n\t\tprint(letter) \n# Output \nprint_letter_separately(str)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_235", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a HTTP GET request using Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\nurl = 'https://www.example.com'\nresponse = requests.get(url)\nprint(response.text)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_236", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReturn an error message when a user inputs a negative number.\n\n### Response:"}, {"role": "assistant", "content": "```python\nif (number < 0):\n  print('Error: Number cannot be negative.')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_237", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou must refactor a code to reduce the complexity and improve its readability.\n\n### Input:\ndef is_even(num):\n    if num == 0:\n        return True\n    else:\n        return is_odd(num - 1)\n\ndef is_odd(num):\n    if num == 0:\n        return False\n    else:\n        return is_even(num - 1)\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_even(num):\n    return num % 2 == 0\ndef is_odd(num):\n    return num % 2 != 0\n```"}]}
{"dataset": "code_medium", "id": "code_medium_238", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to remove all whitespace characters from a given string.\n\n### Input:\nmyString = \"Hello   World    \"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_whitespaces(myString):\n    return ''.join(myString.split())\nmyString = \"Hello   World    \"\nprint(remove_whitespaces(myString))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_239", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a data table, write a function to select the columns.\n\n### Input:\ntable = [['Name', 'Age', 'Score', 'City'],\n         ['Alice', '21', '85', 'New York'],\n         ['Bob', '23', '92', 'Los Angeles'],\n         ['Cathy', '20', '73', 'London']]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef select_columns(table, columns):\n    output = [table[0]] + [[row[i] for i in columns] for row in table[1:]]\n    return output\n```"}]}
{"dataset": "code_medium", "id": "code_medium_240", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new list which contains even elements from the existing list A.\n\n### Input:\nA = [1, 4, 5, 12, 3, 7, 16]\n\n### Response:"}, {"role": "assistant", "content": "```python\nA = [1, 4, 5, 12, 3, 7, 16]\neven_list = [x for x in A if x % 2 == 0 ]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_241", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDelete the elements at a specified position of the given list.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5]\npos = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef delete_element(list1, pos):\n    del list1[pos]\n    print(\"After deleting the element at position {0} the list is: {1}\".format(pos, list1))\ndelete_element(my_list, pos)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_242", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to find the day of the week corresponding to a given date using the calendar module?\n\n### Input:\nDay: 25\nMonth: December\nYear: 2020\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nFind the day of the week corresponding to a given date using calendar module\n\"\"\"\nimport calendar\ndef get_day_of_week(day, month, year):\n    dayNumber = calendar.weekday(year,month,day)\n    dayName = calendar.day_name[dayNumber] \n    return dayName\n    \nif __name__ == '__main__':\n    day = 25\n    month = 12\n    year = 2020\n    print(get_day_of_week(day, month, year))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_243", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a syntax correct program which reverses a given linked list\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_list(head): \n    curr = head \n    prev = None\n    while curr is not None: \n        next_ = curr.next\n        curr.next = prev \n        prev = curr \n        curr = next_\n    head = prev \n    return head\n```"}]}
{"dataset": "code_medium", "id": "code_medium_244", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that takes two array-like structures and returns a new array containing all elements from the first one that do not appear in the second one.\n\n### Input:\nlist_1 = [9, 4, 2, 1, 5]\nlist_2 = [4, 6, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef difference_array(list_1, list_2):\n  new_list = []\n  for i in list_1:\n    if i not in list_2:\n      new_list.append(i)\n  return new_list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_245", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a loop to extract the first three characters from each string in the list.\n\n### Input:\nletters = [\"abcde\", \"fghij\", \"klmno\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\nextracted_letters = []\nfor letter in letters:\n    extracted_letters.append(letter[0:3])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_246", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that filters the numbers in the list and returns a list of prime numbers only.\n\n### Input:\nlist3 = [3, 4, 5, 7, 11, 13]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef primeNums(inputList):\n    #Create an empty list\n    primes = []\n    #Iterate over the list\n    for num in inputList:\n        #Check if the number is prime\n        isPrime = True\n        for i in range(2, num):\n            if num % i == 0:\n                isPrime = False\n        #Add the number to the list if prime\n        if isPrime:\n            primes.append(num)\n    #Return the list\n    return primes\n#Print the list\nprint(primeNums(list3))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_247", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet to sum up all the elements in a given dictionary.\n\n### Input:\n{\n  'a': 10,\n  'b': 15,\n  'c': 20\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\nd = {'a': 10, 'b': 15, 'c': 20} \nprint(sum(d.values())) # Output: 45\n```"}]}
{"dataset": "code_medium", "id": "code_medium_248", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to convert a list of characters into a string.\n\n### Input:\ncharacters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nWrite a function to convert a list of characters into a string\n\"\"\"\ndef list_to_string(characters):\n    result = ''.join(characters)\n    return result\ncharacters = ['H', 'e', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd']\nprint(list_to_string(characters)) # print Hello World\n```"}]}
{"dataset": "code_medium", "id": "code_medium_249", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd an element to a given list.\n\n### Input:\nList: ['a', 'b', 'c']\nElement: 'd'\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist1 = ['a', 'b', 'c']\nlist1.append('d') \nprint(list1)\nOutput: ['a', 'b', 'c', 'd']\n```"}]}
{"dataset": "code_medium", "id": "code_medium_250", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the sum of numbers in a given tree.\n\n### Input:\nTree Structure\n    5\n   / \\\n  3   7\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compute_sum(root):\n    if not root:\n        return 0\n    left_sum = compute_sum(root.left)\n    right_sum = compute_sum(root.right)\n    return root.val + left_sum + right_sum\n```"}]}
{"dataset": "code_medium", "id": "code_medium_251", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code that creates a dictionary from two different lists with equal length.\n\n### Input:\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef create_dictionary(list1, list2):\n    if len(list1) != len(list2):\n        return \"lists have different lengths\"\n    else:\n        my_dict = dict(zip(list1, list2))\n        return my_dict\nlist1 = ['a', 'b', 'c']\nlist2 = [1, 2, 3]\nprint(create_dictionary(list1, list2)) #output: {'a': 1, 'b': 2, 'c': 3}\n```"}]}
{"dataset": "code_medium", "id": "code_medium_252", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list comprehension that outputs a list of strings with the same character.\n\n### Input:\nstring=\"This is a test.\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n[x for x in string if x == 't']\n```"}]}
{"dataset": "code_medium", "id": "code_medium_253", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to reverse an integer.\n\n### Input:\nx = 12345\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_integer(x):\n    rev_int = 0\n    while x > 0:\n        rev_int = rev_int * 10 + (x % 10)\n        x //= 10\n    return rev_int\n```"}]}
{"dataset": "code_medium", "id": "code_medium_254", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the index of the element 8 in the list [3, 8, 9, 5, 1, 6].\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist = [3, 8, 9, 5, 1, 6]\nindex = list.index(8)\nprint(\"Index of 8 is:\", index)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_255", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program that takes a number as input and prints out its corresponding ASCII character.\n\n### Input:\nNumber: 90\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef getChar(num):\n    return chr(num)\n# Test\nprint(getChar(90)) # 'Z'\n```"}]}
{"dataset": "code_medium", "id": "code_medium_256", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a regex pattern to extract all words containing the letter 'a' from a given string\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\ndef extract_words(string):\n    pattern = r'\\b\\w*a\\w*\\b'\n    words = re.findall(pattern, string)\n    return words\n```"}]}
{"dataset": "code_medium", "id": "code_medium_257", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you write a program to determine the greatest common divisor (GCD) of two non-negative integers?\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef gcd(a, b):\n    # Base case\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    # Calculate the greatest common divisor using Euclid's algorithm\n    while b != 0:\n        a %= b\n        a, b = b, a\n        \n    return a\n```"}]}
{"dataset": "code_medium", "id": "code_medium_258", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following to check if a given key exists in a dictionary or not.\n\n### Input:\nmy_dict = {\"name\": \"John\", \"age\": 27}\n# Do something\n\n### Response:"}, {"role": "assistant", "content": "```python\nmy_dict = {\"name\": \"John\", \"age\": 27}\nif \"name\" in my_dict:\n    print(\"Key present\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_259", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program to compute the sum of two numbers and display the result.\n\n### Input:\nnumber1 = 5\nnumber2 = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ntotal = number1 + number2\nprint(\"The total is\", total)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_260", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow to compare two lists in Python?\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compare_lists(l1, l2):\n    if len(l1) != len(l2):\n        return False\n    for i in range(len(l1)):\n        if l1[i] != l2[i]:\n            return False\n    return True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_261", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list that has the all even numbers between 1 and 50, inclusive.\n\n### Response:"}, {"role": "assistant", "content": "```python\neven_nums_list = [x for x in range(1,51) if x % 2 == 0]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_262", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a sentence and a number as inputs, and returns the number of words in that sentence that are longer than the given number.\n\n### Input:\nSentence = \"Hello, this is a sentence\";\nNumber = 3;\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_words_longer_than_number(text, number):\n  words = text.split()\n  count = 0\n  for word in words:\n    if len(word) > number:\n      count += 1\n  return count\ncount_words_longer_than_number(Sentence, Number)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_263", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes in a list and returns the second largest element\n\n### Input:\nlist_of_numbers = [5, 10, 15, 20]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef second_largest(list_of_numbers):\n    max_num = max(list_of_numbers)\n    sec_max_num = None\n    for num in list_of_numbers:\n        if num != max_num and (sec_max_num is None or sec_max_num < num):\n            sec_max_num = num\n    return sec_max_num\n```"}]}
{"dataset": "code_medium", "id": "code_medium_264", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the code block in an optimized way.\n\n### Input:\nnums = [1, 2, 3, 4, 5, 6]\nnew_nums = []\nfor num in nums:\n\tnew_nums.append(num + 1)\n\n### Response:"}, {"role": "assistant", "content": "```python\nnums = [1, 2, 3, 4, 5, 6]\nnew_nums = [num + 1 for num in nums]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_265", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a script to remove duplicate elements from an array.\n\n### Input:\narr = [1, 2, 3, 4, 4, 1, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_duplicate(arr):\n    newArr = []\n    for i in arr:\n        if i not in newArr:\n            newArr.append(i)\n    return newArr\n```"}]}
{"dataset": "code_medium", "id": "code_medium_266", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nrewrite the following for-loop as a while-loop\n\n### Input:\nfor i in range(0, 5):\n    print(i)\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nRewrite the following for-loop as a while-loop\n\"\"\"\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_267", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random string of a given length using different uppercase, lowercase characters, and digits.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport string\nimport random\ndef random_string(length):\n    characters = string.ascii_letters + string.digits \n    return ''.join(random.choice(characters) for i in range(length))\nif __name__ == '__main__':\n    print(random_string(10))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_268", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes a list of n strings and a number k and returns the longest string with length of k or less.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_longest_at_length(lst, k):\n    longest_str = lst[0]\n    for s in lst[1:]:\n        if len(s) <= k and len(s) > len(longest_str):\n            longest_str = s\n    return longest_str\n```"}]}
{"dataset": "code_medium", "id": "code_medium_269", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAnalyze this text using spaCy.\n\n### Input:\nText: Modern technologies are revolutionizing the way we live and work.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport spacy\nnlp = spacy.load(\"en_core_web_sm\")\ndoc = nlp(\"Modern technologies are revolutionizing the way we live and work.\")\nfor token in doc:\n    print(token.text, token.lemma_, token.pos_, token.tag_, token.dep_,\n            token.shape_, token.is_alpha, token.is_stop)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_270", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Tkinter window with a label that says \u201cHello World!\u201d\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport tkinter\nroot = tkinter.Tk()\nlabel = tkinter.Label(root, text=\"Hello World!\")\nlabel.pack()\nroot.mainloop()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_271", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite this function using a recursive algorithm.\n\n### Input:\ndef factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef factorial(n): \n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_272", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string, write a Python function that will remove all the vowels from it.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_vowels(string):\n    vowels = {'a', 'e', 'i', 'o', 'u'}  \n    return ''.join(c for c in string if c not in vowels)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_273", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCombine a loop and a conditional statement to output the following\n\n### Input:\n[2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = [2, 3, 4, 5] \nfor i in arr: \n    if i % 2 == 0: \n        print(i) \n# Output: \n2\n4\n```"}]}
{"dataset": "code_medium", "id": "code_medium_274", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a MongoDB query to find all documents that have a field called 'city' with a value of 'New York'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndb.collection.find({city: 'New York'});\n```"}]}
{"dataset": "code_medium", "id": "code_medium_275", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a Python script that generates a random string of length 10\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\nimport string\ndef get_random_string(stringLength=10):\n    letters = string.ascii_lowercase\n    return ''.join(random.choice(letters) for i in range(stringLength))\nrandomString = get_random_string()\nprint(randomString) # outputs a random string of length 10\n```"}]}
{"dataset": "code_medium", "id": "code_medium_276", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random sample of size 10 using numpy\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport numpy as np\nrand_sample = np.random.randint(low=0, high=100, size=10)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_277", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class that allows a user to set and get the name of an object.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass User:\n    def __init__(self, name):\n        self.name = name\n    def getName(self):\n        return self.name\n    def setName(self, name):\n        self.name = name\n```"}]}
{"dataset": "code_medium", "id": "code_medium_278", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRequest the average temperature of the city 'Boston' from the Weather API.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\ndef get_average_temperature(city):\n    api_url = 'http://api.openweathermap.org/data/2.5/weather?q='+city+'&APPID=your_api_key'\n    response = requests.get(api_url)\n    data = response.json()\n    temp = data['main']['temp']\n    return temp - 273.15\n```"}]}
{"dataset": "code_medium", "id": "code_medium_279", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to Iterate over a given list and print the square of the numbers in the list.\n\n### Input:\nlist = [3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor num in list:\n  print(num*num)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_280", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a for loop in python for printing the square of numbers from 0 to 4.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor num in range(5):\n    print(num**2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_281", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that prints out triangle of stars.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_triangle(n):\n    for i in range(1, n * 2): \n        for j in range(1, i + 1): \n            print(\"*\", end = \" \")\n        print(\"\\r\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_282", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nParse a JSON string.\n\n### Input:\n{\"name\":\"John\", \"age\":30}\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport json\njson_data = '{\"name\":\"John\", \"age\":30}'\ndata = json.loads(json_data)\nname = data[\"name\"]\nage = data[\"age\"]\nprint(f\"Name: {name}, Age: {age}\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_283", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that reduces an array of numbers to a single number.\n\n### Input:\n[2, 4, 6, 8, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reduceArray(arr):\n    if not arr:\n        return 0\n    result = arr[0]\n    for num in arr[1:]:\n        result = result + num\n    return result\nprint(reduceArray([2, 4, 6, 8, 10])) # Outputs: 30\n```"}]}
{"dataset": "code_medium", "id": "code_medium_284", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to find all unique values in a list.\n\n### Input:\nL = [1, 2, 4, 2, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_unique_values(L):\n    \"\"\"\n    Function to find all the unique values in a list.\n    \n    Arguments:\n        L {list}: The list to search in.\n    \n    Returns:\n        set: The set of unique values.\n    \"\"\"\n    unique_values = set()\n    for item in L:\n        if item not in unique_values:\n            unique_values.add(item)\n    return unique_values\n```"}]}
{"dataset": "code_medium", "id": "code_medium_285", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string containing a comma-separated list of integers, write code to print all the even numbers.\n\n### Input:\nstring = \"23, 2, 5, 16, 1, 9, 8\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n#Split the string into a list of integers\nnumbers = [int(x) for x in string.split(',')]\n#Iterate through the list, if the integer is even, print it\nfor number in numbers:\n    if number % 2 == 0:\n        print(number)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_286", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to build a function that take a given tree and returns a list containing the data stored at each level.\n\n### Input:\n1\n        /   \\\n       2     3\n      / \\    /\n     4   5  6\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef traverseTree(node):\n    result = []\n    if node is None:\n        return []\n    else:\n        result.append(node.data)\n        result += traverseTree(node.left)\n        result += traverseTree(node.right)\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_287", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRead the given JSON data and return a list of all the keys.\n\n### Input:\n{\n  \"name\": \"John\",\n  \"age\": 21,\n  \"isActive\": true\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_keys(data): \n  keys = []\n  for key in data:\n    keys.append(key)\n  return keys\n```"}]}
{"dataset": "code_medium", "id": "code_medium_288", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform the following operation on this array and print the result: remove the last two elements and add them to the beginning.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\narr.splice(-2); \narr.unshift(4,5);\n```"}]}
{"dataset": "code_medium", "id": "code_medium_289", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCount the number of characters in a sentence that begin with a consonant.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_consonants(sentence):\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    count = 0\n    for ch in sentence:\n        if ch.lower() in consonants:\n            count += 1\n    return count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_290", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code snippet to square the number 12.\n\n### Response:"}, {"role": "assistant", "content": "```python\nx = 12\ny = x**2\nprint(y)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_291", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class \u2018Student\u2019 and a constructor that allows the user to initialize the student name and age.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Student:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```"}]}
{"dataset": "code_medium", "id": "code_medium_292", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to split a sentence into words\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef split_sentence(sentence):\n    return sentence.split(' ')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_293", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to generate the weight of a given sequence of DNA\n\n### Input:\nDNA = \"GTCATCTGAG\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_DNA_weight(DNA):\n    \n    # Initialize the weights dict\n    weights = {\n        \"G\": 57.02,\n        \"A\": 71.04,\n        \"T\": 89.09,\n        \"C\": 103.01    \n    }\n    # Calculate the weight\n    weight = 0.0\n    for character in DNA:\n        weight += weights[character]\n    return weight\n# Output\ngenerate_DNA_weight(DNA)\n# Output\n698.22\n```"}]}
{"dataset": "code_medium", "id": "code_medium_294", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 10 character alphanumeric string in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\nimport string\ndef generate_random_string():\n    return ''.join(random.choices(string.ascii_letters + string.digits, k=10))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_295", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program that returns the length of a given string.\n\n### Input:\nString = \"Hello World\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef stringLength(mystring): \n    counter = 0\n    for char in mystring: \n        counter += 1\n    return counter\n```"}]}
{"dataset": "code_medium", "id": "code_medium_296", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the factorial of an integer using recursion.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef factorial(n):\n  if n == 0:\n    return 1\n  else :\n    return n*factorial(n-1)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_297", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print the 3rd element in a given list.\n\n### Input:\n[1,2,3,4,5,6]\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist = [1,2,3,4,5,6]\nprint(list[2]) # Output: 3\n```"}]}
{"dataset": "code_medium", "id": "code_medium_298", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a date in the format \"MM/dd/yyyy\" to a timestamp.\n\n### Input:\n04/23/2021\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport time\ndef convert_date_to_timestamp(d):\n    return time.mktime(time.strptime(d, \"%m/%d/%Y\"))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_299", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of names, capitalize the first letter of each name.\n\n### Input:\nnames = [\"john\", \"sarah\", \"joe\", \"dave\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef capitalize_names(names):\n    capitalized_names = []\n    for name in names:\n        capitalized_name = name[0].upper() + name[1:]\n        capitalized_names.append(capitalized_name)\n    return capitalized_names\n```"}]}
{"dataset": "code_medium", "id": "code_medium_300", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python loop to print all the even numbers between 2 and 15 (inclusive).\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(2, 16):\n    if i % 2 == 0:\n        print(i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_301", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Flask endpoint that displays a \"Hello World!\" message.\n\n### Response:"}, {"role": "assistant", "content": "```python\n@app.route(\"/\", methods=['GET'])\ndef hello_world():\n    return \"Hello World!\"\n```"}]}
{"dataset": "code_medium", "id": "code_medium_302", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to return all possible sums of two numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef two_num_sums(nums):\n    \"\"\"Returns a list of all possible sums of two numbers from nums.\"\"\"\n    combinations = []\n    for i in range(len(nums)-1):\n        for j in range(i+1, len(nums)):\n            combination = nums[i]+nums[j]\n            combinations.append(combination)\n    return combinations\n```"}]}
{"dataset": "code_medium", "id": "code_medium_303", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to retrieve the first value from a dictionary that starts with a given letter.\n\n### Input:\ndictionary = { \"a\": 1, \"b\": 2, \"c\": 3 }\nstarting_letter = \u201cb\u201d\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_first_value(dictionary, starting_letter):\n    for key, value in dictionary.items():\n        if key.startswith(starting_letter):\n            return value\n    return None # if no value found\nget_first_value(dictionary, starting_letter) # Returns 2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_304", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the following code snippet in Python to find the maximum number accross a list of integers.\n\n### Input:\nlst = [-1, 5, 10, 0, -9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_maximum(lst):\n  max_value = float('-inf')\n  for i in lst:\n    if i > max_value:\n      max_value = i\n  return max_value\nprint(find_maximum(lst))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_305", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a JavaScript code snippet to limit the maximum length a user can enter in an input field.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndocument.getElementById('inputField').maxLength = \"20\";\n```"}]}
{"dataset": "code_medium", "id": "code_medium_306", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a while loop that prints the numbers 1-10\n\n### Response:"}, {"role": "assistant", "content": "```python\ni = 1\nwhile i <= 10:\n    print(i)\n    i += 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_307", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate all combinations of the string \"abcd\".\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_combinations(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i + 1, len(string) + 1):\n            result.append(string[i:j])\n    return result\nif __name__ == '__main__':\n    string = \"abcd\"\n    print(generate_combinations(string)) # outputs ['a', 'ab', 'abc', 'abcd', 'b', 'bc', 'bcd', 'c', 'cd', 'd']\n```"}]}
{"dataset": "code_medium", "id": "code_medium_308", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class called \"Vector\" with x and y coordinates.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a class called \"Vector\" with x and y coordinates\n\"\"\"\nclass Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\nif __name__ == \"__main__\":\n    v = Vector(2, 3)\n    print (v.x, v.y)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_309", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a correct program to sum the even numbers from 0 to n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_even(n):\n    sum = 0\n    for i in range(0,n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\n```"}]}
{"dataset": "code_medium", "id": "code_medium_310", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given code snippet to reverse the elements of a list in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverseList(list): \n    list.reverse() \n    return list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_311", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the compound interest rate given the initial principal amount P, the annual interest rate r and the number of times compounding occurs in a year n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compound_interest(P, r, n):\n    return P * (1 + (r/n))**(n*t)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_312", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a two-dimensional array, write a code to sum the values in each row.\n\n### Input:\nA = [[1, 2, 3], \n     [4, 5, 6], \n     [7, 8, 9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\nrow_sum = []\nfor row in A:\n    row_sum.append(sum(row))\n    \nprint(row_sum) # prints [6, 15, 24]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_313", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to convert a given number of days into weeks, days.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef convert_days(days):\n  weeks = days // 7\n  days = days % 7\n  return (weeks, days)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_314", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to compute the dot product of two given vectors.\n\n### Input:\n[1, 2, 3] and [4, 5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef dot_product(v1, v2):\n    product = 0\n    for i in range(len(v1)):\n        product += v1[i] * v2[i]\n    return product\n```"}]}
{"dataset": "code_medium", "id": "code_medium_315", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python function that takes 'string' as an argument and return a new string with the last two characters of 'string' repeated.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef repeat_last_two_char(string):\n    \"\"\"Takes a string as an argument and returns a new string with the last two characters repeated.\"\"\"\n    if len(string) < 2:\n        return \"\"\n    return string[:-2] + string[-2:] * 2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_316", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method to build a dictionary that contains all even numbers from the given list.\n\n### Input:\n[2, 3, 7, 8, 10, 11]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef build_even_dict(numbers): \n even_dict = {key: value for key, value in enumerate(numbers) if value % 2 == 0} \n return even_dict\n```"}]}
{"dataset": "code_medium", "id": "code_medium_317", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function that takes a 2D matrix and rotates the matrix 90 degrees clockwise.\n\n### Input:\n[[1,2,3],\n [4,5,6],\n [7,8,9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef rotate_2d_matrix(matrix):\n    n = len(matrix[0])\n    m = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            m[i][j] = matrix[n-j-1][i]\n    return m\n```"}]}
{"dataset": "code_medium", "id": "code_medium_318", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the hypotenuse of a right angled triangle given the length of the two sides.\n\n### Input:\nside1 = 7\nside2 = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport math\ndef calculate_hypotenuse(side1, side2):\n    hypotenuse = math.sqrt(side1**2 + side2**2)\n    return hypotenuse\n```"}]}
{"dataset": "code_medium", "id": "code_medium_319", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the function so that it returns the minimum element in the provided list.\n\n### Input:\ndef min_element(lis):\n    # TODO: write code to find and return the minimum element in the list\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef min_element(lis):\n    # set min to first element in the list\n    min = lis[0]\n  \n    # iterate over the list and compare each element to \n    # the current minimum. If a smaller element is found, \n    # update min. \n    for x in lis:\n        if x < min: \n            min = x\n  \n    # return min\n    return min\n```"}]}
{"dataset": "code_medium", "id": "code_medium_320", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that sorts an array in descending order.\n\n### Input:\n[7,4,1,2]\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = [7,4,1,2]\narr.sort(reverse=True)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_321", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine an absolute difference function in Python to find the difference between two numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef absolute_difference(x, y):\n    return abs(x - y)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_322", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement FTP server in Python\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport ftplib\ndef start_ftp_server(host, port, user, password):\n    server = ftplib.FTP()\n    server.connect(host, port)\n    server.login(user, password)\n    print('FTP Server started successfully')\nstart_ftp_server('localhost', 21, 'testuser', 'testpass')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_323", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, write a function that takes two integers a, b and returns a*b.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef multiply(a, b):\n  return a * b\n```"}]}
{"dataset": "code_medium", "id": "code_medium_324", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the Python code to reverse a linked list.\n\n### Input:\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Definition for singly-linked list.\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\ndef reverse_list(head):\n    prev = None\n    while head != None:\n        next = head.next\n        head.next = prev\n        prev = head\n        head = next\n    return prev\n```"}]}
{"dataset": "code_medium", "id": "code_medium_325", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate and fill a 2-dimensional list with the dimensions n and m.\n\n### Input:\nn = 3, m = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist_2d = [[0 for i in range(m)] for j in range(n)]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_326", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nReplace the \"TODO\" placeholder in the following python code.\n\n### Input:\ndef add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    # TODO\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef add_two_numbers(a, b):\n    '''This function takes two numbers and returns their sum.'''\n    return a + b\n```"}]}
{"dataset": "code_medium", "id": "code_medium_327", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to decode a given string using the provided cipher.\n\n### Input:\ndecoding_cipher = { \"x\" : \"a\", \"y\": \"b\", \"z\" : \"c\" }\nstring = \"xyz\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef decode_string(decoding_cipher, string):\n    result = \"\"\n    for char in string:\n        result += decoding_cipher[char]\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_328", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint all unique combinations of an array of integers\n\n### Input:\nnums = [1,2,3]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Print all unique combinations of an array of integers\ndef all_combinations(nums):\n  result = [[]]\n  for num in nums:\n    temp_result = []\n    for res in result:\n      temp_result.append(res + [num])\n    result.extend(temp_result)\n  return result\nprint(all_combinations(nums)) # [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_329", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following python program to convert UTC time to local time.\n\n### Input:\nfrom datetime import datetime, timedelta\n\nutc_time = datetime.utcnow()\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom datetime import datetime, timedelta \nimport time \nutc_time = datetime.utcnow()\nlocal_time = time.localtime(time.mktime(utc_time.timetuple())) \nprint(\"Local time: \", local_time)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_330", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint that takes two inputs (phone number and name) and updates contact details in the database.\n\n### Response:"}, {"role": "assistant", "content": "```python\n@app.route(\"/api/update_contact_details\", methods=['PUT'])\ndef update_contact_details():\n    # Get the inputs from the request body\n    phone_number = request.json['phone_number']\n    name = request.json['name']\n    # Query the database\n    db.execute(\"UPDATE contacts SET name = '{name}' WHERE phone = '{phone_number}'\".format(name=name, phone_number=phone_number))\n    return jsonify(status=\"success\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_331", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method to solve a linear equation ax + b = 0.\n\n### Input:\na = 2, b = 4\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef solve_linear_equation(a, b):\n  return -b/a\n```"}]}
{"dataset": "code_medium", "id": "code_medium_332", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, write a program that finds all the numbers that are divisible by 3.\n\n### Input:\nmyList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\nmyList = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ndivisible_by_3 = list(filter(lambda x: x % 3 == 0, myList))\nprint(divisible_by_3)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_333", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to split the given string on a specific character.\n\n### Input:\nString: \"A/B/C/D\"\nCharacter: \"/\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef split_string(string, character):\n    return string.split(character)\n    \nif __name__ == '__main__':\n    string = \"A/B/C/D\"\n    character = \"/\"\n    print(split_string(string, character)) # outputs ['A', 'B', 'C', 'D']\n```"}]}
{"dataset": "code_medium", "id": "code_medium_334", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to convert the given string to hexadecimal code.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef string_to_hexadecimal(string):\n    # convert the string to list of bytes\n    bytes_ = [ord(char) for char in string] \n    \n    # convert the bytes to hexadecimal code\n    hexadecimal_list = [hex(byte) for byte in bytes_] \n    \n    # remove the \"0x\" from the hexadecimal code\n    hexadecimal_list = [item[2:] for item in hexadecimal_list]\n    \n    # join all the code into a single string\n    hexadecimal_string = ''.join(hexadecimal_list)\n    \n    return hexadecimal_string\n```"}]}
{"dataset": "code_medium", "id": "code_medium_335", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a prediction using the following machine learning model in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nsvm_model = SVC()\nsvm_model.fit(X_train, y_train)\npredictions = svm_model.predict(X_test)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_336", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to calculate the total amount of money earned from a given array of stock prices.\n\n### Input:\narr = [5, 7, 15.5, 6, 10, 11]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculateTotalEarnings(arr): \n\ttotalEarnings = 0 \n\t\n\tfor i in range(1, len(arr)): \n\t\ttotalEarnings += max(arr[i] - arr[i - 1], 0) \n\t\t\n\treturn totalEarnings \narr = [5, 7, 15.5, 6, 10, 11] \ntotalEarnings = calculateTotalEarnings(arr) \nprint(\"Total earnings: \", totalEarnings) \n# Output\n# Total earnings:  9.5\n```"}]}
{"dataset": "code_medium", "id": "code_medium_337", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete this function to add two matrices.\n\n### Input:\ndef add_matrices(a, b):\n    # TODO: write code to add two matrices\n    # matrix a and b have the same dimensions\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef add_matrices(a, b):\n    # create a new empty matrix, use the same dimensions as a and b\n    result = [[0 for x in range(len(a[0]))] for y in range(len(a))]\n    # iterate over a and b to complete the matrix addition \n    for i in range(len(a)):\n        for j in range(len(a[0])):\n            result[i][j] = a[i][j] + b[i][j]\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_338", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to store an input string in a hashmap with the count of its occurrence as the value\n\n### Input:\nThe input string is \"apple\".\n\n### Response:"}, {"role": "assistant", "content": "```python\nstring = \"apple\"\ncount_map = dict()\nfor char in string:\n    if char in count_map:\n        count_map[char] += 1\n    else:\n        count_map[char] = 1\nprint(count_map)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_339", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to flatten a two-dimensional list into one-dimensional list in Python.\n\n### Input:\nTwo-dimensional List: [[1,2], [3,4], [5,6]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef flatten_2d_list(lst):\n  flat_list = []\n  for elem in lst:\n    for item in elem:\n      flat_list.append(item)\n  return flat_list\ntest_list = [[1,2], [3,4], [5,6]] \nprint(flatten_2d_list(test_list))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_340", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code snippet to sort the students alphabetically by their last name in the following list?\n\n### Input:\nstudents = [('John', 'Doe'), ('Max', 'Smith'), ('Alice', 'Brown')]\n\n### Response:"}, {"role": "assistant", "content": "```python\nstudents = [('John', 'Doe'), ('Max', 'Smith'), ('Alice', 'Brown')]\nstudents.sort(key= lambda x: x[1])\nprint(students)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_341", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following Python code to add a loop to generate a list of numbers from 1 to 10.\n\n### Input:\nnumbers = []\n\n### Response:"}, {"role": "assistant", "content": "```python\nnumbers = []\nfor i in range(1, 11):\n numbers.append(i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_342", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that appends the input string to a given array.\n\n### Input:\nfind the string \u201chello world\u201d\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef append(array, string):  \n    array.append(string) \n    return array \narray = [] \nstring = \"hello world\"\nappend(array, string) \n \n# Output \narray = ['hello world']\n```"}]}
{"dataset": "code_medium", "id": "code_medium_343", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function `calculate_discount` to calculate 20% discount for a given price.\n\n### Input:\nprice = 50\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_discount(price):\n    return price * 0.8\ndiscount = calculate_discount(price)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_344", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a recursive version of the following code.\n\n### Input:\ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_345", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python Evaluator to evaluate Python expression.\n\n### Input:\nexpression = \"5+3\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef eval_expression(expression): \n return eval(expression) \n  \n# Call the function \nprint(eval_expression(expression))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_346", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a visualization in Matplotlib to display sales figures over the last 6 months.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n \nmonths = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun']\nsales = [40000, 42000, 46000, 50000, 60000, 63000]\n \nfig, ax = plt.subplots()\nax.plot(months, sales, marker='o')\nax.set_title('Monthly Sales')\nax.set_xlabel('Month')\nax.set_ylabel('Sales ($)')\nax.set_ylim(0, max(sales) + 5000)\n \nplt.show()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_347", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the code to add an if statement that returns the string \"even\" if the value of the variable is even, or the string \"odd\" if the value of the variable is odd.\n\n### Input:\nvar number = 5\ndef even_odd(number):\n  #TODO\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef even_odd(number):\n    if number % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\"\n```"}]}
{"dataset": "code_medium", "id": "code_medium_348", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code to include user input.\n\n### Input:\ndef hello_world():\n    # Prints \"Hello, World!\"\n    print(\"Hello, World!\")\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef hello_world():\n    # Prompt user for input\n    user_input = input(\"Please enter your name: \")\n    # Prints \"Hello, {user_input}!\"\n    print(\"Hello, {}!\".format(user_input))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_349", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python to represent a bank account and add methods to display, withdraw, deposit and transfer money.\n\n### Input:\nThe bank account has the following details:\n- Customer Name: John Doe\n- Account Number: 12345\n- Balance: $1000\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass BankAccount:\n    def __init__(self, customer_name, account_number, balance):\n        self.customer_name = customer_name\n        self.account_number = account_number\n        self.balance = balance\n    def display_balance(self):\n        print('Your balance is', self.balance)\n    def withdraw_amount(self, amount):\n        self.balance -= amount\n        print('You withdrew', amount, 'from your account.')\n    def deposit_amount(self, amount):\n        self.balance += amount\n        print('You deposited', amount, 'into your account.')\n    def transfer_amount(self, target_account, amount):\n        self.balance -= amount\n        target_account.balance += amount\n        print('You transferred', amount, 'to the account', target_account.account_number)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_350", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nShow an example of a while loop in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ni = 0\nwhile i < 10:\n    print(i)\n    i += 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_351", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an object that contains the properties for an employee\u2019s name, phone number, and salary.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# construct employee object\nclass Employee:\n    def __init__(self, name, phone, salary):\n        self.name = name\n        self.phone = phone\n        self.salary = salary\n```"}]}
{"dataset": "code_medium", "id": "code_medium_352", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python that will take a string as input and return it with the words in reverse order.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverseWords(s):\n    words = s.split(\" \")\n    words.reverse()\n    return \" \".join(words)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_353", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a barplot using Matplotlib to display the given data.\n\n### Input:\nData: [2, 3, 5, 7, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport matplotlib.pyplot as plt \n  \n# Creating the data \ndata = [2, 3, 5, 7, 9]  \n  \n# Creating the figure and axis \nfig, ax = plt.subplots()  \n  \n# plotting the barplot \nax.bar(range(len(data)), data)  \n  \n# show the plot \nplt.show()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_354", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to delete all the even numbers in the original list.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# function to delete all the even numbers in the original list\ndef remove_even_elements(arr):\n    return [num for num in arr if num % 2 != 0]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_355", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a loop that prints the characters of the given string in reverse order.\n\n### Input:\nstring = 'Hello World'\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(len(string)-1, -1, -1):  \n    print(string[i], end=\"\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_356", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find the common elements in two given lists.\n\n### Input:\nlist1 = [1, 2, 3, 5, 7]\nlist2 = [2, 3, 4, 5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef common_elements(list1, list2):\n    common_ele = []   \n    for i in list1:\n        for j in list2:\n            if i==j:\n                common_ele.append(i)\n    return common_ele\n```"}]}
{"dataset": "code_medium", "id": "code_medium_357", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes in one argument and prints out the Fibonacci number for that argument.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(x): \n    if x == 0: \n        return 0\n    elif x == 1: \n        return 1\n    else: \n        return Fibonacci(x-1)+Fibonacci(x-2) \nif __name__ == '__main__':\n    print(Fibonacci(5))  # Output: 5\n```"}]}
{"dataset": "code_medium", "id": "code_medium_358", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to generate a random password using random library of Python.\n\n### Input:\nlength = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport string \nimport random \ndef generate_password(length): \n    # Generate a random string of characters \n    letters = string.ascii_letters + string.digits \n    password = ''.join(random.choice(letters) for i in range(length)) \n  \n    return password\n  \n# Driver Code\nlength = 8\nprint(generate_password(length))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_359", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that computes the factorial of a positive integer.\n\n### Input:\n8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef factorial(n): \n    if n == 0: \n        return 1\n    else: \n        return n * factorial(n-1) \nprint(factorial(8)) # output: 40320\n```"}]}
{"dataset": "code_medium", "id": "code_medium_360", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to send an email using the smtplib module.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport smtplib\nsender = 'from@example.com'\nrecipients = ['to@example.com']\nmessage = \"\"\"Subject: Test Email\nThis is a test email message.\n\"\"\"\nwith smtplib.SMTP('localhost') as server:\n  server.sendmail(sender, recipients, message)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_361", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a lambda expression to find the maximum value of two numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\nmaximum = lambda num1, num2: num1 if num1 > num2 else num2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_362", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a function that takes a string as an argument and returns a string with the vowels replaced with an asterisk (*).\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef replace_vowels(string):\n\tvowels = \"aeiou\"\n\tresult = \"\"\n\tfor char in string:\n\t\tif char in vowels:\n\t\t\tchar = \"*\"\n\t\tresult += char\n\treturn result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_363", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, create a function that takes 2 integers and returns the maximum number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n```"}]}
{"dataset": "code_medium", "id": "code_medium_364", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop that prints all numbers 1 to 100 with the exception of multiples of 5.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(1,101):\n  if i % 5 != 0:\n    print(i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_365", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to solve a given equation.\n\n### Input:\n4x + 2y = 32\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef solve_equation(x, y):\n    A = 4\n    B = 2\n    C = 32\n    \n    y = (C - A*x)/B\n    return y\n```"}]}
{"dataset": "code_medium", "id": "code_medium_366", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array of random integers from 0-10 and print the sum of all elements in the array.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\n# generate random integers\nint_list = [random.randint(0, 10) for i in range(10)]\n# calculate the sum\ntotal = 0\nfor e in int_list:\n    total += e\n# print the sum\nprint(total)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_367", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function that prints all prime numbers up to the provided number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_prime_numbers(n):\n    # iterate through all numbers up to the provided number\n    for num in range(2, n+1):\n        is_prime = True\n        # check if a number is prime\n        for j in range(2, num):\n            if num % j == 0:\n                is_prime = False\n        # if prime print it\n        if is_prime:\n            print(num)\nprint_prime_numbers(20) # prints 2, 3, 5, 7, 11, 13, 17, 19\n```"}]}
{"dataset": "code_medium", "id": "code_medium_368", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the following piece of code so that the program functions properly.\n\n### Input:\ndef sub_array(array, num):\n    for i in range(len(array) - 1, 0, -1):\n        if array[i] == num:\n            del array[i]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sub_array(array, num):\n    for i in range(len(array) - 1, 0, -1):\n        if array[i] == num:\n            del array[i]\n        else:\n            break\n```"}]}
{"dataset": "code_medium", "id": "code_medium_369", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code segment that manipulates a Fibonacci sequence until the sum is greater than a given number.\n\n### Input:\n10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci_sum(number):\n    fib_list = [0,1]\n    while True:\n        next_number = fib_list[-1] + fib_list[-2]\n        if next_number > number:\n            break\n        fib_list.append(next_number)\n    return sum(fib_list[:-1])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_370", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes an integer as an argument and returns the square of that number\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef square(n):\n    return n ** 2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_371", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an if else statement in Python for checking if a given number is positive or negative.\n\n### Response:"}, {"role": "assistant", "content": "```python\nif x > 0:\n  print(\"The number is positive\")\nelse:\n  print(\"The number is negative\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_372", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a class which instantiates objects with a given name and age\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n```"}]}
{"dataset": "code_medium", "id": "code_medium_373", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class for a thread-safe queue.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport threading\nclass ThreadSafeQueue():\n    def __init__(self):\n        self.queue = []\n        self.lock = threading.Lock()\n    def push(self, item):\n        with self.lock:\n            self.queue.append(item)\n    def pop(self):\n        with self.lock:\n            item = self.queue.pop(0)\n        return item\n```"}]}
{"dataset": "code_medium", "id": "code_medium_374", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code to replace all instances of 'A' with 'Z' in a given string.\n\n### Input:\nstring = \"This is a string A with multiple A's\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef replace_letter_A(string):\n    string = string.replace('A', 'Z')\n    return string\nprint(replace_letter_A(string))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_375", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to encode a given body of text into base64\n\n### Input:\ntext=\"Hello World\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport base64\ndef encode_base64(text):\n return base64.b64encode(text.encode()).decode()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_376", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to compute the Fibonacci sequence for a given input\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compute_fibonacci(n):\n    fib_list = []\n    a, b = 0, 1\n    while a < n:\n        fib_list.append(a)\n        a, b = b, a+b\n    return fib_list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_377", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a regular expression to extract emails from a list of text.\n\n### Input:\ntext_list = [\"contact me at jack@example.com for more information\", \"reach out to jill@example.com for a discussion\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\nemail_list = []\nfor text in text_list:\n    emails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text)\n    email_list.extend(emails)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_378", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to calculate the sum of digits of a given positive integer.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_digits(n):\n  total = 0\n  while n:\n    total += n % 10\n    n //= 10\n  return total\n```"}]}
{"dataset": "code_medium", "id": "code_medium_379", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Django model class to represent a User.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom django.db import models\nclass User(models.Model):\n    first_name = models.CharField(max_length=50)\n    last_name = models.CharField(max_length=50)\n    email = models.EmailField(unique=True)\n    birth_date = models.DateField()\n    is_active = models.BooleanField(default=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_380", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nInitialize a dictionary using the given keys.\n\n### Input:\nkeys=[\"key1\", \"key2\", \"key3\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\nkeys = [\"key1\", \"key2\", \"key3\"]\ndictionary = {key: None for key in keys}\nprint(dictionary)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_381", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a format string in Python to output the sentence \u201cHello, my name is John Doe.\u201d\n\n### Input:\nname = \"John Doe\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nprint(f\"Hello, my name is {name}.\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_382", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a dictionary with the name of the person as key and the cower letter of their name as value.\n\n### Input:\nnames = ['John', 'Max', 'Alice']\n\n### Response:"}, {"role": "assistant", "content": "```python\nresult = {} \nfor name in names: \n    # get the first letter from the name \n    first_letter = name[0] \n    result[name] = first_letter \nprint(result) \n# {'John': 'J', 'Max': 'M', 'Alice': 'A'}\n```"}]}
{"dataset": "code_medium", "id": "code_medium_383", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function which determines if a given number is a palindrome.\n\n### Input:\n7337\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef palindrome(num):\n    # convert the number to a string\n    num_str = str(num)\n    # Reverse the string using slicing\n    rev_str = num_str[::-1]\n    # check if the given number is equal to the reversed string\n    if num_str == rev_str:\n        return True\n    else:\n        return False\nif __name__ == \"__main__\":\n    num = 7337\n    print(palindrome(num))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_384", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind a code that returns the union set of two given sets.\n\n### Input:\ns1 = {1,2,3,4}\n s2 = {3,4,5,6}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef union_sets(s1, s2):\n    return s1 | s2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_385", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that reads 6 numbers from the user and outputs whether they form an increasing subsequence of length 3 or not.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef increasing_subsequence(arr):\n  for i in range(len(arr)-2):\n    if (arr[i] < arr[i+1]) and (arr[i+1] < arr[i+2]):\n      return 'True'\n  return 'False'\n```"}]}
{"dataset": "code_medium", "id": "code_medium_386", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the loop as a generator expression.\n\n### Input:\narr = []\nfor i in range(5):\n    arr.append(i)\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = [i for i in range(5)]\narr = (i for i in range(5))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_387", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nInvestigate the syntax error in this R script and fix it.\n\n### Input:\nx <- c(1, 2, 3\n\n### Response:"}, {"role": "assistant", "content": "```python\nx <- c(1, 2, 3)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_388", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given string from lowercase to uppercase characters.\n\n### Input:\n\"this is a string\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef convert_to_uppercase(string):\n    return string.upper()\n    \nif __name__ == '__main__':\n    print(convert_to_uppercase(\"this is a string\"))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_389", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that takes a sentence as input and returns the amount of vowels that occur in the sentence\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_vowels(sentence):\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    count = 0\n    for char in sentence:\n        if char in vowels:\n            count += 1\n    return count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_390", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind all the prime numbers within a given range.\n\n### Input:\n2, 20\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_primes_in_range(a, b):\n    primes = []\n    for num in range(a, b + 1):\n        if all(num % i != 0 for i in range(2, num)):\n            primes.append(num)\n    return primes\n```"}]}
{"dataset": "code_medium", "id": "code_medium_391", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function that will take two lists as inputs, and return a list that contains all the common items between the lists.\n\n### Input:\nlist1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef common_elements(list1, list2):\n    return [item for item in list1 if item in list2] \nlist1 = [1,2, 3, 4, 5]\nlist2 = [2,4,6,8]\ncommon_items_list = common_elements(list1, list2)\nprint(common_items_list)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_392", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a dictionary from a given list of tuples.\n\n### Input:\n[('a', 1), ('b', 2), ('c', 3)]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef list_to_dict(tuples_list):\n    result = {}\n    for tuple_ in tuples_list:\n        result[tuple_[0]] = tuple_[1]\n    \n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_393", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEnter the necessary code to initiate a MongoDB connection\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom pymongo import MongoClient\n#creating the MongoClient\nclient = MongoClient(\"mongodb://localhost:27017/\")\n#connecting to the database\ndb = client[\"database_name\"]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_394", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuppose we have a dictionary with keys (1,2,3). Create a function to return the values of the dictionary.\n\n### Input:\nd = {1: \"one\", 2: \"two\", 3: \"three\"}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_values(d):\n    return list(d.values())\n```"}]}
{"dataset": "code_medium", "id": "code_medium_395", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConsider a list ``a = [1,3,2,2,3,4]``. What would be the output of the following code?\n\n### Input:\na = [1,3,2,2,3,4]\n\nfor i in range(len(a)):\n    a[i] = a[i -1]\n\n### Response:"}, {"role": "assistant", "content": "```python\na = [1,3,2,2,3,4]\noutput = []\nfor i in range(len(a)):\n    output.append(a[i - 1])\nprint(output) # [3, 2, 2, 3, 4, 1]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_396", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code to search a given string for a specific keyword and return the index of the keyword.\n\n### Input:\ntext = \"Report on the COVID-19 pandemic\"\nkeyword = \"COVID-19\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search_string(text, keyword):\n    \"\"\"\n    A function to search a given string for a specific keyword and return the index of the keyword.\n    Input: string, keyword\n    Output: integer or None\n    \"\"\"\n    # Use the find() method to search the string\n    index = text.find(keyword)\n    \n    # Return None if the keyword was not found\n    if index == -1:\n        return None\n    # Return the index if the keyword was found\n    else:\n        return index\n```"}]}
{"dataset": "code_medium", "id": "code_medium_397", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to fill an array of size n with random integers in the range 0...k-1.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef random_fill_array(n, k):\n    arr = []\n    for _ in range(n):\n        arr.append(random.randint(0, k-1))\n    return arr\n```"}]}
{"dataset": "code_medium", "id": "code_medium_398", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a machine learning model to classify cats and dogs.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nTrain a machine learning model to classify cats and dogs\n\"\"\"\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom keras.preprocessing.image import ImageDataGenerator\nfrom keras.models import Sequential\nfrom keras.layers import Conv2D, MaxPooling2D\nfrom keras.layers import Activation, Dropout, Flatten, Dense\nfrom keras import backend as K\n# Setting up Image Data Generator\ntrain_data_dir = 'data/train'\nvalidation_data_dir = 'data/validation'\nimg_width, img_height = 100, 100\ntrain_datagen = ImageDataGenerator(\n rescale=1. / 255,\n shear_range=0.2,\n zoom_range=0.2,\n horizontal_flip=True)\ntest_datagen = ImageDataGenerator(rescale=1. / 255)\ntrain_generator = train_datagen.flow_from_directory(\n train_data_dir,\n target_size=(img_width, img_height),\n batch_size=32,\n class_mode='binary')\nvalidation_generator = test_datagen.flow_from_directory(\n validation_data_dir,\n target_size=(img_width, img_height),\n batch_size=32,\n class_mode='binary')\n# Setting up the model\nmodel = Sequential()\nmodel.add(Conv2D(32, (3, 3), input_shape=(img_width, img_height, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(32, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Conv2D(64, (3, 3)))\nmodel.add(Activation('relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(64))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.5))\nmodel.add(Dense(1))\nmodel.add(Activation('sigmoid'))\nmodel.compile(loss='binary_crossentropy',\n optimizer='rmsprop',\n metrics=['accuracy'])\n# Training the model\nmodel.fit_generator(\n train_generator,\n steps_per_epoch=2000,\n epochs=50,\n validation_data=validation_generator,\n validation_steps=800)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_399", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to swap the entries in a list.\n\n### Input:\n[10, 20, 30, 40]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef swap(List): \n    temp = List[0] \n    List[0] = List[3] \n    List[3] = temp\n    return List \n  \nList = [10, 20, 30, 40]\nprint(swap(List))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_400", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function to calculate the probability of an event.\n\n### Input:\nnum_outcomes = 36\nnum_favourable_outcomes = 9\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nGenerate a function to calculate the probability of an event\n\"\"\"\ndef calculate_probability(num_outcomes, num_favourable_outcomes):\n    # calculate probability \n    probability = float(num_favourable_outcomes) / float(num_outcomes)\n    return probability\n    \nif __name__ == '__main__': \n    num_outcomes = 36\n    num_favourable_outcomes = 9\n    print(\"Probability of an event is: \" + str(calculate_probability(num_outcomes, num_favourable_outcomes)))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_401", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following code to handle an input which is a negative number.\n\n### Input:\ndef power_func(number):\n    if number >= 0:\n        return number**2\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef power_func(number):\n    if number < 0:\n        return \"Invalid input!\"\n    else:\n        return number**2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_402", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the list comprehension syntax to make a new list whose elements are the square of the first list.\n\n### Input:\nlst = [1, 2, 3, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\n[x**2 for x in lst]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_403", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in python that takes a string and returns a new string with the same letter count but in ascending order\n\n### Input:\nword = \u201ctweet\u201d\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef ascending_order(word):\n    list = []\n    for letter in word:\n        list.append(letter)\n    sorted_list = sorted(list)\n    return \"\".join(sorted_list)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_404", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function for splitting a string into an array of characters.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef split_string_to_chars(string):\n    '''This function takes a string and splits it into an array of characters.'''\n    return list(string)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_405", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to create a two-dimensional array of specified dimensions.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef create_2D_array(rows, columns):\n arr = [[] * columns] * rows\n return arr\n```"}]}
{"dataset": "code_medium", "id": "code_medium_406", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to calculate the compound interest given the principal amount, rate of interest and number of years.\n\n### Input:\np = 1000\nr = 0.10\nn = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calc_comp_int(principal, rate, num_years):\n    return principal * (1 + rate) ** num_years - principal\nprint(calc_comp_int(p, r, n))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_407", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to remove duplicate items in the list.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_duplicates(list_values):\n    result = []\n    for i in list_values:\n        if i not in result:\n            result.append(i)\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_408", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes an input list of strings and returns the longest string in the list.\n\n### Input:\nlist = [\"cat\", \"dog\", \"elephant\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_string(list):\n  longest_word = \"\"\n  for word in list:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return longest_word\n```"}]}
{"dataset": "code_medium", "id": "code_medium_409", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nedit the code so that it prints out the result\n\n### Input:\nval = 5\nsum = 0\nsum = sum + val\n\n### Response:"}, {"role": "assistant", "content": "```python\nval = 5\nsum = 0\nsum += val\nprint(sum) # prints 5\n```"}]}
{"dataset": "code_medium", "id": "code_medium_410", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that extracts a given pattern from a given string\n\n### Input:\ntext = \"Hello world!\", pattern = \"l\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a program that extracts a given pattern from a given string\n\"\"\"\ndef extract_pattern(text, pattern):\n    result = []\n    for i in range(len(text)):\n        if text[i] == pattern:\n            result.append(i)\n    return result\nif __name__ == '__main__':\n    text = \"Hello world!\"\n    pattern = \"l\"\n    print(extract_pattern(text, pattern))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_411", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a deep copy of an object using JSON.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport json\ndef deep_copy(obj):\n    return json.loads(json.dumps(obj))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_412", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given a string. Remove duplicated characters from the string and return the output.\n\n### Input:\nstring = \"Mississippi\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_duplicates(string): \n    new_string = [] \n    for i in string: \n        if i not in new_string: \n            new_string.append(i)    \n    return ''.join(new_string)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_413", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing an existing loop, create code to calculate the sum of all odd numbers up to a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_odd_numbers(num):\n    result = 0\n    for i in range(1, num+1):\n        if i % 2 != 0:\n            result += i\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_414", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to read characters from a given string until a whitespace is encountered\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef read_until_space(string):\n result = \"\"\n for char in string:\n     if char == \" \":\n         break\n     result += char\n return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_415", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings, write a Python function to check if they are anagrams.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef check_anagrams(str1, str2): \n \n    if (len(str1) != len(str2)): \n        return False \n  \n    # sorting both strings \n    str1_list = sorted(str1) \n    str2_list = sorted(str2) \n  \n    # Check if both lists are equal \n    for i in range(0, len(str1_list)): \n        if str1_list[i] != str2_list[i]: \n            return False \n  \n    # If all characters were same \n    return True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_416", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that will calculate the cumulative sum of a list.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef cumulative_sum(lst):\n    '''This function will calculate the cumulative sum of a list.'''\n    result = []\n    s = 0\n    for item in lst:\n        s += item\n        result.append(s)\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_417", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web scraping program to extract text from a given webpage\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nurl = 'url_of_webpage'\npage = requests.get(url)\nsoup = BeautifulSoup(page.content, 'html.parser')\ntext = soup.find_all(text=True)\nfor t in text:\n print(t)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_418", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement Naive Bayes for classification.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport numpy as np\n# Create a data set\nX = np.array([[0, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 0], [0, 0, 1], [0, 1, 1], [1, 0, 1], [1, 1, 1]])\ny = np.array([0, 0, 0, 0, 1, 1, 1, 1])\n# Build a Naive Bayes classifier\nnaive_bayes = GaussianNB()\n# Train the classifier using the training data\nnaive_bayes.fit(X, y)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_419", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the percentage of numbers in an array that is greater than 5.\n\n### Input:\n[3, 4, 7, 8, 9, 11]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calc_perc(arr):\n  count = 0\n  for num in arr:\n    if num > 5:\n      count +=1\n  return count/len(arr) *100\ncalc_perc([3, 4, 7, 8, 9, 11])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_420", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to update the content on the web page with current time and date.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport datetime\ndef update_web_page_time_date():\n    # Get the current time and date\n    current_time = datetime.datetime.now().strftime(\"%H:%M:%S %d-%m-%Y\")\n    # Update the content of the web page\n    with open(\"index.html\", \"w\") as fh:\n        fh.write(\"<p>The current time and date is: {}<p>\".format(current_time))\nif __name__ == '__main__':\n    update_web_page_time_date()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_421", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function which takes a string, converts it to lowercase, and prints out the most commonly-used character in the string.\n\n### Input:\nstring = \"Hello World\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_common_char(string):\n    # Convert to lowercase\n    string = string.lower()\n    # Create an empty dict\n    chars = dict()\n    # Iterate over string\n    for char in string:\n        # Check if the character is in the dict\n        if char in chars:\n            chars[char] += 1\n        else:\n            chars[char] = 1\n    # Get most common char\n    most_common_char = sorted(chars.items(), key=lambda x: x[1], reverse=True)[0][0]\n    return most_common_char\n# Example\nstring = \"Hello World\"\nprint(most_common_char(string))\n# Output: l\n```"}]}
{"dataset": "code_medium", "id": "code_medium_422", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a GUI interface for a multiplayer card game using PyQt5.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport sys \nimport PyQt5 \nfrom PyQt5.QtWidgets import QApplication, QWidget \n  \n  \nclass Game(QWidget): \n    def __init__(self): \n        super().__init__() \n        self.title = 'Multiplayer Card Game' \n        self.left = 400 \n        self.top = 400 \n        self.width = 300 \n        self.height = 100 \n        self.initUI()\n  \n    def initUI(self): \n        self.setWindowTitle(self.title) \n        self.setGeometry(self.left, self.top,  \n                         self.width, self.height)\n        self.show() \n  \napp = QApplication(sys.argv) \nscreen = Game() \nsys.exit(app.exec_())\n```"}]}
{"dataset": "code_medium", "id": "code_medium_423", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a TensorFlow model to perform sentiment analysis on text.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport tensorflow as tf\n# Get the data\ndataset = tf.keras.utils.get_file(\n  'aclImdb_v1.tar.gz', \n  'http://ai.stanford.edu/~amaas/data/sentiment/aclImdb_v1.tar.gz')\n# Load the data and prepare it for the model\nreviews_train, reviews_test, labels_train, labels_test \\\n  = tf.keras.datasets.imdb.load_data(\n    path=str(dataset)[:-7] + \"/aclImdb/train/\")\n# Convert the integers back to words\nword2id = tf.keras.datasets.imdb.get_word_index()\nword2id = {k:(v+3) for k,v in word2id.items()}\nword2id[\"<PAD>\"] = 0\nword2id[\"<START>\"] = 1\nword2id[\"<UNK>\"] = 2 \nword2id[\"<UNUSED>\"] = 3\nid2word = {value:key for key,value in word2id.items()}\n# Model for sentiment analysis\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Embedding(input_dim=len(word2id)+1, output_dim=256),\n  tf.keras.layers.GlobalAveragePooling1D(),\n  tf.keras.layers.Dense(256, activation=tf.nn.relu),\n  tf.keras.layers.Dropout(0.2),\n  tf.keras.layers.Dense(1, activation=tf.nn.sigmoid)\n])\nmodel.compile(\n  optimizer='adam', \n  loss='binary_crossentropy', \n  metrics=['accuracy']\n)\nmodel.fit(\n  reviews_train, \n  labels_train, \n  epochs=10,\n  validation_data=(reviews_test, labels_test)\n)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_424", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python snippet to print the same message 10 times.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor _ in range(10):\n  print(\"Hello World!\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_425", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nOur program should accept an arbitrary number of integers and output a list of the largest number from each.\n\n### Input:\n1 2 3 4 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef largest_number(nums):\n    largest = []\n    for num in nums:\n        if len(largest) == 0 or num > largest[-1]:\n            largest.append(num)\n    return largest\nnums = [1,2,3,4,5]\nresult = largest_number(nums)\nprint(result)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_426", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes a string and returns the number of times the string occurs in the given array\n\n### Input:\nstring = \"hello\", arr = [\"hello\", \"hi\", \"hello\", \"salut\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_string_occurrences(string, arr):\n    # initialize count\n    count = 0\n    # loop through array\n    for i in arr:\n        # if element equals string, increment count\n        if i == string:\n            count += 1\n    # return count\n    return count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_427", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function which takes a given string and replaces all its characters with the next consecutive character.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef shift_string(string):\n  result = \"\"\n  for ch in string:\n    result += chr(ord(ch) + 1)\n  return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_428", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a random sequence of 100 numbers between 1 and 10, both inclusive, and print them on the screen.\n\n### Response:"}, {"role": "assistant", "content": "```python\n2, 6, 7, 1, 5, 4, 4, 7, 1, 6, 8, 9, 4, 1, 3, 4, 5, 10, 3, 7, 1, 8, 10, 8, 8, 2, 10, 7, 5, 10, 8, 7, 5, 6, 1, 7, 8, 2, 8, 7, 5, 1, 3, 7, 10, 2, 10, 7, 5, 6, 9, 2, 4, 2, 1, 2, 5, 2, 4, 7, 6, 2, 4, 7, 1, 2, 7, 10, 4, 6, 7, 4, 1, 5, 7, 3, 8, 4, 7, 10, 6, 8, 2, 9, 2, 5, 2, 3, 6, 4, 9, 4, 2, 6, 7\n```"}]}
{"dataset": "code_medium", "id": "code_medium_429", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nParse the following HTML string and return the list of id's.\n\n### Input:\n<form> \n  <input name=\"user_id\" type=\"text\" id=\"user_id\" value=\"123456\"> \n  <input name=\"name\" type=\"text\" id=\"name\" value=\"John Doe\"> \n  <input name=\"email\" type=\"text\" id=\"email\" value=\"john@example.com\"> \n  <input name=\"password\" type=\"password\" id=\"password\" value=\"password123\">\n</form>\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport lxml.html\ninput_html = '''\n<form> \n  <input name=\"user_id\" type=\"text\" id=\"user_id\" value=\"123456\"> \n  <input name=\"name\" type=\"text\" id=\"name\" value=\"John Doe\"> \n  <input name=\"email\" type=\"text\" id=\"email\" value=\"john@example.com\"> \n  <input name=\"password\" type=\"password\" id=\"password\" value=\"password123\">\n</form>\n'''\ndef get_id_list(html):\n    root = lxml.html.fromstring(html)\n    ids = root.xpath('//*[@id]')\n    return [id.attrib['id'] for id in ids]\nif __name__ == '__main__':\n    print(get_id_list(input_html))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_430", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a regex pattern to find all words that start with 'a' in a sentence.\n\n### Input:\nSentence: \"All animals are amazing\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nFind all words that start with 'a' in a sentence\n\"\"\"\nimport re\ndef find_words_with_a(sentence):\n    pattern = r\"\\b[aA]\\w+\\b\"\n    matches = re.findall(pattern, sentence)\n    return matches\nif __name__ == '__main__':\n    sentence = \"All animals are amazing\"\n    print(find_words_with_a(sentence))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_431", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes two strings, s1 and s2, and checks to see if s2 is a substring of s1\n\n### Input:\ns1 = \"Hello World\"\ns2 = \"Hello\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef isSubstring(s1, s2): \n    if s2 in s1: \n        return True\n    else: \n        return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_432", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the function such that it takes two arrays, one containing numbers and the other containing symbols as arguments and returns a string where each number is replaced with its associated symbol.\n\n### Input:\nnums = [1,2,3,4,5]\nsymbols = [\"A\",\"B\",\"C\",\"D\",\"E\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef join_nums_symbols(nums, symbols):\n    assert len(nums) == len(symbols), \"length of nums and symbols should be equal\"\n    result = \"\"\n    for i in range(len(nums)):\n        result += str(nums[i]) + symbols[i]\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_433", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that takes a list as an input and returns the elements in reverse order\n\n### Input:\n['apple', 'banana', 'cherry']\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_list(input_list):\n    reversed_list = []\n    for i in range(len(input_list)-1,-1,-1):\n        reversed_list.append(input_list[i])\n    return reversed_list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_434", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Flask route for handling GET requests with the path \"/hello\".\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom flask import Flask\napp = Flask(__name__)\n@app.route(\"/hello\", methods=[\"GET\"]) \ndef hello(): \n    return \"Hello!\"\n```"}]}
{"dataset": "code_medium", "id": "code_medium_435", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide an example for each of the following data types.\n\n### Response:"}, {"role": "assistant", "content": "```python\nStrings: \"Hello World!\"\nIntegers: 15\nFloats: 3.14\nDictionaries: {\"name\": \"John\", \"age\": 32} \nLists: [1, 2, 3, 4, 5]\nTuples: (\"Apple\", \"Banana\", \"Orange\")\nSets: {1, 2, 4, 8, 16}\n```"}]}
{"dataset": "code_medium", "id": "code_medium_436", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the code in the input to the output\n\n### Input:\ndef do_something(data):\n    # TODO: Your code here\n    pass\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef do_something(data):\n    # Your code here\n    result = 1\n    for num in data:\n        result *= num\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_437", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAmend the following Python code to add error handling to the function print_score.\n\n### Input:\ndef print_score(score):\n    print(f'The score is {score}')\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_score(score):\n    try:\n        score = int(score)\n        print(f'The score is {score}')\n    except ValueError:\n        print(\"The score must be an integer.\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_438", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint a list of numbers from 1 to 10 except for 5 and 6.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor num in range(1, 11):\n    if num != 5 and num != 6:\n        print(num)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_439", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, write a function to find the largest value in the list.\n\n### Input:\nlst = [1, 5, 9, 12, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_largest_value(lst):\n    max_value = lst[0]\n    for num in lst:\n        if num > max_value:\n            max_value = num\n    return max_value\nprint(get_largest_value(lst))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_440", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the sum of all elements from the following list.\n\n### Input:\nlist1 = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist_sum = 0\nfor num in list1:\n    list_sum += num\nprint(list_sum)\n# Output: 15\n```"}]}
{"dataset": "code_medium", "id": "code_medium_441", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a matrix with 5 rows and 7 columns containing random numbers in it.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport numpy as np\n# Create a matrix with 5 rows and 7 columns\nmatrix = np.random.rand(5,7)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_442", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a solution in Python to replace all the occurences of a specific word in a string.\n\n### Input:\nsentence = \"I like apples\"\nword = \"apples\"\nreplacement = \"bananas\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef replace_word(sentence, word, replacement):\n    words = sentence.split(\" \")\n    new_sentence = \"\"\n    for w in words:\n        if w == word:\n            w = replacement\n        new_sentence += w + \" \"\n    return new_sentence\nsentence = \"I like apples\"\nword = \"apples\"\nreplacement = \"bananas\"\nprint(replace_word(sentence, word, replacement))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_443", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the cosine similarity between the given two sentence vectors.\n\n### Input:\nvec1 = [1,2,3,4,5]\nvec2 = [2,3,4,5,6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef cosine_similarity(vec1, vec2):\n    dot_product = np.dot(vec1, vec2)\n    norm_vec1 = np.linalg.norm(vec1)\n    norm_vec2 = np.linalg.norm(vec2)\n    return dot_product / (norm_vec1 * norm_vec2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_444", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to generate a list of numbers that is the square of all numbers between 1 and the number provided.\n\n### Input:\nnum = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_square_list(num):\n    result = []\n    for i in range(1, num+1):\n        result.append(i*i)\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_445", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSplit a string by a number greater than the length of the string in Python.\n\n### Input:\nstring = \"Hello World\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nsplit_string = string[:11]\nprint(split_string) # Output = \"Hello World\"\n```"}]}
{"dataset": "code_medium", "id": "code_medium_446", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to calculate the gravitational force between two objects\n\n### Input:\nTwo objects with a mass of 3kg and 10kg are separated by 10m.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef gravitational_force(m1, m2, r):\n    G = 6.67 * 10**-11\n    f = G*(m1*m2/r**2)\n    return f\n    \nif __name__ == '__main__':\n    m1 = 3\n    m2 = 10\n    r = 10\n    force = gravitational_force(m1, m2, r)\n    print(force)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_447", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a classifier in Python using the Scikit-learn library.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Load the libraries\nfrom sklearn.svm import SVC\nfrom sklearn.model_selection import train_test_split\n# Split the data\nX = data.iloc[:, :-1]\ny = data.iloc[:, -1]\nX_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, random_state=42)\n# Train the model\nsvm_model = SVC(gamma='auto')\nsvm_model.fit(X_train, y_train)\n# Make predictions on the test set\ny_predictions = svm_model.predict(X_test)\n# Evaluate Model Performance\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, y_predictions))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_448", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes a single parameter and returns the absolute value of the parameter.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef absolute_value(x):\n    if x < 0:\n        return -x\n    else:\n        return x\n```"}]}
{"dataset": "code_medium", "id": "code_medium_449", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given a string. Count the total number of lowercase letters in the string.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_lowercase(string):\n    count = 0\n    for char in string:\n        if char.islower():\n            count += 1\n    return count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_450", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function to remove the given string from another string.\n\n### Input:\nString to remove: \"cat\"\nString to modify: \"The crazy cat jumped to the roof\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_string(remove, string):\n    return string.replace(remove, \"\")\nremove_string(\"cat\", \"The crazy cat jumped to the roof\")\n# Output: \"The crazy  jumped to the roof\"\n```"}]}
{"dataset": "code_medium", "id": "code_medium_451", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd 10 to the last element of a given array.\n\n### Input:\n[1, 2, 3, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = [1, 2, 3,4]\narr[-1] += 10\nprint(arr)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_452", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to convert a given spredsheet in csv format to json format.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport csv\nimport json\ndef csv_to_json():\n    # Path of csv file\n    file_csv = 'mycsvfile.csv'\n    \n    # Path of json file\n    file_json = 'myjsonfile.json'\n    \n    with open(file_csv, 'r') as input_file:\n        reader = csv.DictReader(input_file)\n        data = list(reader)\n    \n    with open(file_json, 'w') as output_file:\n        json.dump(data, output_file)\ncsv_to_json()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_453", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to validate an email entered by the user.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nValidate an email entered by the user\n\"\"\"\nimport re\ndef validate_email(email):\n regex = '^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$'\n if(re.search(regex, email)):\n  return True\n else:\n  return False\n  \nif __name__ == '__main__':\n email = input('Enter email address: ')\n if validate_email(email):\n  print('Valid email address')\n else:\n  print('Invalid email address')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_454", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, find the lowest and highest numbers in the list.\n\n### Input:\nnumbers = [5, 8, 2, 9, 4, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_min_max(numbers):\n    lowest = numbers[0]\n    highest = numbers[0]\n    for num in numbers:\n        if num < lowest:\n            lowest = num\n        if num > highest:\n            highest = num\n    return (lowest, highest)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_455", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API Request to send a request with a body in JSON format\n\n### Input:\nEndpoint: https://example.com/orders\n<noinput>\n\n### Response:"}, {"role": "assistant", "content": "```python\nfetch('https://example.com/orders', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: {\n    orderId: '12434',\n    items: [\n      { itemId: '345', quantity: 3 },\n      { itemId: '678', quantity: 4 }\n    ]\n  }\n});\n```"}]}
{"dataset": "code_medium", "id": "code_medium_456", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to represent a 3D point(x,y,z).\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Point3D(object):\n    def __init__(self, x, y, z):\n        self.x = x \n        self.y = y \n        self.z = z\n    \n    def __repr__(self):\n        return \"Point3D(%d, %d, %d)\" % (self.x, self.y, self.z)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_457", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to detect an infinite loop in a given program.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef detectInfiniteLoop(program):\n  setOfInstructions = set()\n  for line in program.split('\\n'):\n    if line in setOfInstructions:\n      return True\n    setOfInstructions.add(line)\n  return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_458", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to subtract two given numberss.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef subtract_numbers(num1, num2):\n  return num1 - num2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_459", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to check if a string starts with a letter 'A'.\n\n### Input:\nstr = \"I love apples\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nif str.startswith(\"A\"):\n  print(\"The string starts with 'A'.\")\nelse:\n  print(\"The string does not start with 'A'.\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_460", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort all strings in a list alphabetically, using Python.\n\n### Input:\n[\"apple\", \"dog\", \"cat\", \"banana\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nSort all strings in a list alphabetically, using Python.\n\"\"\"\n# Initialize the list of strings\nlist_of_strings = [\"apple\", \"dog\", \"cat\", \"banana\"]\n# Sort the list alphabetically\nlist_of_strings.sort()\n# Print the sorted list\nprint(list_of_strings)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_461", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare the input list with a pre-defined list and return a new list containing only the elements that are present in both lists.\n\n### Input:\nmy_list = [1, 2, 3, 4]\npre_defined_list = [2, 4, 6, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compare_lists(my_list, pre_defined_list):\n    new_list = []\n    for element in my_list:\n        if element in pre_defined_list:\n            new_list.append(element)\n    return new_list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_462", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following to convert a date string to datetime format.\n\n### Input:\nimport datetime \n\ndef convert_date_string(date_string):\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport datetime \ndef convert_date_string(date_string):\n   return datetime.datetime.strptime(date_string, \"%d-%m-%y\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_463", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you fill a 2D array with zeros?\n\n### Response:"}, {"role": "assistant", "content": "```python\nmy_2d_array = [[0 for col in range(3)] for row in range(3)]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_464", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code in the form of list comprehension.\n\n### Input:\nnames = [\"Max\",\"John\",\"Monica\",\"Harry\",\"Steve\"]\nupper_names = []\nfor name in names:\n    upper_names.append(name.upper())\n\n### Response:"}, {"role": "assistant", "content": "```python\nupper_names = [name.upper() for name in names]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_465", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a valid Python code to add two numbers\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef add_two_numbers(a, b):\n    return a + b\n```"}]}
{"dataset": "code_medium", "id": "code_medium_466", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Java code snippet to print out the value of the variable \"num\" to the console.\n\n### Input:\nint num = 10;\n\n### Response:"}, {"role": "assistant", "content": "```python\nSystem.out.println(num);\n```"}]}
{"dataset": "code_medium", "id": "code_medium_467", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the list of numbers [3,2,7,9,1] in ascending order.\n\n### Input:\nlist = [3,2,7,9,1]\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist.sort()\nprint(list)\n# Output\n[1,2,3,7,9]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_468", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to extract all unique words from a given sentence.\n\n### Input:\nThis sentence contains multiple words.\n\n### Response:"}, {"role": "assistant", "content": "```python\nsentence_words = set(sentence.split())\nunique_words = set(word for word in sentence_words if word not in visited_words)\nprint(unique_words)\n# Output: {'contains', 'words', 'multiple', 'This'}\n```"}]}
{"dataset": "code_medium", "id": "code_medium_469", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that converts a given binary number to its equivalent decimal number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_to_decimal(binary): \n    decimal = 0\n    base = 1\n    binary = str(binary)\n    length = len(binary) \n    for i in range(length-1, -1, -1): \n        if (binary[i] == '1'):      \n            decimal += base\n        base = base * 2\n    return decimal\n```"}]}
{"dataset": "code_medium", "id": "code_medium_470", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFor the given code, fill the missing values for the parameters.\n\n### Input:\ndef compute_squared(x, y=?, z=?):\n    '''This function computes the sum of the squared values of x, y, and z.'''\n    return x ** 2 + y ** 2 + z ** 2\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compute_squared(x, y=0, z=0):\n    '''This function computes the sum of the squared values of x, y, and z.'''\n    return x ** 2 + y ** 2 + z ** 2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_471", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to parse the following JSON into a dictionary\n\n### Input:\n{\n  \"firstName\": \"John\",\n  \"lastName\": \"Smith\",\n  \"age\": 25\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport json \ndef parse_json(json_data):\n    data = json.loads(json_data)\n    return {key: data[key] for key in data}\n```"}]}
{"dataset": "code_medium", "id": "code_medium_472", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd this method to the Person class.\n\n### Input:\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def intro(self):\n        print(\"Hi, my name is %s and I am %d years old.\" % (self.name, self.age))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_473", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nParse the sentence and extract all the verbs from it.\n\n### Input:\nSentence: \"She ran quickly to catch the bus.\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef extract_verbs(sentence):\n  verbs = []\n  words = sentence.split(\" \")\n  for w in words:\n    if w.endswith(\"ed\") or w.endswith(\"ing\"):\n      verbs.append(w)\n  return verbs\n```"}]}
{"dataset": "code_medium", "id": "code_medium_474", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to search for a given keyword in a dictionary.\n\n### Input:\ndictionary = {\n    \u201cCar\u201d: \u201cA vehicle with four wheels\u201d,\n    \u201cLaptop\u201d: \u201cA computer for personal use\u201d,\n    \u201cGame\u201d: \u201cAn activity for entertainment\u201d\n    }\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search(dic, keyword):\n    for key, value in dic.items():\n        if keyword in key:\n            return value\n    return \"No matching keyword found!\"\nsearch(dictionary, 'Laptop')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_475", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to print out all dates between two given dates in Python\n\n### Input:\nstart_date = '08/20/2020'\nend_date = '08/30/2020'\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom datetime import timedelta, date\ndef daterange(start_date, end_date):\n    for n in range(int ((end_date - start_date).days)):\n        yield start_date + timedelta(n)\nstart_date = date(2020, 8, 20)\nend_date = date(2020, 8, 30)\nfor single_date in daterange(start_date,end_date):\n    print(single_date.strftime(\"%d/%m/%Y\"))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_476", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you output the average value of a given list of numbers?\n\n### Input:\nlist_int = [2, 7, 15, 25]\n\n### Response:"}, {"role": "assistant", "content": "```python\navg = sum(list_int) / len(list_int) # avg = 11.5\n```"}]}
{"dataset": "code_medium", "id": "code_medium_477", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to find common elements in two lists.\n\n### Input:\nlist_1 = [1, 2, 3]\nlist_2 = [2, 3, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_common_elements(list_1, list_2):\n    '''This function will find the common elements in two lists.'''\n    return [val for val in list_1 if val in list_2]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_478", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function with two parameters to return the sum of the squares of the parameters.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_squares(x, y):\n    return x*x + y*y\n```"}]}
{"dataset": "code_medium", "id": "code_medium_479", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a method to validate whether an input string is a valid JSON document or not.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Method to validate whether an input string is a valid JSON document\ndef is_valid_json(input_string):\n    # Try to parse the given string with the json library\n    try:\n        json.loads(input_string)\n        return True\n    # If there is an error while parsing the string, it is not a valid JSON document\n    except json.JSONDecodeError:\n        return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_480", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script to generate a random password using uppercase, lowercase and numerics.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport string\nimport random\ndef generate_password():\n    password_characters = string.ascii_uppercase + string.ascii_lowercase + string.digits\n    password_length = 16\n    return ''.join(random.choice(password_characters) for i in range(password_length))\ngenerate_password()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_481", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing regular expression, write a code to extract words that start with a specific letter from a given string.\n\n### Input:\nstring = \"This is a test sentence\"\nletter = \"t\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\ndef extract_words(string, letter):\n    \"\"\"\n    Extract words that start with a specific letter from a given string\n    \"\"\"\n    # Use a regular expression to match words that start with the letter\n    pattern = r\"\\b\" + letter + r\"\\w*\\b\"\n    words = re.findall(pattern, string) \n  \n    return words\nif __name__ == '__main__':\n    string = \"This is a test sentence\"\n    letter = \"t\"\n    print(extract_words(string, letter))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_482", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Frequency Table for the following sequence of characters using Python.\n\n### Input:\n'aabbccddee'\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Create a frequency table for the given sequence\n# using Python\nfrom collections import Counter\nstring = 'aabbccddee'\n# create the Counter object\nfreq_table = Counter(string)\n# print the output\nprint(freq_table)\n# Output\nCounter({'a': 2, 'b': 2, 'c': 2, 'd': 2, 'e': 2})\n```"}]}
{"dataset": "code_medium", "id": "code_medium_483", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the number of words in a given sentence using a Python function.\n\n### Input:\nsentence = \"This is a test sentence\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef word_count(sentence):\n  return len(sentence.split())\n```"}]}
{"dataset": "code_medium", "id": "code_medium_484", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWe want to display a random number between 1 and 10 using Python. Write a program for that.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\nrandomNumber = random.randint(1, 10)\nprint(randomNumber)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_485", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to parse the given JSON dataset.\n\n### Input:\n{\n \"name\": \"John\",\n \"age\": 20,\n \"location\": \"Texas\"\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport json\ndata = '{\"name\": \"John\", \"age\": 20, \"location\": \"Texas\"}'\ndata = json.loads(data)\nname = data[\"name\"]\nage = data[\"age\"]\nlocation = data[\"location\"]\nprint(f\"Name: {name}\")\nprint(f\"Age: {age}\")\nprint(f\"Location: {location}\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_486", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nInsert a comment in the following code snippet to explain what the code is doing.\n\n### Input:\nx = 5\ny = 7\nx = x + y\n\n### Response:"}, {"role": "assistant", "content": "```python\n#This code is adding the value of y to x and then assigning the result to x.\nx = 5\ny = 7\n#add the value of y to x\nx = x + y\n```"}]}
{"dataset": "code_medium", "id": "code_medium_487", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list comprehension statement in Python that prints all the even numbers from a list of numbers from 1 to 10.\n\n### Response:"}, {"role": "assistant", "content": "```python\n[n for n in range(1, 11) if n % 2 == 0]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_488", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to take a string input and reverse the order of its words.\n\n### Input:\nstring = \"This is a sentence\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_words_order(string):\n    words = string.split(' ')\n    words_reversed = words[::-1]\n    return ' '.join(words_reversed)\nprint(reverse_words_order(string))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_489", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop that prints the values from a and b in the ascending order.\n\n### Input:\na = 5\nb = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Initialize variable\na = 5\nb = 10\n# Loop for print in ascending order\nfor i in range(a,b+1):\n    print(i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_490", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the comment as a guide, replace the placeholder with the proper code to remove all duplicates from a list.\n\n### Input:\nmylist = [1, 2, 3, 2, 4, 2]\n# TODO: write code to remove all duplicates from mylist\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_duplicates(mylist):\n    mylist = list(dict.fromkeys(mylist))\n    return mylist\nif __name__ == '__main__':\n    mylist = [1, 2, 3, 2, 4, 2]\n    print(remove_duplicates(mylist))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_491", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for loop in Python to iterate through the items in the list and print their corresponding index.\n\n### Input:\nlst = [1,2,3]\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i, num in enumerate(lst):\n    print(i, num)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_492", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow do you implement depth-first search in Python?\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef depth_first_search(graph, start):\n    explored = [] # List of already explored nodes\n    stack = [start] # Stack of nodes to explore\n    while stack:\n        node = stack.pop() # Pop the next node from stack\n        if node not in explored:\n            explored.append(node) # Add the node to explored\n            neighbors = graph[node] # List of neighbors of node\n            for neighbor in neighbors:\n                stack.append(neighbor) # Add neighbors to stack\n    \n    return explored\n```"}]}
{"dataset": "code_medium", "id": "code_medium_493", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes in two strings as input and outputs True if they are anagrams, False otherwise.\n\n### Input:\ns1 = \u201csilent\u201d\ns2 = \u201clisten\u201d\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef anagrams(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n    s1_arr.sort()\n    s2_arr.sort()\n    for i in range(len(s1_arr)):\n        if s1_arr[i] != s2_arr[i]:\n            return False\n    return True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_494", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in Python that plots a bar chart showing the count of beers sold in a bar in a particular week.\n\n### Input:\nbeer_sales = [200, 500, 600, 100, 800]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport matplotlib.pyplot as plt\nweek = [1, 2, 3, 4, 5]\nplt.bar(week,beer_sales)\nplt.xlabel('Week')\nplt.ylabel('Number of beers sold')\nplt.show()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_495", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to detect even numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_even(number):\n  if (number % 2 == 0):\n    return True\n  else:\n    return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_496", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code using lambda expression instead.\n\n### Input:\ndef square(x):\nreturn x * x\n\n### Response:"}, {"role": "assistant", "content": "```python\nsquare = lambda x: x * x\n```"}]}
{"dataset": "code_medium", "id": "code_medium_497", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite this code into Python.\n\n### Input:\nArrayList<Integer> arr = new ArrayList<>();\nfor (int i = 0; i < 10; i++) {\n    arr.add(i);\n}\n\nint sum = 0;\nfor(int num : arr){\n    sum += num;\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = []\nfor i in range(10):\n    arr.append(i)\nsum = 0\nfor num in arr:\n    sum += num\n```"}]}
{"dataset": "code_medium", "id": "code_medium_498", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the scalar product of two vectors and print the result.\n\n### Input:\nVector1: [1,2,3]\nVector2: [4,5,6]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCalculate the scalar product of two vectors and print the result\n\"\"\"\n# Calculate the scalar product of two vectors\nvector1 = [1,2,3]\nvector2 = [4,5,6]\nscalar_product = sum([x*y for x,y in zip(vector1 , vector2)])\n# Print the scalar product\nprint('Scalar Product: ', scalar_product)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_499", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that switches the odd elements and the even elements in a list\n\n### Input:\ndef switch_list(mylist):\n    #TODO\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef switch_list(mylist):\n    for i in range(0, len(mylist), 2):\n        temp = mylist[i]\n        mylist[i] = mylist[i + 1]\n        mylist[i + 1] = temp\n    return mylist\n```"}]}
{"dataset": "code_medium", "id": "code_medium_500", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes a string and a keyword, then delete all the occurrences of the keyword in the given string.\n\n### Input:\nstr = \"I am going to the market to buy apples\"\nkeyword = \"apples\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef delete_occurrences(string, keyword):\n    new_str = string.replace(keyword, '')\n    return new_str\nprint(delete_occurrences(str, keyword))  # prints \"I am going to the market to buy\"\n```"}]}
{"dataset": "code_medium", "id": "code_medium_501", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two lists of equal length and creates a dictionary of the elements in each list that have the same index.\n\n### Input:\nlist_one = [1, 2, 3, 4]\nlist_two = [\"a\", \"b\", \"c\", \"d\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef list_dict(list_one, list_two):\n    \"\"\"Create a dictionary of elements in the two lists which have the same index.\"\"\"\n    assert len(list_one) == len(list_two), \"lists must be same length\"\n    dict = {}\n    for i in range(len(list_one)):\n        dict[list_one[i]] = list_two[i]\n    return dict\n```"}]}
{"dataset": "code_medium", "id": "code_medium_502", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nManipulate the string \"Hello, World!\" using the correct Python function that will replace the word \"Hello\" with \"Goodbye\".\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef goodbye_world(string):\n    \"\"\"Replaces the word Hello with Goodbye in the string.\"\"\"\n    return string.replace(\"Hello\", \"Goodbye\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_503", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the class group, create an instance of the StudentClass and print out its name attribute.\n\n### Input:\nclass StudentClass:\n    def __init__(self, name):\n        self.name = name\n\n### Response:"}, {"role": "assistant", "content": "```python\n# create an instance of the StudentClass\nstudent_class = StudentClass(\"Statistics\")\n#print out its name attribute\nprint(student_class.name)  # Output: Statistics\n```"}]}
{"dataset": "code_medium", "id": "code_medium_504", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nParse this JSON data and print out the \u201crating\u201d of every item in the list.\n\n### Input:\n{\n    \"ratings\": [\n        {\"title\": \"Frozen II\", \"rating\": 7.5},\n        {\"title\": \"The Irishman\", \"rating\": 8.2},\n        {\"title\": \"Parasite\", \"rating\": 8.5},\n    ]\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport json\ndata = {\n    \"ratings\": [\n        {\"title\": \"Frozen II\", \"rating\": 7.5},\n        {\"title\": \"The Irishman\", \"rating\": 8.2},\n        {\"title\": \"Parasite\", \"rating\": 8.5},\n    ]\n}\ndata = json.loads(data)\nfor item in data['ratings']:\n    print(\"Rating for %s: %f\" % (item['title'], item['rating']))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_505", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRemove all the elements in an array using filter function.\n\n### Input:\nitems = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Remove all the elements in an array using filter function\nitems = [1, 2, 3, 4, 5]\nfilterend_items = list(filter(lambda x: False, items))\nprint(filterend_items) # Output: []\n```"}]}
{"dataset": "code_medium", "id": "code_medium_506", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script that randomly shuffles the elements of a given array.\n\n### Input:\nlist = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\ndef shuffle(arr):\n    random.shuffle(arr)\n    return arr\nresult = shuffle([1, 2, 3, 4, 5])\nprint(result)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_507", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a method to parse a URL query string.\n\n### Input:\nurl: https://www.example.com/?sort=alphabetical&order=asc&search=something\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef parse_query_string(url):\n    # extracting the query string\n    query_str = url.split(\"?\")[1]\n    query_param = query_str.split(\"&\")\n    # create dictionary from query string\n    result_dict = {}\n    for q in query_param:\n        key, value = q.split('=')\n        result_dict[key] = value\n    return result_dict\n```"}]}
{"dataset": "code_medium", "id": "code_medium_508", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the response to now fulfill the following purpose\n\n### Input:\nFind the number of ones in a binary number 101011\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_ones(n):\n    count = 0\n    while n > 0:\n        if n % 10 == 1:\n            count += 1\n        n //= 10        \n    return count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_509", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to create a retail price tag given a cost, taxes and discounts.\n\n### Input:\ncost = 5\ntax = 0.08\ndiscount = 0.2\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef price_tag(cost, tax, discount):\n  tax_amount = cost * tax \n  discounted_price = cost + tax_amount - (discount * cost)\n  return \"Retail Price: $\" + str(round(discounted_price, 2))\nprice_tag(cost, tax, discount) # returns \"Retail Price: $7.20\"\n```"}]}
{"dataset": "code_medium", "id": "code_medium_510", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCount the number of occurrences of a given number in a list of numbers.\n\n### Input:\nnumbers = [1,1,2,3,4,4,4,5]\nnumber = 4\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCount the number of occurrences of a given number in a list of numbers.\n\"\"\"\nnumbers = [1,1,2,3,4,4,4,5]\nnumber = 4\ndef count_occurrences(numbers, number):\n    count = 0\n    for num in numbers:\n        if num == number:\n            count += 1\n    return count\nprint(count_occurrences(numbers, number))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_511", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in JavaScript to make all letters in a string upper case.\n\n### Input:\n<input_str=\"Hello World\" >\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef makeUpperCase(input_str): \n  return input_str.upper()\nresult = makeUpperCase(\"Hello World\")\nprint(result)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_512", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python script that takes user input and prints out the squares of the numbers\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Take input from user\nnumbers = input(\"Enter numbers: \") \n  \n# split the string \nnumbers = list(map(int, numbers.split(' '))) \n  \n# Loop to print the squares of numbers\nfor number in numbers:\n    print(number*number)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_513", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python while loop that iterates through the list `my_list` and prints each item.\n\n### Input:\nmy_list = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ni = 0\nwhile i < len(my_list):\n    print(my_list[i])\n    i += 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_514", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a while loop to print all elements of an array.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ni = 0\nwhile i < len(arr):\n  print(arr[i])\n  i += 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_515", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a recursive solution for counting the number of characters in a given string.\n\n### Input:\nexample\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_chars(string):\n    if len(string) == 0:\n        return 0\n    return 1 + count_chars(string[1:])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_516", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to extract all the hyperlinks from a Wikipedia page.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Importing necessary libraries\nimport bs4\nimport requests\n# Fetching the data\nurl = \"https://en.wikipedia.org/wiki/Main_Page\"\nresponse = requests.get(url)\nsoup = bs4.BeautifulSoup(response.text)\n# Extracting hyperlinks\nlinks = []\nfor link in soup.find_all('a'):\n    links.append(link.get('href'))\n# Printing all hyperlinks present in the page\nprint(links)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_517", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to generate a random pin which has 6 digits and should contain at least one lowercase, one uppercase and one numeric character.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport string\nimport random\ndef generate_pin():\n pin = '';\n chars = string.ascii_lowercase + string.ascii_uppercase + string.digits\n for i in range(6):\n  pin += random.choice(chars)\n return pin\nprint(generate_pin())\n```"}]}
{"dataset": "code_medium", "id": "code_medium_518", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python script that connects to a database and outputs the average age of users.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport pandas as pd \nimport sqlite3\n# Connect to database\nconn = sqlite3.connect(\"myDB.db\")\n# Read Data \ndf = pd.read_sql(\"SELECT age FROM Users\", conn)\n# Calculate average \navg_age = df.mean()\n# Output the average age of users \nprint(\"Average age of users: \", avg_age)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_519", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to combine two given list of strings.\n\n### Input:\nlist1 = [\"Python\", \"Ruby\", \"JavaScript\"]\nlist2 = [\"C++\", \"C#\", \"GO\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef combine_lists(list1, list2):\n combined_list = list1 + list2\n return combined_list\nprint(combine_lists(list1, list2))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_520", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python snippet to reverse the words in a sentence.\n\n### Input:\nThis sentence should be reversed.\n\n### Response:"}, {"role": "assistant", "content": "```python\n''.join(reversed(sentence.split()))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_521", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function which will take two strings as input and reverse their order while maintaining the same character at each index.\n\n### Input:\ns1 = \"hello\"\ns2 = \"world\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_string_order(s1, s2):\n    result = \"\"\n    for i in range(len(s1)):\n        result += s2[i] + s1[i]\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_522", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to calculate the number of unique combinations of three digits from 0 to 9.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef combinations(n, k):\n    from itertools import combinations\n    return len(list(combinations(range(n), k)))\n \ncomb = combinations(10, 3)\nprint(comb)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_523", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to calculate the greatest common factor of two positive integers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef gcd(x, y): \n  \n    # base case \n    if x == 0: \n        return y \n    \n    # a is greater \n    if x > y: \n        return gcd(x % y, y) \n    \n    # b is greater\n    return gcd(x, y % x) \n# Driver code\n# x and y are the two positive integers\nx = 16\ny = 24\ngcd_val = gcd(x, y)\nprint(\"The greatest common factor of\",x,\"and\",y,\"is\",gcd_val)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_524", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string, convert it to a list of words.\n\n### Input:\nThe quick brown fox jumped over the lazy dog\n\n### Response:"}, {"role": "assistant", "content": "```python\nstring = \"The quick brown fox jumped over the lazy dog\"\nwords_list = string.split()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_525", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a deep learning model to output a sentence in French when given an English sentence as input.\n\n### Input:\nI like to eat apples.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a deep learning model to output a sentence in French when given an English sentence as input\n\"\"\"\nimport tensorflow as tf\nimport numpy as np\n# Input and output languages\ninput_lang = 'EN'\noutput_lang = 'FR'\n# Define the model\nmodel = tf.keras.Sequential([\n  tf.keras.layers.Embedding(input_dim=vocab_size, output_dim=128, input_length=10),\n  tf.keras.layers.Bidirectional(tf.keras.layers.LSTM(64)),\n  tf.keras.layers.Dense(vocab_size, activation='softmax')\n])\n# Compile and train the model\nmodel.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),\n              optimizer=tf.keras.optimizers.Adam())\nmodel.fit(input_tensor, output_tensor, epochs=100) \n# Make a prediction\nsentence = 'I like to eat apples.'\npredicted_sentence = translate(sentence, input_lang, output_lang, model) \nprint(predicted_sentence) # J'aime manger des pommes.\n```"}]}
{"dataset": "code_medium", "id": "code_medium_526", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nReformat a given JSON string between quotes to a properly indented and formatted output.\n\n### Input:\n\"{\\\"menu\\\":{\\\"id\\\":\\\"file\\\",\\\"value\\\":\\\"File\\\",\\\"popup\\\":{\\\"menuitem\\\":[{\\\"value\\\":\\\"New\\\", \\\"onclick\\\":\\\"CreateNewDoc()\\\"},{\\\"value\\\":\\\"Open\\\", \\\"onclick\\\":\\\"OpenDoc()\\\"},{\\\"value\\\":\\\"Close\\\", \\\"onclick\\\":\\\"CloseDoc()\\\"}]}}}\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n{\n  \"menu\": {\n    \"id\": \"file\",\n    \"value\": \"File\",\n    \"popup\": {\n      \"menuitem\": [\n        {\n          \"value\": \"New\",\n          \"onclick\": \"CreateNewDoc()\"\n        },\n        {\n          \"value\": \"Open\",\n          \"onclick\": \"OpenDoc()\"\n        },\n        {\n          \"value\": \"Close\",\n          \"onclick\": \"CloseDoc()\"\n        }\n      ]\n    }\n  }\n}\n```"}]}
{"dataset": "code_medium", "id": "code_medium_527", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAlter the following python code such that it prints \"Hello, world!\"\n\n### Input:\nfor x in range(1,10):\n    print(x)\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor x in range(1,10):\n    if x == 5:\n        print('Hello, world!')\n    else:\n        print(x)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_528", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you convert a given number in hexadecimal format to binary?\n\n### Input:\nnumber = 3E\n\n### Response:"}, {"role": "assistant", "content": "```python\nhex_to_binary = bin(int(number, 16)).replace(\"0b\", \"\")\nprint(hex_to_binary)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_529", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the algorithm to reverse a singly linked list.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Node class  \nclass Node:\n    def __init__(self, data):\n        self.data = data   \n        self.next = None \n  \n# LinkedList class \nclass LinkedList:  \n    # Function to initialize head \n    def __init__(self):\n        self.head = None\n  \n    def reverse(self): \n        prev = None\n        current = self.head \n        while(current is not None): \n            next = current.next\n            current.next = prev \n            prev = current \n            current = next\n        self.head = prev\n```"}]}
{"dataset": "code_medium", "id": "code_medium_530", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate a random integer in the range of 1 to 10.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\ndef random_int_1_10():\n    return random.randint(1, 10)\nif __name__ == '__main__':\n    print(random_int_1_10())\n```"}]}
{"dataset": "code_medium", "id": "code_medium_531", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to find the sum of the multiples of 3 and 5 up to a given number.\n\n### Input:\nNumber: 15\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_of_multiples(num): \n    sum = 0 \n    for i in range(num):\n            if i % 3 == 0: \n                sum += i\n            elif i % 5 == 0: \n                sum += i\n    return sum\n# Driver code \nsum = sum_of_multiples(15)\nprint(\"Sum of multiples of 3 and 5 =\",sum)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_532", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an if-else statement to compare two variables.\n\n### Input:\nvariable1: 5\n  variable2: 10\n\n### Response:"}, {"role": "assistant", "content": "```python\nvariable1 = 5\nvariable2 = 10\nif variable1 > variable2:\n  print(\"variable1 is greater than variable2\")\nelif variable1 < variable2:\n  print(\"variable1 is less than variable2\")\nelse:\n  print(\"variable1 is equal to variable2\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_533", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a search algorithm to find an element in an array.\n\n### Input:\nArray: [2, 4, 6, 8, 10]\nElement to find: 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search(arr, elem):\n    for i in range(len(arr)):\n        if arr[i] == elem:\n            return i\n    return -1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_534", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that takes a list of numbers and prints out the sum of those numbers.\n\n### Input:\nlist_of_numbers = [4, 8, 15, 16, 23, 42]\n\n### Response:"}, {"role": "assistant", "content": "```python\ntotal = 108\n# Program\nlist_of_numbers = [4, 8, 15, 16, 23, 42]\ntotal = sum(list_of_numbers)\nprint(total)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_535", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script in Python that can classify a sentence as positive or negative.\n\n### Input:\nThe movie was terrible and boring.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\nsentence = \"The movie was terrible and boring.\"\nanalysis = SentimentIntensityAnalyzer()\nscore = analysis.polarity_scores(sentence)\nif score[\"compound\"] >= 0.5:\n    output = \"positive\"\nelse:\n    output = \"negative\"\nprint(\"The sentiment of the sentence is:\", output)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_536", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to remove duplicates in a given list.\n\n### Input:\nlist_of_numbers = [2, 3, 3, 5, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_duplicates(list_of_numbers):\n  result = []\n  for number in list_of_numbers:\n    if number not in result:\n      result.append(number)\n  return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_537", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nTranslate the following word problem into Python code.\n\n### Input:\nGary has 45 dollars, John has 11 dollars and Sam has 3 dollars. They decide to split their money equally.\n\n### Response:"}, {"role": "assistant", "content": "```python\ngary_share = 45 // 3\njohn_share = 11 // 3\nsam_share = 3 // 3\ntotal_share = gary_share + john_share + sam_share\nprint('Gary has {} dollars, John has {} dollars and Sam has {} dollars. The each get {} dollars in total.'.format(gary_share, john_share, sam_share, total_share))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_538", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing pandas, create a dataframe with two columns and five rows.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport pandas as pd\ndf = pd.DataFrame(\n    [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]], \n    columns=['a', 'b']\n    )\n```"}]}
{"dataset": "code_medium", "id": "code_medium_539", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a new list which contains all even numbers from the given list.\n\n### Input:\nlist_of_numbers = [1, 2, 3, 4, 5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_even_numbers(numbers):\n    even_numbers = []\n    for n in numbers:\n        if n % 2 == 0:\n            even_numbers.append(n)\n    return even_numbers\neven_numbers = get_even_numbers(list_of_numbers)\nprint(even_numbers) # prints [2, 4, 6]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_540", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput code for a function that prints the multiplication table of a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef multiplication_table(num):\n    for i in range(1, 11):\n        print(num, 'x', i, '=', num*i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_541", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to find the maximum in a given list of integers.\n\n### Input:\nmylist = [1,2,3,4,5]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nWrite a code to find the maximum in a given list of integers\n\"\"\"\n# List containing the elements\nmylist = [1,2,3,4,5]\n# Finding the maximum element\nmax = mylist[0]\n# Looping through each element to find if it is the maximum\nfor i in range(1,len(mylist)):\n    # Comparing the element with the maximum\n    if mylist[i] > max:\n        max = mylist[i]\n# Printing the maximum element\nprint(\"Maximum element of the list is\", max)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_542", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python method to determine if a string contains all unique characters.\n\n### Input:\nstring variable: str =\u201cIm so excited to learn GPT\u201d\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef isUnique(str): \n\tstr_set = set() \n\tfor ch in str: \n\t\tif ch in str_set: \n\t\t\treturn False\n\t\telse:\n\t\t\tstr_set.add(ch)\n\t\t\t\n\treturn True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_543", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUse Tensorflow to classify a given input dataset of animals as cats or dogs.\n\n### Input:\nInput dataset contains images of cats and dogs.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport tensorflow as tf \n#get the dataset\ndataset = load_dataset()\n# create the input pipeline\niterator = dataset.make_initializable_iterator()\nnext_element = iterator.get_next()\n#build the model\nmodel=Sequential()\n#input layer\nmodel.add(Conv2D(32,(3,3), activation='relu',input_shape=(input_width,input_height,input_channels)))\n#max pooling\nmodel.add(MaxPooling2D(pool_size=(2,2)))\n#flatten\nmodel.add(Flatten)\n#hidden layer\nmodel.add(Dense(64,activation='relu'))\n#output layer\nmodel.add(Dense(2,activation='sigmoid'))\n#train model\nmodel.compile(optimizer='SGD', Loss=\"binary_crossentropy\",metrics=['accuracy'])\nmodel.fit(dataset,epochs=5)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_544", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a while loop in Python to increment a counter by 1 until it reaches 10.\n\n### Input:\ncounter = 0\n\n### Response:"}, {"role": "assistant", "content": "```python\nwhile counter < 10:\n    counter += 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_545", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to create a Pyramid of stars with the given height.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_pyramid(height):\n    for row in range(1, height + 1):\n        for col in range(1, row + 1):\n            print('*', end=\" \")\n        print('\\n')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_546", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a block of code which sorts the given list in increasing order.\n\n### Input:\nList = [10, 4, 5, 7, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Create a new list to store the sorted elements\nsortedList = []\n# Loop through the given list and add the sorted elements to the new list\nwhile List:\n    minimum = List[0]\n    for x in List: \n        if x < minimum:\n            minimum = x\n    sortedList.append(minimum)\n    List.remove(minimum)\n# Print the sorted list\nprint(sortedList) # Output: [2, 4, 5, 7, 10]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_547", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API call in Python to search for a movie by title.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\ndef search_movie_by_title(title):\n    url = 'https://api.themoviedb.org/3/search/movie?api_key=<api_key>&query=' + title\n    response = requests.get(url).json()\n    return response\n```"}]}
{"dataset": "code_medium", "id": "code_medium_548", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse regular expression to match two strings.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re \n  \ndef match_strings(string1, string2): \n   \n    if re.search(string1, string2): \n        print(\"Match Found\") \n    else: \n        print('No Match Found')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_549", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to parse a given string and construct a dictionary which contains each word and the corresponding frequency.\n\n### Input:\nmy_string = 'Hello World'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef word_count(my_string): \n    words = my_string.split()  \n    frequency = {} \n    for word in words: \n        if word in frequency: \n            frequency[word] += 1\n        else: \n            frequency[word] = 1\n    return frequency\nfrequency_dict = word_count(my_string)\nprint(\"Frequency dictionary: \", frequency_dict)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_550", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you reverse the order of the elements in a given singly linked list in-place?\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_inplace(head): \n    if head is None or head.next is None: \n        return head  \n        \n    prev_node = None\n    next_node = None\n    curr_node = head  \n    \n    while curr_node is not None: \n        next_node = curr_node.next\n        curr_node.next = prev_node\n        prev_node = curr_node\n        curr_node = next_node\n        \n    return prev_node\n```"}]}
{"dataset": "code_medium", "id": "code_medium_551", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to calculate the least common multiple of two numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef lcm(a, b): \n    lcm = (a*b)//gcd(a,b) \n    return lcm\ndef gcd(a,b): \n    if a == 0 : \n        return b \n          \n    return gcd(b%a, a)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_552", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that transposes a 2D array from column-major format to row-major format.\n\n### Input:\nThe array is [[1,2,3],[4,5,6],[7,8,9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef transpose(matrix):\n    row_major = []\n    row, col = len(matrix), len(matrix[0])\n    for i in range(col):\n        row_major.append([])\n        for j in range(row):\n            row_major[i].append(matrix[j][i])\n    return row_major\n```"}]}
{"dataset": "code_medium", "id": "code_medium_553", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate code that will reverse the order of elements in this list.\n\n### Input:\nlist = [1, 2, 3, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_list(list): \n    start = 0\n    end = len(list) - 1\n    while start < end: \n        list[start], list[end] = list[end], list[start] \n        start += 1\n        end -= 1\n    return list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_554", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSum the numbers in the given array using reduce.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Sum the numbers in the given array using reduce\nfrom functools import reduce\nsum = reduce(lambda x, y: x + y, numbers)\nprint(sum) # Output: 15\n```"}]}
{"dataset": "code_medium", "id": "code_medium_555", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRetrieve all the values from the nested dictionary.\n\n### Input:\ndata_dict = {\n'key1': {\n  'inner_key1': \"1\",\n  'inner_key2': \"2\"\n},\n'key2': {\n  'inner_key1': \"3\",\n  'inner_key2': \"4\"\n}\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor key1_value in data_dict.values():\n  for (inner_key1, inner_key2) in key1_value.items():\n    print(inner_key1, inner_key2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_556", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRetrieve the elements at indexes 2 and 5 in the list.\n\n### Input:\nlist_nums = [1, 4, 7, 2, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\nelements = [list_nums[2], list_nums[5]] # elements = [7, 9]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_557", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code to generate a list of the vowels in a given string.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_vowels(str):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    res = []\n    for letter in str:\n        if letter.lower() in vowels:\n            res.append(letter)\n    return res\n```"}]}
{"dataset": "code_medium", "id": "code_medium_558", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd a method to the following class which prints the student's name in upper case.\n\n### Input:\nclass Student:\n  def __init__(self, name):\n    self.name = name\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Student:\n  def __init__(self, name):\n    self.name = name\n  \n  def print_name_upper(self):\n    print(self.name.upper())\n```"}]}
{"dataset": "code_medium", "id": "code_medium_559", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a Python program to delete elements from a given list at particular indices.\n\n### Input:\nlist_of_numbers = [0, 1, 2, 3, 4, 5]\nindices = [2, 3, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_elements_at_indices(numbers, indices):\n    for index in sorted(indices, reverse=True):\n        del numbers[index]\n    return numbers\nmodified_list = remove_elements_at_indices(list_of_numbers, indices)\nprint(modified_list) # prints [0, 1, 4]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_560", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes a string, checks if it is a palindrome, and returns a corresponding boolean value.\n\n### Input:\nstring = \"racecar\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_palindrome(string):\n    # Reverse string \n    reversed_string = string[::-1]\n    # Compare strings\n    if string == reversed_string:\n        return True\n    else:\n        return False\n# Example\nstring = \"racecar\"\nprint(is_palindrome(string))\n# Output: True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_561", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for loop that prints the contents of a list of strings.\n\n### Input:\nlist_of_strings = [\"John\", \"Bob\", \"Jill\", \"Sara\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist_of_strings = [\"John\", \"Bob\", \"Jill\", \"Sara\"]\nfor name in list_of_strings:\n    print(name)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_562", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure to model the evolution of a population.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nModel the evolution of a population\n\"\"\"\nclass Population:\n    def __init__(self):\n        self.population = []\n        self.generation = 0\n    def add_member(self, member):\n        self.population.append(member)\n    def next_generation(self):\n        self.generation += 1\n        self.population = self.population.create_next_generation()\nclass Member:\n    def __init__(self, data):\n        self.data = data\n    def create_next_generation(self):\n        next_gen_data = []\n        # perform population evolution algorithm\n        # ...\n        return [Member(g) for g in next_gen_data]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_563", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes in a list of numbers and creates a new list with only the even numbers from the list.\n\n### Input:\nnumbers = [2, 3, 4, 5, 6, 7, 8, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef findEvenNumbers(numbers): \n\teven_list = []\n\tfor number in numbers: \n\t\tif number % 2 == 0: \n\t\t\teven_list.append(number)\n\treturn even_list \nnumbers = [2, 3, 4, 5, 6, 7, 8, 9]\nprint(findEvenNumbers(numbers))\n# Output\n# [2, 4, 6, 8]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_564", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompile the following C++ code:\n\n#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello World!\";\n  return 0;\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\ng++ -o [filename] [filename].cpp\n```"}]}
{"dataset": "code_medium", "id": "code_medium_565", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for loop to iterate through the given array from the last index to the first.\n\n### Input:\narray = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(len(array)-1, -1, -1): \n    print(array[i])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_566", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to compute the factorial of an integer.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n-1)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_567", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to generate a random password with length 8 containing any combination of upper and lowercase letters, numbers, and symbols.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport string \nimport random \ndef generate_password(): \n\tletter_lower = string.ascii_lowercase\n\tletter_upper = string.ascii_uppercase\n\tsymbols = string.punctuation\n\tdigits = string.digits\n\tpassword = ''.join(random.choice(letter_lower + letter_upper + symbols + digits) for i in range(8))\n\treturn password\npassword = generate_password()\nprint(password)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_568", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPlay a C-major chord using the scikit-learn MIDI library.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# play a C-major chord using the scikit-learn MIDI library\nfrom sklearn.datasets import load_sample_file\nfrom sklearn.feature_extraction.io import MidiDispatcher\n# use MidiDispatcher to create a new sequence\ndispatcher = MidiDispatcher()\nnotes = [60, 64, 67]  # C-major notes\nvelocities = [127, 127, 127]  # maximum amplitude\ndispatcher.add_chords([(0, notes, velocities)])\n# play the sequence\nplayer = MidiPlayer(dispatcher.io)\nplayer.play()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_569", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following code to output Odd numbers from 1 to 10\n\n### Input:\nfor num in range(1, 10):\n    print( num )\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor num in range(1, 10):\n    if num % 2 == 1:\n        print( num )\n```"}]}
{"dataset": "code_medium", "id": "code_medium_570", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nInsert an if-else statement that prints \"Yes, it's even\" when a given number is even.\n\n### Input:\nnumber = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\nif (number % 2 == 0):\n    print(\"Yes, it's even\")\nelse:\n    print(\"No, it's odd\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_571", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that increments a given number by 1\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef increment_by_one(n):\n    return n + 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_572", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite the code to create a one-dimensional array and initialize it with random numbers of length 4.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\ndef create_random_array():\n    lst = []\n    for i in range(4):\n        lst.append(random.randint(1,10))\n    return lst\n```"}]}
{"dataset": "code_medium", "id": "code_medium_573", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given two strings, A and B. Write a function to delete the characters in A that also appear in B.\n\n### Input:\nA = 'abcbbdef'\nB = 'abcdc'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef delete(A, B):\n    for i in B:\n        if i in A:\n            A = A.replace(i, '')\n    return A\ndelete(A, B) # Output: 'bdef'\n```"}]}
{"dataset": "code_medium", "id": "code_medium_574", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an anonymous function that takes two numbers, x and y and returns their product.\n\n### Response:"}, {"role": "assistant", "content": "```python\nproduct = lambda x, y: x * y\n```"}]}
{"dataset": "code_medium", "id": "code_medium_575", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput the below tree structure in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nprint('  *  ')\nprint(' *** ')\nprint('*****')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_576", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the provided text, remove all punctuation and store the resulting output in a new variable.\n\n### Input:\ntext = \"This is a text string with punctuation!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\nnew_text = re.sub('[^\\w\\s]','', text)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_577", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random list containing 10 elements in the range of 0-20\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random \ndef generate_list(): \n    random_list = []\n    for i in range(10): \n        random_list.append(random.randint(0, 20)) \n  \n    return random_list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_578", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Dictionary where the list items are the keys and the square of the items are the values\n\n### Input:\nmyList1 = [1, 2, 3, 4, 5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef myDict(myList1):\n    result = {}\n    for i in myList1:\n        result[i] = i**2\n    return result\nmyDict = myDict(myList1)\nprint(myDict)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_579", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a REST API in Python that would return a list of customer information.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Create a customer information API\n@app.route(\"/customers\", methods=[\"GET\"])\ndef customers():\n    # Get a list of customer data\n    customer_list = get_customers()\n    # Create a list of customer dictionaries\n    customer_info = [{'name': customer.name,\n                    'age': customer.age,\n                    'address': customer.address} \n                    for customer in customer_list]\n    # Return a json object with list of customer data\n    return jsonify(customer_info)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_580", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a dictionary, write a function to count the number of items in the dictionary.\n\n### Input:\ndictionary = {'name': 'John', 'age': 30}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_items(dict):\n    item_count = 0\n    for key in dict:\n        item_count += 1\n    return item_count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_581", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes a list and removes duplicates of the same element.\n\n### Input:\nmyList4 = [1,2,2,3,3,3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef removeDuplicate(myList4):\n    result = []\n    for x in myList4:\n        if x not in result:\n            result.append(x)\n    return result\nremoveDuplicate = removeDuplicate(myList4)\nprint(removeDuplicate)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_582", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code that takes in two numeric variables x and y, and if x is divisible by y, it should print \"x is divisible by y\"Otherwise it should print \"x is not divisible by y\".\n\n### Input:\nx = 9, y = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_divisible(x, y):\n    if x % y == 0:\n        print(\"x is divisible by y\")\n    else:\n        print(\"x is not divisible by y\")\n# testing\nx = 9\ny = 3\nprint(is_divisible(x ,y)) # Output: x is divisible by y\n```"}]}
{"dataset": "code_medium", "id": "code_medium_583", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to edit a Python code snippet to add a loop and make it print the square of the numbers from 1 to 10.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(1, 11):\n    square = i * i\n    print(square)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_584", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that will take a number from the user and print out whether the number is odd or even.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Take a number from user \nnum = int(input(\"Enter a number: \")) \n# Check whether the number is odd or even \nif num % 2 == 0: \n    print(\"Number is even.\")\nelse:\n    print(\"Number is odd.\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_585", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to find the power of n to m.\n\n### Input:\nn = 3, m = 7\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef pow_n_m(n, m):\n    result = 1\n    for i in range(1, m+1):\n        result *= n\n    return result\n  \n# example  \nn = 3 \nm = 7\nprint(pow_n_m(n, m))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_586", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes in a list and a target value, and returns a new list with the target value removed.\n\n### Input:\nmy_list = [1,2,3,4,5,6]\ntarget = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_target(my_list, target):\n    return [x for x in my_list if x != target]\nmy_list = remove_target(my_list, target)\nprint(my_list)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_587", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that can filter out words of a string that contain a specific character.\n\n### Input:\nstring = \"This is a sentence\"\ncharacter = 's'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef filter_string(string, character):\n    \"\"\"Filter out words of a string that contain a specific character.\"\"\"\n    words = string.split(' ')\n    filtered_words = []\n    for word in words:\n        if character not in word:\n            filtered_words.append(word)\n    return ' '.join(filtered_words)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_588", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to return the longest word in a sentence\n\n### Input:\n\"The dog likes to run around the yard\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_word(sentence):\n    words = sentence.split()\n    longest = 0\n    for word in words:\n        if len(word) > longest:\n            longest = len(word)\n            longest_word = word\n    return longest_word\nprint(longest_word(\"The dog likes to run around the yard\"))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_589", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a validation function in Python 3 that checks if the value is an integer\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef validate_integer(val):\n    if isinstance(val, int):\n        return True\n    else: \n        return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_590", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random string of length 10 made up of characters \u2018a\u2019 to \u2018d\u2019.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\nrand_string = ''\nfor i in range(10):\n    rand_string += random.choice(['a', 'b', 'c', 'd'])\n    \nprint(rand_string)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_591", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to detect if a given text contains any URL.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\ndef has_url(text):\n  pattern = r\"(http|ftp|https):\\/\\/[\\w\\-_]+(\\.[\\w\\-_]+)+([\\w\\-\\.,@?^=%&amp;:/~\\+#]*[\\w\\-\\@?^=%&amp;/~\\+#])?\"\n  matches = re.findall(pattern, text) \n  if matches:\n    return True\n  return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_592", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the following code to return the key of the highest value in the dictionary.\n\n### Input:\nsample_dict = {\"a\":1, \"b\":2, \"c\": 3}\n\n### Response:"}, {"role": "assistant", "content": "```python\nsample_dict = {\"a\":1, \"b\":2, \"c\": 3}\ndef get_key_highest_value(dict):\n    highest_value = max(dict.values())\n    for key, value in dict.items():\n        if value == highest_value:\n            return key\n```"}]}
{"dataset": "code_medium", "id": "code_medium_593", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSoftmax a list of numbers and then sum the output.\n\n### Input:\n[1, 2, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef softmax(arr): \n    a = np.exp(arr)\n    return a / np.sum(a) \ndef sum_softmax(arr): \n    return np.sum(softmax(arr))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_594", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the number of different ways to climb n stairs\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_ways(n): \n    if n==1 or n==0: \n        return 1\n    elif n==2: \n        return 2\n    else: \n        return count_ways(n-1) + count_ways(n-2) + count_ways(n-3)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_595", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that reverses a given string without using the built-in parity.\n\n### Input:\nstr = 'I am here for the coding challenge\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_string_without_parity(str):\n  # Create empty string \n  reversed_str = \"\" \n  # Iterate through the input string in the reverse order\n  for i in range(len(str)-1,-1,-1): \n    reversed_str += str[i] \n  return reversed_str\n```"}]}
{"dataset": "code_medium", "id": "code_medium_596", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, write code to sort a list of integers in ascending order.\n\n### Input:\n[9, 15, 5, 11, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_list(list_of_numbers):\n   list_of_numbers.sort()\n   return list_of_numbers\nprint(sort_list([9, 15, 5, 11, 4])) # Output: [4, 5, 9, 11, 15]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_597", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random number from 1 to 1000.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\nrandom_number = random.randint(1, 1000)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_598", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for loop which prints the first 5 numbers in a given list.\n\n### Input:\nlist_numbers = [1, 2, 3, 4, 5, 6, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(0, 5):\n    print(list_numbers[i])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_599", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to get the current time in New York City in 24-hour format.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport pytz\nfrom datetime import datetime\ndef get_time():\n    new_york = pytz.timezone('America/New_York')\n    curr_time = datetime.now(new_york).strftime('%H:%M')\n    return curr_time\nif __name__ == '__main__':\n    print(get_time()) #this will print the current time in 24-hour format in New York City\n```"}]}
{"dataset": "code_medium", "id": "code_medium_600", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nedit the existing function to calculate the compound interest.\n\n### Input:\n# Calculate Simple Interest \ndef calcSimpleInterest(p, r, t): \n    return (p * r * t) / 100\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nEdit the existing function to calculate the compound interest\n\"\"\"\n# Calculate Compound Interest \ndef calcCompoundInterest(p, r, t): \n    # Calculate Simple Interest \n    interest= p * (pow((1 + r / 100), t)) \n    return interest\nif __name__ == '__main__': \n    principal_amount = 1000\n    rate_of_interest = 5\n    time_period = 5\n    print(\"Compound interest is\", calcCompoundInterest(principal_amount, rate_of_interest, time_period))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_601", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the 'requests' library to retrieve the HTML content of a website.\n\n### Input:\nurl = \"https://www.example.com\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\nhtml = requests.get(url).text\n```"}]}
{"dataset": "code_medium", "id": "code_medium_602", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python named 'Circle' with a parameterized constructor to take the radius of the circle as input.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Circle():\n    def __init__(self, radius):\n        self.radius = radius\n```"}]}
{"dataset": "code_medium", "id": "code_medium_603", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a neural network in Keras to solve the given classification problem.\n\n### Input:\n[Problem description]\n\nGiven a dataset of images containing cats and dogs, create a neural network in Keras to classify the images into one of the two categories.\n\n### Response:"}, {"role": "assistant", "content": "```python\nmodel = Sequential() \nmodel.add(Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3))) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(64, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(128, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Conv2D(128, (3, 3), activation='relu')) \nmodel.add(MaxPooling2D((2, 2))) \nmodel.add(Flatten()) \nmodel.add(Dense(512, activation='relu')) \nmodel.add(Dense(1, activation='sigmoid')) \nmodel.compile(loss='binary_crossentropy', optimizer=RMSprop(lr=1e-4), metrics=['acc'])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_604", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a single 'for' loop, iterate through an array and print out the indices and values of each element to the console.\n\n### Input:\n[2, 5, 8, 9, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(len(arr)):\n    print(\"Index: \" + str(i) + \", Value: \" + str(arr[i]))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_605", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a neural network for binary classification using TensorFlow.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nBuild a neural network for binary classification using TensorFlow\n\"\"\"\nimport tensorflow as tf\n# Define the model\nmodel = tf.keras.Sequential()\nmodel.add(tf.keras.layers.Dense(units=8, activation='relu', input_shape=(2,))) \nmodel.add(tf.keras.layers.Dense(units=4, activation='relu'))\nmodel.add(tf.keras.layers.Dense(units=1, activation='sigmoid'))\n# Compile the model\nmodel.compile(optimizer='adam',\n              loss='binary_crossentropy',\n              metrics=['accuracy'])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_606", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a number, create a function that returns a list that contains its divisors.\n\n### Input:\nnum = 20\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_divisors(num):\n    \"\"\"This function returns a list that contains the divisors of a given number\"\"\"\n    return [x for x in range(1, num + 1) if num % x == 0]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_607", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, create a function that returns a list of only the unique strings.\n\n### Input:\n[\"this\", \"is\", \"a\", \"list\", \"of\", \"strings\", \"this\", \"list\", \"has\", \"some\",  \"duplicates\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef unique_strings(string_list): \n  return list(set(string_list))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_608", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to return the largest element from a list.\n\n### Input:\n[3, 9, 6, 2, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef largest_element(lst):\n    largest = lst[0]\n    for num in lst:\n        if num > largest:\n            largest = num\n    return largest\n```"}]}
{"dataset": "code_medium", "id": "code_medium_609", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUse TensorFlow to create a convolutional neural network to classify handwritten digits.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport tensorflow as tf \n# Create a model\nmodel = tf.keras.models.Sequential([\n    # Add a convolutional layer with a 3x3 window\n    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(28, 28, 1)),\n    # Add a Max Pooling layer\n    tf.keras.layers.MaxPooling2D((2, 2)),\n    # Add a Flatten layer\n    tf.keras.layers.Flatten(),\n    # Add a Dense layer with 10 neurons and a softmax activation function \n    tf.keras.layers.Dense(10, activation='softmax')\n])\n# Compile the model\nmodel.compile(optimizer='adam',\n   loss='sparse_categorical_crossentropy',\n   metrics=['accuracy'])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_610", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nExtract the last four characters from a text string.\n\n### Input:\ntext = \"This is a sample text\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ntext[-4:]  # Output: \"text\"\n```"}]}
{"dataset": "code_medium", "id": "code_medium_611", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a number, x, and returns True if the number is even or False if the number is odd.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_even(x):\n   return x%2 == 0\n```"}]}
{"dataset": "code_medium", "id": "code_medium_612", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to search a nested list and print all the elements containing the number 3.\n\n### Input:\nnested_list = [[1, 2, 3], [4, 5, 6], [7, 8, [3, 4, 5]]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search_nested_list(nested_list):\n    for element in nested_list:\n        if isinstance(element, list):\n            search_nested_list(element)\n        elif element == 3:\n            print(element)\nsearch_nested_list(nested_list)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_613", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to modify a given string by changing the case of each character.\n\n### Input:\nstring = \"Hello World\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef modify_string(string):\n  new_string = \"\"\n  for i in string:\n    if (i.isupper()) == True:\n      new_string += i.lower()\n    elif (i.islower()) == True:\n      new_string += i.upper()\n  return new_string\n```"}]}
{"dataset": "code_medium", "id": "code_medium_614", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a function to merge two sorted arrays into a single sorted array.\n\n### Input:\narr1 = [1, 3, 5, 7]\narr2 = [2, 4, 8, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_arrays(arr1, arr2):\n    arr3 = arr1 + arr2 # Combine the arrays\n    arr3.sort() # Sort the combined array\n    return arr3 # Return the newly sorted array\n```"}]}
{"dataset": "code_medium", "id": "code_medium_615", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the function to return the least common multiple instead.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef lcm(a, b): \n    return (a*b) // gcd(a, b)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_616", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to find the area of a triangle using the formula `A = 0.5 * base * height`.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef findArea(base, height):\n    return 0.5 * base * height;\n```"}]}
{"dataset": "code_medium", "id": "code_medium_617", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow to make an http request in Python\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\nr = requests.get('http://www.example.com/')\nprint(r.text)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_618", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the code to encounter the issue mentioned in the comment.\n\n### Input:\ndef validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        return False\n    else:\n        return True\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef validate_password(password):\n    if len(password) < 8:\n        # bug: print message\n        print('Password must be at least 8 characters.')\n        return False\n    else:\n        return True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_619", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following python code to an equivalent code using lambda and sorted function.\n\n### Input:\ndef sort_by_length(words):\n    return sorted(words, key=lambda x: len(x))\n\n### Response:"}, {"role": "assistant", "content": "```python\nsort_by_length = lambda words: sorted(words, key=len)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_620", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the position of the substring \"is\" in the string.\n\n### Input:\nstring = \"This is an example\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nstring = \"This is an example\"\nprint(string.find(\"is\"))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_621", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a list comprehension to generate a list of all prime numbers less than 100.\n\n### Input:\n[noinput]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# An efficient list comprehension to generate a list of prime numbers\n# less than 100\nprime_numbers = [num for num in range(2, 100) \n                 if all(num % i != 0 for i in range(2, int(pow(num, 0.5) + 1)))]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_622", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function to multiply two integers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef multiply_ints(x, y): \n    return x * y\n```"}]}
{"dataset": "code_medium", "id": "code_medium_623", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a code in Python to update all the elements of an array by a number\n\n### Input:\na = [1, 4, 5, 7, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef update(a):\n    n = 2\n    a[:] = [x + n for x in a]\n    return a\n```"}]}
{"dataset": "code_medium", "id": "code_medium_624", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function to sort a 2-dimensional list in Python by the values of the second element in each sublist.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_by_second_element(lst): \n    lst.sort(key = lambda x: x[1]) \n    return lst\n```"}]}
{"dataset": "code_medium", "id": "code_medium_625", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to retrieve the last element of a given array of strings.\n\n### Input:\narr = [\"word\", \"sentence\", \"paragraph\"];\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_last_element(arr):\n  return arr[-1]\n# Testing\narr = [\"word\", \"sentence\", \"paragraph\"]\nlast_element = get_last_element(arr)\nprint(\"The last element is: \", last_element)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_626", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to split a list of items into groups of n.\n\n### Input:\nlist = [\"red\", \"green\", \"orange\", \"blue\", \"pink\", \"purple\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef split_list(data, n):\n    output = [data[i:i+n] for i in range(0, len(data), n)]\n    return output\n```"}]}
{"dataset": "code_medium", "id": "code_medium_627", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to find the longest substring of a given string with distinct characters.\n\n### Input:\nGiven string = \"abcabcabc\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_longest_substring(string):\n    max_length = 0\n    for i in range(len(string)):\n        seen_chars = set()\n        length = 0\n        for j in range(i, len(string)):\n            if string[j] not in seen_chars:\n                seen_chars.add(string[j])\n                length += 1\n            else:\n                break\n        max_length = max(max_length, length)\n    return max_length\n```"}]}
{"dataset": "code_medium", "id": "code_medium_628", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nIterate through a list and print only the elements that include the character 'a'.\n\n### Input:\nlist_items = [\"apple\", \"banana\", \"carrot\", \"durian\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor item in list_items:\n    if 'a' in item:\n        print(item)\n# Output\napple\nbanana\ncarrot\n```"}]}
{"dataset": "code_medium", "id": "code_medium_629", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a function to read a single line of user input in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef read_input():\n    \"\"\"Reads a single line of user input.\"\"\"\n    return input()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_630", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to filter a given list of strings by the specified character?\n\n### Input:\nmy_list = ['Hello', 'World', 'Hi', 'Python']\ncharacter = 'o'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef filter_list_by_character(my_list, character):\n  return [item for item in my_list if character in item]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_631", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFix the bug in the following code that causes the output to be incorrect.\n\n### Input:\ndef calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\n\nprint(f'Sum of {numbers} is {result}')\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_sum(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total\nnumbers = [2, 3, 5]\nresult = calculate_sum(numbers)\nprint(f'Sum of {numbers} is {result}.')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_632", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nBased on the following list, create a dictionary of each name and their corresponding birth date.\n\n### Input:\nnames = [\"John\", \"Mary\", \"James\", \"Susan\"]\nbirth_dates = [\"1992-12-24\", \"1979-05-17\", \"1995-08-15\", \"1985-04-10\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\nname_birthdate_dict = dict(zip(names, birth_dates))\nprint(name_birthdate_dict)\n# Output: {'John': '1992-12-24', 'Mary': '1979-05-17', 'James': '1995-08-15', 'Susan': '1985-04-10'}\n```"}]}
{"dataset": "code_medium", "id": "code_medium_633", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform string manipulation to generate the word 'happy' by starting with the word 'sad'\n\n### Response:"}, {"role": "assistant", "content": "```python\nword = 'sad'\nword = word[0] + word[2:] + 'py'\n```"}]}
{"dataset": "code_medium", "id": "code_medium_634", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a variable name for the following equation: 1 + 2 - 3 x 4\n\n### Response:"}, {"role": "assistant", "content": "```python\nresult = 1 + 2 - 3 * 4\n```"}]}
{"dataset": "code_medium", "id": "code_medium_635", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a boolean check to detect if a given string contains the word \"hello\".\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef contains_hello(input_string):\n    return \"hello\" in input_string\n```"}]}
{"dataset": "code_medium", "id": "code_medium_636", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Tensorflow, set up a model to predict the classification of a handwritten digit.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport tensorflow as tf\n#load the MNIST data\nmnist = tf.keras.datasets.mnist\n#split the data into train and test\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n#normalize the data between 0 and 1\nx_train = tf.keras.utils.normalize(x_train, axis=1)\nx_test = tf.keras.utils.normalize(x_test, axis=1)\n#build the model\nmodel = tf.keras.models.Sequential()\n# add the input layer of the model\nmodel.add(tf.keras.layers.Flatten())\n# add the hidden layers\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\nmodel.add(tf.keras.layers.Dense(128, activation=tf.nn.relu))\n#add the output layer\n#NOTE: We are using output dimension as 10 because we are trying to predict 10 classifications (i.e. 0 to 9)\nmodel.add(tf.keras.layers.Dense(10, activation=tf.nn.softmax))\n#compile the model\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n#train the model\nmodel.fit(x_train, y_train, epochs=3)\n#evaluate the model\nval_loss, val_acc = model.evaluate(x_test, y_test) \nprint(val_loss, val_acc)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_637", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, write a function to sum all the integers in the array.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_array(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n```"}]}
{"dataset": "code_medium", "id": "code_medium_638", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python code for a basic for loop.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nA Python code for a basic for loop\n\"\"\"\nfor i in range(10):\n    print(i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_639", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a REST API, write a code to retrieve the current temperature in New York City.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\n# Get JSON response\nresponse = requests.get(\"http://api.openweathermap.org/data/2.5/weather?q=New+York,us&appid=YOUR_API_KEY\")\ndata = response.json()\n# Get current temperature in C\ncurr_temprature = data[\"main\"][\"temp\"]\ncurr_temprature = round(curr_temprature - 273.15, 2)\nprint(\"Current Temperature in New York City is:\", curr_temprature, \"C\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_640", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, write a function to format a given date.\n\n### Input:\nDate: \"2021-02-14\"\nFormat: \"dd/mm/yyyy\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef format_date(date, date_format):\n date = date.split('-') \n day = date[2]\n month = date[1]\n year = date[0]\n if date_format == \"dd/mm/yyyy\": \n  formatted_date = day + \"/\" + month + \"/\" + year\n return formatted_date\n```"}]}
{"dataset": "code_medium", "id": "code_medium_641", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nParse an HTML table and extract all the rows.\n\n### Input:\n<table>\n    <tr>\n        <td>Row 1 - Column 1</td> \n        <td>Row 1 - Column 2</td>\n    </tr>\n    <tr>\n        <td>Row 2 - Column 1</td>\n        <td>Row 2 - Column 2</td>\n    </tr>\n</table>\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nParse an HTML table and extract all the rows.\n\"\"\"\nimport re\ndef get_table_rows(html):\n    pattern = re.compile('<tr>(.*?)</tr>', re.DOTALL)\n    rows = re.findall(pattern, html)\n    return rows\nif __name__ == '__main__':\n    html = \"\"\"\n    <table>\n        <tr>\n            <td>Row 1 - Column 1</td> \n            <td>Row 1 - Column 2</td>\n        </tr>\n        <tr>\n            <td>Row 2 - Column 1</td>\n            <td>Row 2 - Column 2</td>\n        </tr>\n    </table>\n    \"\"\"\n    rows = get_table_rows(html)\n    print(rows)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_642", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to implement a basic calculator to add two numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef add_numbers(num1, num2):\n    \"\"\"\n    This function takes two numbers as parameters and returns their sum.\n    \"\"\"\n    return num1 + num2 \nif __name__ == \"__main__\":\n    num1 = float(input(\"Enter first number: \"))\n    num2 = float(input(\"Enter second number: \"))\n    print(add_numbers(num1, num2))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_643", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class for representing a person in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Person:\n    \"\"\"\n    Class to represent a person\n    \"\"\"\n    def __init__(self, name, age, address):\n        self.name = name\n        self.age = age\n        self.address = address\n    \n    def birthday(self):\n        \"\"\"\n        Increments the age of the person\n        \"\"\"\n        self.age += 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_644", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a recursive function to calculate the Fibonacci sequence.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibo(n): \n  \n    if n <= 1: \n        return n \n    else: \n        return(fibo(n-1) + fibo(n-2)) \n  \n# take input from the user \nnterms = 10\n# check if the number of terms is valid \nif nterms <= 0: \n   print(\"Please enter a positive integer\") \nelse: \n   print(\"Fibonacci sequence:\") \n   for i in range(nterms): \n       print(fibo(i))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_645", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a string of numbers from one base to another.\n\n### Input:\nString: \"101111\"\nFrom Base: 2\nTo Base: 10\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Get the numerical value of the string in the from base\nnum = int(str(101111), 2)\n# Convert the numerical value to the to base\nconverted_num = \"{0:b}\".format(num)\nprint(converted_num)\n# Output\n# 47\n```"}]}
{"dataset": "code_medium", "id": "code_medium_646", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to convert the input sentence to Pig Latin.\n\n### Input:\nI am a computer programmer\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a program to convert the input sentence to Pig Latin.\n\"\"\"\ndef pig_latin(sentence):\n    words = sentence.split()\n    new_words = []\n    for word in words:\n        if word[0] in 'aeiou':\n            new_words.append(word + 'ay')\n        else:\n            new_words.append(word[1:] + word[0] + 'ay')\n    return ' '.join(new_words)\nif __name__ == '__main__':\n    print(pig_latin('I am a computer programmer'))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_647", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to convert a given time in GMT form to local time.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom datetime import datetime, timezone\ndef local_time(gmt_time):\n    utc_time = datetime.fromisoformat(gmt_time.replace(\"Z\", \"+00:00\"))\n \n    local_time = utc_time.astimezone()\n \n    return local_time.isoformat()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_648", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes two strings and returns True if one of the strings is the other string reversed.\n\n### Input:\nstring_1 = \"abcde\"\nstring_2 = \"edcba\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef isReverse(string_1, string_2):\n    if len(string_1) != len(string_2):\n        return False\n    for i in range(len(string_1)):\n        if string_1[i] != string_2[len(string_2)-i-1]:\n            return False\n    return True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_649", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProgrammatically generate a random password of length 8 that contains at least one lowercase letter, one uppercase letter, one number, and one special character.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport string\nimport random\ndef generate_password():\n    letters = string.ascii_letters\n    numbers = string.digits\n    symbols = string.punctuation\n    chars = letters + numbers + symbols\n    length = 8\n    password = \"\".join(random.sample(chars, length))\n    if any(char.islower() for char in password) \\\n        and any(char.isupper() for char in password) \\\n            and any(char.isdigit() for char in password) \\\n                and any(char in symbols for char in password):\n        return password\nrandom_password = generate_password()\nprint(random_password)  # Output: eQ@0?St$\n```"}]}
{"dataset": "code_medium", "id": "code_medium_650", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate some sample data to test a supervised learning algorithm.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport numpy as np\nX = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\ny = np.array([1, 0, -1])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_651", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following python program to include a comment explaining the purpose of the code\n\n### Input:\nnumbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num\n\n### Response:"}, {"role": "assistant", "content": "```python\n# This program is used to calculate the sum of a given list of numbers\nnumbers = [1, 2, 3, 4, 5]\nsum = 0\nfor num in numbers:\n    sum += num\n```"}]}
{"dataset": "code_medium", "id": "code_medium_652", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the input data to create a bar chart.\n\n### Input:\nData: [(\"Apple\", 20), (\"Samsung\", 16), (\"Google\", 11), (\"Sony\", 14)]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport matplotlib.pyplot as plt\nitems = [x[0] for x in data]\nvalues = [x[1] for x in data]\nplt.bar(items, values)\nplt.show()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_653", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nInsert the missing code in the function below to sort an array of strings:\n\n### Input:\narr = [\"hello\", \"apple\", \"cat\"]\n\ndef sort_str(arr):\n  # Insert code here\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_str(arr):\n  # Insert code here\n  arr.sort()\n  return arr\n```"}]}
{"dataset": "code_medium", "id": "code_medium_654", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a for loop to output the square roots of the numbers between 0 and 10 using the math library.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport math\nfor i in range(0,11):\n    print(math.sqrt(i))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_655", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing list comprehension, create a new list that contains values less than 5\n\n### Input:\nmy_list = [7, 2, 5, 8, 4, 9, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\nnew_list = [x for x in my_list if x < 5]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_656", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to remove duplicates from the list.\n\n### Input:\nmy_list = [1,2,4,4,1,2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_duplicates(my_list): \n    new_list = [] \n    for item in my_list: \n        if item not in new_list: \n            new_list.append(item) \n    return new_list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_657", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers and a target sum, write a function that returns a pair of said integers that add up to the target sum.\n\n### Input:\nlist = [3, 9, -4, 0, -7, 8] and target sum = -4\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_pair(lst, target_sum):\n    \"\"\"\n    Given a list of integers and a target sum, \n    this function returns a pair of said integers \n    that add up to the target sum.\n    \"\"\"\n    seen = set()\n    for num in lst:\n        inverse = target_sum - num\n        if inverse in seen:\n            return (num, inverse)\n        seen.add(num)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_658", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that returns the number of times an element appears in a sorted array.\n\n### Input:\nArray = [3, 8, 10, 10, 10, 13, 15]\nElement = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_count(arr, element):\n    left_index = bisect.bisect_left(arr, element) \n    right_index = bisect.bisect_right(arr, element)\n    return right_index - left_index\n```"}]}
{"dataset": "code_medium", "id": "code_medium_659", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the value of the following expression: 2 to the power of 5.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_expression(expression):\n    '''This function calculates a given expression.'''\n    return eval(expression)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_660", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to find the longest sub string without repeating characters.\n\n### Input:\nstring = 'abcabcbb'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef length_longest_substring(string):\n    start = 0\n    max_length = 0\n    seen = {}\n    for end in range(len(string)):\n        # Check if the character has been previously seen.\n        if string[end] in seen:\n            # Move the starting point of the substring to the index after the last seen character of this character.\n            start = max(start, seen[string[end]] + 1)\n        # Update the index value of the last seen character.\n        seen[string[end]] = end\n        # Calculate the length of the current substring.\n        max_length = max(max_length, end - start + 1)\n    # Return the maximum length of the substring.\n    return max_length\n```"}]}
{"dataset": "code_medium", "id": "code_medium_661", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nReturn an array which contains all the words of the given string in reverse order.\n\n### Input:\nstring = \"This is a test sentence.\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nReturn an array which contains all the words of the given string in reverse order\n\"\"\"\nstring = \"This is a test sentence.\"\n# Split the string into a list\nwords = string.split(' ')\n# Reverse the list of words\nreversed_words = words[::-1]\n# Construct the output array\noutput_array = [word[::-1] for word in reversed_words]\nprint(output_array)\n\"\"\"\nOutput: ['ecnetnes', 'tset', 'a', 'si', 'sihT']\n\"\"\"\n```"}]}
{"dataset": "code_medium", "id": "code_medium_662", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCheck if the input string contains both number and alphabets and return true if it does.\n\n### Input:\nstr = \"hello123\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nif re.search('[a-zA-Z]', str) and re.search('[0-9]', str): \n    print(True) \nelse: \n    print(False)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_663", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new list with the contents of the given list plus the new element at the beginning.\n\n### Input:\nmy_list = [3, 5, 6, 7]\nnew_element = 1\n\n### Response:"}, {"role": "assistant", "content": "```python\nmy_list = [3, 5, 6, 7]\nnew_element = 1\nnew_list = [new_element] + my_list\nprint(new_list)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_664", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class 'Fruit' to define a fruit.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Fruit:\n    def __init__(self, name, color, weight):\n        self.name = name\n        self.color = color\n        self.weight = weight\n    def print_info(self):\n        print(f'Name: {self.name}')\n        print(f'Color: {self.color}')\n        print(f'Weight: {self.weight}')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_665", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a recursive function for the following task:\n\n### Input:\nGiven a list of integers, \"find the max element present in the list\".\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_max(list):\n    # base condition\n    if len(list) == 1:\n        return list[0] \n    else:\n        # compare the current element to the next element\n        max_element = max(list[0], list[1])\n        # remove the compared element\n        list.pop(1)\n        # call the function on the remaining list\n        return find_max(list[:1] + [max_element] + list[1:])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_666", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the code to print out a string in reverse order.\n\n### Input:\nstring = \"Hello World!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor char in reversed(string):\n    print(char, end=\"\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_667", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python function to include a try/except block.\n\n### Input:\ndef multiply(num1, num2):\n\tresult = num1 * num2\n\treturn result\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef multiply(num1, num2):\n\ttry:\n\t\tresult = num1 * num2\n\t\treturn result\n\texcept TypeError:\n\t\tprint(\"Error: Inputs must be numbers\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_668", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a given array in ascending order based on the second element of each array element pair.\n\n### Input:\narr = [(3, 5), (4, 1), (1, 4), (2, 2)]\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = [(3, 5), (4, 1), (1, 4), (2, 2)]\n# sort the array based on the second element in each pair\narr.sort(key=lambda x: x[1])\n \nprint(\"The array sorted in ascending order based on the second element of each array element pair is:\", arr)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_669", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Flask route to store the inputted data in the database.\n\n### Input:\nurl: '/store_data' \ndata: { first_name: 'John', last_name: 'Doe' }\n\n### Response:"}, {"role": "assistant", "content": "```python\n@app.route('/store_data', methods=['POST'])\ndef store_data():\n data = request.get_json()\n \n first_name = data['first_name']\n last_name = data['last_name']\n \n db.execute(\"INSERT INTO users (first_name, last_name) VALUES (%s, %s)\", (first_name, last_name))\n db.commit()\n \n return jsonify(message=\"Data stored successfully.\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_670", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code so that it is easier to read and understand.\n\n### Input:\ndef is_string_palindrome(str):\n    revstr=str[::-1] \n    if revstr==str: \n            return true \n    else: \n            return false\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_string_palindrome(str):\n    reverse_str = str[::-1] \n    if reverse_str == str:\n        return True\n    else:\n        return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_671", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes a list of numbers and returns True if the sum of the numbers is even and False otherwise.\n\n### Input:\n[2, 4, 6, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_is_even(input_list): \n    return sum(input_list) % 2 == 0\n```"}]}
{"dataset": "code_medium", "id": "code_medium_672", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that filters a list of strings based on their length.\n\n### Input:\nList = [\"Carrot\", \"Apple\", \"Orange\", \"Banana\", \"Pear\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef filter_string_length(strings):\n    \"\"\"\n    This function takes in a list of strings and filters out those\n    that are not longer than 5 characters.\n    \"\"\"\n    return [s for s in strings if len(s) > 5]\nlist_strings = [\"Carrot\", \"Apple\", \"Orange\", \"Banana\", \"Pear\"]\nfiltered_list = filter_string_length(list_strings)\nprint(filtered_list)\n# Output: [\"Carrot\", \"Orange\", \"Banana\"]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_673", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script that adds two numbers together and returns the result.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef add_numbers(a, b):\n return a + b\n```"}]}
{"dataset": "code_medium", "id": "code_medium_674", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that draws a triangle with stars (*) with a given height.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef draw_triangle(n): \n    for i in range(0, n): \n        for j in range(0, i+1): \n            print(\"*\",end=\"\") \n        print(\"\\r\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_675", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes a list of strings and counts the number of each string that contains the letter \"a\".\n\n### Input:\n['foo', 'bar', 'baz']\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_words_with_letter_a(arr):\n    count = 0\n    for s in arr:\n        if 'a' in s:\n            count += 1\n    return count\nif __name__ == '__main__':\n    words = ['foo', 'bar', 'baz']\n    count = count_words_with_letter_a(words)\n    print(count)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_676", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to detect if a string is a palindrome or not.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef isPalindrome(s): \n    reversedString = s[::-1] \n  \n    if (s == reversedString): \n        return True\n    return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_677", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to count the number of times the letter 'e' appears in a given string.\n\n### Input:\nmy_string = \"Hello World\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_letter_e(my_string):\n    count = 0\n    for char in my_string:\n        if char == 'e':\n            count += 1\n    return count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_678", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of prime numbers\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_primes(n):\n    prime_list = []\n    for num in range(2, n + 1): \n        if all(num % i != 0 for i in range(2, num)): # check if num is prime\n            prime_list.append(num)\n    return prime_list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_679", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to parse a string and remove all special characters.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\ndef remove_special_chars(s):\n    return re.sub(r'[^\\w\\s]','', s)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_680", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the centroid of given points using mathematical formulas.\n\n### Input:\npoints = [(2, 3), (4, 7), (6, 9)]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_centroid(points): \n    n = len(points) \n  \n    centroidX = sum(row[0] for row in points) / n\n    centroidY = sum(row[1] for row in points) / n\n     \n    return [centroidX, centroidY] \n  \npoints = [(2, 3), (4, 7), (6, 9)] \nprint(calculate_centroid(points))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_681", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a dictionary with keys being the list elements and values being the list indexes.\n\n### Input:\nmylist = ['a','b','c','d']\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Initialize an empty dictionary\ndict_list = {}\n# Iterate over the list\nfor i, item in enumerate(mylist):\n    # Add the elements of the list as keys with the index as their value\n    dict_list[item] = i\n# Print the dictionary\nprint(dict_list)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_682", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to find the sum of all numbers between 1 and 10.\n\n### Response:"}, {"role": "assistant", "content": "```python\nsum = 0\nfor i in range(1,11):\n    sum += i\nprint(sum)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_683", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to determine how many lowercase letters are in a given string.\n\n### Input:\nstring = \"Hello World!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nPython script to determine how many lowercase letters are in a given string \n\"\"\"\n# Initialize a variable to count the lowercase letters\nlowercase_letter_count = 0\n# Loop through each character in the string\nfor char in string:\n    # Check if the character is a lowercase letter\n    if char.islower():\n        # If yes, then increment the counter\n        lowercase_letter_count += 1\n# Print the total number of lowercase letters\nprint(lowercase_letter_count)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_684", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the inverse of this matrix.\n\n### Input:\n[[1, 0, 0],\n[2, 1, 0],\n[4, 4, 4]]\n\n### Response:"}, {"role": "assistant", "content": "```python\n[[1.0, 0.0, 0.0],\n[-2.0, 1.0, 0.0],\n[-3.5, -2.0, 0.25]]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_685", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare the two values, output the greater one.\n\n### Input:\nval1 = \"dog\"\nval2 = \"cat\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nif val1 > val2:\n  print(val1)\nelse:\n  print(val2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_686", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of strings, write a function that filters out all strings that have length less than two characters.\n\n### Input:\nmy_list = [\"Hello\",\"Hi\",\"How\",\"Are\",\"You\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef filter_length(strings):\n    new_list = []\n    for string in strings:\n        if len(string) >= 2:\n            new_list.append(string)\n    return new_list\nmy_list = [\"Hello\",\"Hi\",\"How\",\"Are\",\"You\"]\nprint(filter_length(my_list))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_687", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nMake the following code work in a multithreading environment.\n\n### Input:\nx = 0\ndef incrementer():\n    #TODO\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport threading\nx = 0\nlock = threading.Lock()\ndef incrementer():\n    global x\n    with lock:\n        x +=  1\n        return x\n```"}]}
{"dataset": "code_medium", "id": "code_medium_688", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an API endpoint for handling user authentication.\n\n### Input:\nEndpoint URL: www.example.com/auth\n\n### Response:"}, {"role": "assistant", "content": "```python\n@app.route(\"/auth\", methods=['POST'])\ndef auth():\n    data = request.get_json()\n    username = data.get(\"username\")\n    password = data.get(\"password\")\n    user = User.check_user_auth(username, password)\n    if user:\n        session['username'] = username\n        return jsonify(success=True)\n    else:\n        return jsonify(success=False)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_689", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to return the key of the minimum element in a dictionary.\n\n### Input:\ndict: {'a': 1, 'b': 20, 'c': 3}\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nWrite a code to return the key of the minimum element in a dictionary.\n\"\"\"\ndef min_key(d):\n    if not d:\n        return None\n    min_val = min(d.values())\n    return [key for key, val in d.items() if val == min_val][0]\nif __name__ == '__main__':\n    d = {'a': 1, 'b': 20, 'c': 3}\n    print(min_key(d))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_690", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to merge two lists by alternating elements.\n\n### Input:\nlist1 = [2, 3, 5, 7]; \nlist2 = [4, 8, 10];\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge(list1, list2):\n    mergedList = []\n    for x,y in zip_longest(list1,list2): \n        mergedList.extend([x,y]) \n    return mergedList\n```"}]}
{"dataset": "code_medium", "id": "code_medium_691", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nIn Python, define a class for a rectangle object.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def __str__(self):\n        return f\"This is a rectangle with width of {self.width} and height of {self.height}.\"\n```"}]}
{"dataset": "code_medium", "id": "code_medium_692", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint all the odd numbers from 1 to 10 (inclusive)\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor num in range(1, 11):\n    if num % 2 == 1:\n        print(num)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_693", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSearch a list to find a string and return its index.\n\n### Input:\nstring_list = [\"apple\", \"banana\", \"orange\"]\nsearch_term = \"orange\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search_list(string_list, search_term):\n    \"\"\"\n    Search a list for a given string and return its index.\n    Parameters\n    ----------\n    string_list : list\n        The list to search\n    search_term : str\n        The string to search for\n    Returns\n    -------\n    index : int\n        The index of the string in the list,\n        returns -1 if the string is not found\n    \"\"\"\n    for i, s in enumerate(string_list):\n        if s == search_term:\n            return i\n    return -1\nstring_list = [\"apple\", \"banana\", \"orange\"] \nsearch_term = \"orange\"\nprint(search_list(string_list, search_term)) # Outputs 2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_694", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new Python class called Area to calculate the area of different shapes.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Area:\n    def __init__(self):\n        pass\n    def calculate_area_rectangle(self, length, width):\n        return length * width\n    def calculate_area_triangle(self, base, height):\n        return 0.5 * base * height\n    def calculate_area_circle(self, radius):\n        return 3.14 * radius**2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_695", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReturn the index of the value if it is present in the list or -1 if it is not present.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search(lst, val):\n    for i in range(len(lst)):\n        if lst[i] == val:\n            return i\n    return -1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_696", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare two objects and sort them using the inbuilt sorting function.\n\n### Input:\nlist1 = [7, 3, 5, 9]\nlist2 = [4, 8, 2, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\nsorted_lists = sorted(list1 + list2) \nprint(sorted_lists)\n# Output: [2, 3, 4, 5, 7, 8, 9, 10]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_697", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the code to print the second largest number in a list.\n\n### Input:\nnum_list = [3, 6, 8, 4, 12, 20, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\nnum_list = [3, 6, 8, 4, 12, 20, 7]\n# Sort the list in descending order\nnum_list.sort(reverse=True)\n# Print the second largest number\nprint(num_list[1])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_698", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to find the maximum subarray of an array of numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_subarray(arr): \n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(len(arr)): \n        max_ending_here = max_ending_here + arr[i] \n        if max_ending_here < 0: \n            max_ending_here = 0\n        if (max_so_far < max_ending_here): \n            max_so_far = max_ending_here \n    return max_so_far\n```"}]}
{"dataset": "code_medium", "id": "code_medium_699", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the turtle module, create a drawing of a triangle.\n\n### Input:\nimport turtle\n<noinput>\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport turtle\n# create an instance of Turtle class\nmy_turtle = turtle.Turtle()\nmy_turtle.speed(0)\n# draw a triangle\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\nmy_turtle.left(120)\nmy_turtle.forward(100)\n# finish the drawing\nmy_turtle.done()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_700", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that prints out the magnitude of the three-dimensional vector with the following components: (x, y, z).\n\n### Input:\n(1, 2, 3)\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport math\ndef magnitude(x, y, z):\n    return math.sqrt(x * x + y * y + z * z)\nprint(magnitude(1, 2, 3))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_701", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate five random numbers between 0 and 10 in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\nrandom.sample(range(0, 10), 5)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_702", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to take a list of strings and return only the words made up of the same letter.\n\n### Input:\nword_list = [\"aaa\", \"cab\", \"bba\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef same_letter_words(word_list):\n    same_letter_words = [word for word in word_list if len(set(word)) == 1]\n    return same_letter_words\n```"}]}
{"dataset": "code_medium", "id": "code_medium_703", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest improvements to the code fragment given below.\n\n### Input:\nx = 25\nif x < 20\n    print(\"x is less than 20\")\n\n### Response:"}, {"role": "assistant", "content": "```python\nif x < 20:\n    print(\"x is less than 20\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_704", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate and initialize a two-dimensional array of size 5x5 with 0s.\n\n### Response:"}, {"role": "assistant", "content": "```python\ntwoDArray = [[0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0], [0,0,0,0,0]]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_705", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a method to check if a given string has all unique characters.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef has_unique_chars(string): \n  chars = set() \n  for char in string: \n    if char in chars: \n      return False \n    else: \n      chars.add(char) \n  return True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_706", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all numbers from 1 to the given number n which are divisible by 6.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef findDivisibleBySix(n):\n  result = []\n  for i in range(1, n+1):\n    if i % 6 == 0:\n      result.append(i)\n  return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_707", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nOutpus true if the given number is a power of two, False otherwise.\n\n### Input:\nn = 16\n\n### Response:"}, {"role": "assistant", "content": "```python\nprint(n > 0 and (n & (n - 1)) == 0) # True\n```"}]}
{"dataset": "code_medium", "id": "code_medium_708", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a function that takes in two strings and produces an array of characters that are only in the first string.\n\n### Input:\nstringA = \"abcdefg\"\nstringB = \"hijklmn\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef to_array(strA, strB):\n    output = []\n    for char in strA:\n        if char not in strB:\n            output.append(char)\n    return output\nresult = to_array(stringA, stringB)\nprint(result)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_709", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest some changes to the following code that will reduce the runtime complexity.\n\n### Input:\ndef search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i in range(len(arr)):\n        if arr[i] == target:\n            return i\n    return -1\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search_array(arr, target):\n    '''This function searches a given array for the target and returns its index if found.'''\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_710", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 16 character string.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\nimport string\ndef generate_string():\n    chars = string.ascii_letters + string.digits \n    return ''.join(random.choice(chars) for _ in range(16))\nif __name__ == '__main__':\n    print(generate_string()) \n    # Output: 5A5l7p9XohHmFWhh\n```"}]}
{"dataset": "code_medium", "id": "code_medium_711", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings s1 and s2, how can you check if s2 is a substring of s1?\n\n### Input:\ns1 = \"testString\"\ns2 = \"String\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nif s2 in s1:\n  print(\"s2 is a substring of s1\")\nelse:\n  print(\"s2 is not a substring of s1\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_712", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a for loop that prints the integers from 100 to 1.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(100, 0, -1):\n    print(i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_713", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint out all even elements in an array.\n\n### Input:\n[1,2,3,4,5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_even(arr):\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n    return even\n```"}]}
{"dataset": "code_medium", "id": "code_medium_714", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function which takes two arguments, a string and a list, and prints out the list with each element preceded by the string\n\n### Input:\nmy_string = \"Example: \"\nmy_list = [\"a\", \"b\", \"c\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prepend_list_items(str, lst):\n  for item in lst:\n    print(str + item)\nprepend_list_items(my_string, my_list)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_715", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes a string and reverses it.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_string(my_string):\n    return my_string[::-1]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_716", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes two parameters, a list of integers and a target integer. The function should return the number of times the target integer appears in the list.\n\n### Input:\nlist = [12, 4, 1, 18, 7, 15, 6, 11, 4]\ntarget = 4\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_target(lst, target):\n    count = 0\n    for i in lst:\n        if i == target:\n            count += 1\n    return count\nprint(count_target(list, target))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_717", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the \"requests\" library, write a code to get the data from the endpoint http://jsonplaceholder.typicode.com/users\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\ndef get_api_data():\n    url = 'http://jsonplaceholder.typicode.com/users'\n    response = requests.get(url)\n    return response.json()\n    \nif __name__ == '__main__':\n    data = get_api_data()\n    print(data)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_718", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a completion for the following code to check if the given string is a palindrome.\n\n### Input:\nstring = 'malayalam'\n\n### Response:"}, {"role": "assistant", "content": "```python\nrev_str = string[::-1]\nif rev_str == string:\n  print(\"The string is a palindrome.\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_719", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that prints all the prime numbers between 1 and a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_prime_numbers(upper_limit):\n  prime_numbers_list = []\n  for num in range(2, upper_limit+1):\n   if all(num % i != 0 for i in range(2, num)): \n    prime_numbers_list.append(num)\n  print(\"The prime numbers between 1 and\",upper_limit,\"are:\",prime_numbers_list)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_720", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFor the following array of integers, find the number of instances of 6:\n\n### Input:\n[1,2,3,4,5,6,7,8,9,10,6,6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ncount = 0\nfor i in [1,2,3,4,5,6,7,8,9,10,6,6]:\n    if i == 6:\n        count += 1\nprint (\"Number of instances of 6:\",count)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_721", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code snippet for a function to calculate the number of words in a given string.\n\n### Input:\nmyString = \"The sky is blue\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef countWords (myString): \n    return len(myString.split()) \nnum = countWords(myString) \nprint(\"Number of words =\", num)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_722", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert a given number from base 10 to base 16.\n\n### Input:\nNumber: 245\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef base10_to_base16(num):\n    return hex(num).upper()[2:]\nif __name__ == '__main__':\n    print(base10_to_base16(245))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_723", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class to normalize the salary of an employee with a minimum salary of 20,000.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass SalaryNormalizer:\n    def __init__(self, salary):\n        self.minimum = 20000\n        self.input_salary = salary\n \n    def normalize(self):\n        if self.input_salary < self.minimum:\n            self.normalized_salary = self.minimum\n        else:\n            self.normalized_salary = self.input_salary\n \n        return self.normalized_salary\n```"}]}
{"dataset": "code_medium", "id": "code_medium_724", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGet all permutations of string.\n\n### Input:\nstring = \"abc\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom itertools import permutations \n  \ndef permutations_string(string):\n    return list(permutations(string))\npermutations_string(\"abc\")\nOutput: [('a', 'b', 'c'), ('a', 'c', 'b'), ('b', 'a', 'c'), ('b', 'c', 'a'), ('c', 'a', 'b'), ('c', 'b', 'a')]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_725", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the following code so that it prints the list elements in reverse order.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\nfor x in arr:\n    print(x)\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = [1, 2, 3, 4, 5]\nfor x in arr[::-1]:\n    print(x)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_726", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a random 8 character password using the following conditions:\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\nimport string\ndef generatePassword():\n    chars = string.ascii_letters + string.digits + '!@#$%^&*/.:?|'\n    size = 8\n    random_string = \"\".join(random.choice(chars) for _ in range(size))\n    return random_string\nrandom_password = generatePassword()\nprint(random_password) # qr6.h^37\n```"}]}
{"dataset": "code_medium", "id": "code_medium_727", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to count the number of characters in a string, without using the len() function.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_characters(string):\n    count = 0\n    for char in string:\n        count +=1\n    return count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_728", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nReport the number of words in the following text.\n\n### Input:\nThis is a sample text\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_words(text):\n  return len(text.split())\n```"}]}
{"dataset": "code_medium", "id": "code_medium_729", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a user interface for a customer order system.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport tkinter\n# create the main window \nroot = Tk() \n  \n# create the user interface \nroot.title(\"Order System\") \nroot.geometry(\"400x200\") \n  \n# create widgets \nLabel(root, text = 'Name:').grid(row = 0, column = 0, padx = 10, pady = 10) \nEntry(root).grid(row = 0, column = 1, columnspan = 2, padx = 10, pady = 10) \nLabel(root, text = 'Email address:').grid(row = 1, column = 0, padx = 10, pady = 10) \nEntry(root).grid(row = 1, column = 1, columnspan = 2, padx = 10, pady = 10) \nButton(root, text = 'Submit').grid(row = 2, column = 1, padx = 10, pady = 10) \nButton(root, text = 'Cancel').grid(row = 2, column = 2, padx = 10, pady = 10) \n# enter main event loop \nroot.mainloop()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_730", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nReverse the following list of numbers.\n\n### Input:\n[1, 2, 3, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_list(nums):\n    return nums[::-1]\nif __name__ == '__main__':\n    numbers = [1, 2, 3, 4]\n    reversed_list = reverse_list(numbers)\n    print(reversed_list)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_731", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to find the kth smallest number in an unsorted list given three inputs (list, k and n).\n\n### Input:\nlist = [12, 3, 5, 7, 19] \nk = 3\nn = len(list)\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_kth_smallest_number(list, n, k): \n  \n    list.sort()\n    # kth smallest element \n    return list[k-1]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_732", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm that calculates the sum of all numbers in a given array.\n\n### Input:\n[2, 4, 7, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef array_sum(arr): \n    total = 0\n    # Iterate through arr and add elements to total  \n    for i in range (0, len(arr)): \n        total += arr[i] \n    return total \n  \n# Driver code \narr = [2, 4, 7, 10] \nsum = array_sum(arr) \nprint (sum) # -> 23\n```"}]}
{"dataset": "code_medium", "id": "code_medium_733", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\ncreate a function that calculates the total cost of a meal including taxes and tips.\n\n### Input:\nmeal_price = 35\nsales_tax = 0.09\ntip_percentage = 0.18\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a function that calculates the total cost of a meal including taxes and tips\n\"\"\"\ndef calculate_total_meal_cost(meal_price, sales_tax, tip_percentage): \n    # Calculate subtotal\n    subtotal = meal_price + meal_price * tip_percentage\n    # Calculate tax\n    tax =  subtotal * sales_tax\n    # Calculate total\n    total = subtotal + tax\n    return total\nif __name__ == '__main__': \n    meal_price = 35\n    sales_tax = 0.09\n    tip_percentage = 0.18\n    print(\"Total cost of meal is: \" + str(calculate_total_meal_cost(meal_price, sales_tax, tip_percentage)))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_734", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to parse an HTML string and extract the body text only.\n\n### Input:\n<html> <body> test text <p> Some more text </p> </body> </html>\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re \ndef get_body_text(htmlString):\n    matches = re.search(r'<body>(.*?)</body>', htmlString, re.MULTILINE | re.DOTALL)\n    return matches.group(1)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_735", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two lists, write a Python code to find the common elements in both the lists\n\n### Input:\nlist1 = [3, 7, 14, 19]\nlist2 = [6, 8, 14, 17]\n\n### Response:"}, {"role": "assistant", "content": "```python\ncommon_elements = [element for element in list1 if element in list2]\nprint(common_elements) #[14]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_736", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to return the list of integers between two given numbers.\n\n### Input:\nstart = 5\nend = 9\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_integer_between(start, end):\n        return list(range(start, end + 1))\nprint(get_integer_between(start, end))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_737", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAnnotate the given code with its function\n\n### Input:\ndef foo(a, b): \n    c = a + b \n    return c\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef foo(a, b): \n# This function adds two numbers and returns the sum\n    c = a + b\n    return c\n```"}]}
{"dataset": "code_medium", "id": "code_medium_738", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to rotate a matrix by 90 degrees.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef rotate_matrix(matrix):\n    m = len(matrix)\n    # Create a new matrix\n    new_matrix = [[0 for _ in range(m)] for _ in range(m)]\n    # Rotate the matrix\n    for i in range(m):\n        for j in range(m): \n            new_matrix[j][m - i - 1] = matrix[i][j]\n    # Return the rotated matrix\n    return new_matrix\n```"}]}
{"dataset": "code_medium", "id": "code_medium_739", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the latitude and longitude of an input address.\n\n### Input:\naddress = \"1600 Amphitheatre Parkway, Mountain View, CA\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport geocoder\ng = geocoder.google(address)\nprint(\"Latitude: \" + str(g.latlng[0])) \nprint(\"Longitude: \" + str(g.latlng[1]))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_740", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to decrypt a given cipher text using the Caesar cipher\n\n### Input:\ncipher_text=\"dfwlrq\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef decrypt_caesar_cipher(cipher_text):\n alphabet=\"abcdefghijklmnopqrstuvwxyz\"\n output=\"\"\n for char in cipher_text:\n   i=(alphabet.index(char)-3)%26\n   output+=alphabet[i]\n return output\n```"}]}
{"dataset": "code_medium", "id": "code_medium_741", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an 8 character random string.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport string\nimport random\ndef gen_random_string(size):\n    letters = string.ascii_letters + string.digits\n    return ''.join(random.choice(letters) for i in range(size))\nrandom_string = gen_random_string(8)\nprint(random_string)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_742", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to fill missing values in a Pandas dataframe with a given value.\n\n### Input:\nimport pandas as pd\n\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n])\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport pandas as pd\ndf = pd.DataFrame([\n    [8, 'B', 'G'],\n    [28, 'B', np.nan],\n    [22, np.nan, 'G'],\n    [2, 'A', np.nan] \n])\ndf.fillna(value='NA', inplace=True)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_743", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a lambda function in Python that collects all the numbers between 0 and 10 that are divisible by 3.\n\n### Response:"}, {"role": "assistant", "content": "```python\nlambda x: [x for x in range(0, 11) if x % 3 == 0]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_744", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to print the first 10 odd numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor num in range(1, 21, 2):\n    print(num)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_745", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a loop to print the numbers from 10 to 1 in reverse order.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(10, 0, -1):\n    print(i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_746", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to convert a number from base 10 to base 8.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef convert_base_10_to_base_8(number):\n   binary_number = bin(number)[2:]\n   octal_number = oct(int(binary_number, 2))[2:]\n   return octal_number\n```"}]}
{"dataset": "code_medium", "id": "code_medium_747", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array of 10 randomly generated integers between 0 and 10.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\ndef generate_random_array():\n    return [random.randint(0, 10) for _ in range(10)]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_748", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you create a Pandas DataFrame using a given list of dictionaries?\n\n### Input:\n[{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport pandas as pd\ndata = [{\"animal\": \"cat\"}, {\"animal\": \"dog\"}, {\"animal\": \"fish\"}]\ndf = pd.DataFrame(data)\nprint(df)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_749", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReduce the 3-dimensional numpy array to a 2-dimensional numpy array.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport numpy as np\na_3d_array = np.array([[[1,2], [3,4]], [[5,6], [7,8]]])\na_2d_array = a_3d_array.reshape(4,2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_750", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nParse the given XML code and extract the value of the first attribute of the first element.\n\n### Input:\n<root>\n    <item attr1=\"value1\" attr2=\"value2\">\n        <value>Logged</value>\n    </item>\n</root>\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport xml.etree.ElementTree as ET\ntree = ET.parse('test.xml') \nroot = tree.getroot() \nfirst_attr = root[0].attrib['attr1']\nprint(first_attr) # Output: 'value1'\n```"}]}
{"dataset": "code_medium", "id": "code_medium_751", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a lambda expression that multiplies the argument by two.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# construct a lambda that multiplies the argument by two\nfunc = lambda x : x * 2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_752", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following function so that it returns a tuple instead of two separate values.\n\n### Input:\ndef random_arr(arr):\n    idx = random.randint(0,len(arr)-1)\n    return arr[idx], idx\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef random_arr(arr):\n    idx = random.randint(0, len(arr)-1)\n    return (arr[idx], idx)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_753", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to determine if two strings are rotations of each other.\n\n### Input:\n\"abcde\", \"eabcd\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_rotation(str1, str2):\n    return len(str1) == len(str2) and str2 in str1+str1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_754", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function which takes an array of strings as an argument and return the longest string.\n\n### Input:\narray =['cake', 'apple', 'orange']\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef largest_string(array):\n   largest_string=array[0]\n   for i in array:\n      if len(i) > len(largest_string):\n         largest_string = i\n   return largest_string\n```"}]}
{"dataset": "code_medium", "id": "code_medium_755", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to reverse a lis\n\n### Input:\n[1,2,3,4,5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_list(lst):\n    rev_lst = lst[::-1]\n    return rev_lst\n```"}]}
{"dataset": "code_medium", "id": "code_medium_756", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to calculate the total of all the elements in a nested list.\n\n### Input:\nnested_list = [[1,2,3], [4,5,6], [7,8,9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_of_nested_list(nested_list):\n    total = 0\n    for internal_list in nested_list:\n        for num in internal_list:\n            total += num\n    return total\n```"}]}
{"dataset": "code_medium", "id": "code_medium_757", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nQuery the MongoDB database for all the documents that have \"Status\" field set to \"Done\".\n\n### Response:"}, {"role": "assistant", "content": "```python\ndb.collection.find({\"Status\":\"Done\"})\n```"}]}
{"dataset": "code_medium", "id": "code_medium_758", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class to represent a car with member variables for the make, model, and year.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Car: \n  def __init__(self, make, model, year): \n    self.make = make\n    self.model = model\n    self.year = year\n```"}]}
{"dataset": "code_medium", "id": "code_medium_759", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the numpy library, reshape the given matrix array to 5 rows and 2 columns.\n\n### Input:\nimport numpy as np \narr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = np.array([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12]])\nreshaped_arr = arr.reshape(5, 2)\nprint(reshaped_arr)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_760", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Python function to check if an integer is even or odd.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_even(num):\n  return num % 2 == 0\n```"}]}
{"dataset": "code_medium", "id": "code_medium_761", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python called 'Car' and add instance variables for the car's make, model and year.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Car:\n    \n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n```"}]}
{"dataset": "code_medium", "id": "code_medium_762", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given code snippet to make all elements of the list uppercase.\n\n### Input:\nlist = [\"hello\", \"world\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist = [x.upper() for x in list]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_763", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nExtract the value \"qux\" in the following dictionary.\n\n### Input:\nd = {\n    'foo': 'bar',\n    'baz': {\n        'qux': 12\n    }\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\nd = {\n    'foo': 'bar',\n    'baz': {\n        'qux': 12\n    }\n}\nqux = d['baz']['qux']\n```"}]}
{"dataset": "code_medium", "id": "code_medium_764", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCount the number of vowels in the given sentence and print the result.\n\n### Input:\nSentence: There is no shortcut to success\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCount the number of vowels in the given sentence and print the result\n\"\"\"\n# given sentence\nsentence = 'There is no shortcut to success'\n# count the vowels in the sentence\nvowels = 0\nfor char in sentence:\n    if char in 'aeiou':\n        vowels += 1\n# Print the number of vowels\nprint('Number of Vowels: ', vowels)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_765", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program to shuffle the content of a list.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\ndef shuffle_list(lst):\n    for i in range(len(lst)-1, 0, -1):\n        j = random.randint(0, i)\n        lst[i], lst[j] = lst[j], lst[i]\n    return lst\n```"}]}
{"dataset": "code_medium", "id": "code_medium_766", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the code in Python to convert a lower case string to an upper case string.\n\n### Input:\n'hello world'\n\n### Response:"}, {"role": "assistant", "content": "```python\nstring = 'hello world'\nstring = string.upper()\nprint(string)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_767", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFor the following two arrays, create a code snippet to return the intersecting element.\n\n### Input:\narr1 = [1, 9, 4, 10]\narr2 = [2, 4, 7, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\nintersect_arr = [] \nfor i in arr1:\n    if i in arr2:\n        intersect_arr.append(i)\nreturn intersect_arr\n```"}]}
{"dataset": "code_medium", "id": "code_medium_768", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to calculate the number of minutes a user has been logged in.\n\n### Input:\nlog_in_time = '11:30:00', log_out_time = '13:30:00'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_time_difference(log_in_time, log_out_time) :\n  time_in = datetime.strptime(log_in_time, '%H:%M:%S')\n  time_out = datetime.strptime(log_out_time, '%H:%M:%S')\n  diff = time_out - time_in\n  minute_difference = diff.seconds // 60\n  return minute_difference\nprint(calculate_time_difference('11:30:00', '13:30:00'))\n# Output: 120\n```"}]}
{"dataset": "code_medium", "id": "code_medium_769", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to sort a dictionary of dictionaries in descending order based on a given key.\n\n### Input:\nd = {'dict1': {'name':'tom','age':20}, \n     'dict2': {'name':'jerry','age':25},\n     'dict3': {'name':'bill','age':24}}\nkey = 'age'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_dict_of_dicts(d, key):\n    sorted_dict = dict(sorted(d.items(), key = \n             lambda kv:(kv[1][key], kv[0]),reverse=True))\n    return sorted_dict\n```"}]}
{"dataset": "code_medium", "id": "code_medium_770", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that allows users to sign up for your feature using their username and password.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sign_up(username, password):\n    \"\"\"This function will allow users to sign up for the feature using their username and password.\"\"\"\n    # Implement sign up feature\n    # ...\nif __name__ == '__main__':\n    username = \"JohnDoe\"\n    password = \"Passw0rd\"\n    sign_up(username, password)\n    print(\"Sign up successful!\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_771", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Tkinter app with a label and a button.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport tkinter as tk\nroot = tk.Tk()\nframe = tk.Frame(root)\nframe.pack()\nlabel = tk.Label(frame, text=\"Hello World!\")\nlabel.pack()\nbutton = tk.Button(frame, text=\"Exit\", command=frame.quit)\nbutton.pack()\nroot.mainloop()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_772", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an object oriented program to print the Fibonacci sequence.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Fibonacci:\n    def __init__(self, num):\n        self.num = num\n \n    def fibo(self):\n        prev = 0\n        current = 1\n        next = 0\n        print(prev)\n        print(current)\n        for i in range(2,self.num):\n            next=prev+current\n            print(next)\n            prev=current\n            current=next\n \n# main program starts from here\nn= int(input(\"how many numbers to print: \"))\nfibo_obj=Fibonacci(n)\nfibo_obj.fibo()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_773", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCode an while loop statement to print a string with the value of the variable num.\n\n### Input:\nnum = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\nwhile num > 0:\n    print(\"The value of num is \" + str(num))\n    num -= 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_774", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a calculator program using Python to do the following calculations.\n\n### Input:\nA = 30;\nB = 15;\nC = 4;\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculator(A, B, C):\n    add = A + B\n    subtract = A - B\n    multiply = A * C\n    divide = A / B\n    remainder = A % B\n    return add, subtract, multiply, divide, remainder\n```"}]}
{"dataset": "code_medium", "id": "code_medium_775", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevise a recursive solution to the problem.\n\n### Input:\nFind the sum of all numbers from 1 to N\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_recursive(n):\n    if n == 0:\n        return 0\n    else:\n        return n + sum_recursive(n-1)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_776", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function that takes two parameters, an array and a value, and returns true if the array contains the value and false if it does not.\n\n### Input:\nlet myArray = [1, 2, 3, 4, 5];\nlet myValue = 3;\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef containsValue(arr, value):\n    for item in arr:\n        if item == value:\n            return True\n    return False\nprint(containsValue(myArray, myValue))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_777", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the number of unique subsets of a given set\n\n### Input:\ngiven_set = {1, 2, 3}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef unique_subsets_count(given_set): \n    \"\"\"\n    Find the number of unique subsets of a given set\n    \n    Parameters\n    ----------\n    given_set: Set of elements\n    \n    Returns\n    -------\n    count: Number of unique subsets\n    \"\"\"\n             \n    count = 1 << len(given_set)\n    \n    return count\n```"}]}
{"dataset": "code_medium", "id": "code_medium_778", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that determines if two words are anagrams.\n\n### Input:\nFire, fry\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_anagram(word1, word2):\n    word1 = word1.upper()\n    word2 = word2.upper()\n    return sorted(word1) == sorted(word2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_779", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nMerge the following two linked lists.\n\n### Input:\nLinked List 1: 1->3->5\nLinked List 2: 2->4\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge(head1, head2):\n    # If either is empty\n    if not head1 or not head2:\n        return head1 or head2\n    # if first linked list is smaller \n    if head1.data < head2.data:\n        head1.next = merge(head1.next, head2)\n        return head1\n    else: # if second linked list is smaller or equal\n        head2.next = merge(head1, head2.next)\n        return head2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_780", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the following Python code\n\n### Input:\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nDebug the following Python code\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1\n\"\"\"\n# incorrect indentation of the else statement\ndef f(x):\n    if x > 0:\n        return -1\n    else:\n        return 1   # correct indentation\n```"}]}
{"dataset": "code_medium", "id": "code_medium_781", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to find the sum of all the multiples of 3 or 5 below 1000.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_multiples():\n    sum = 0\n    for num in range(1000):\n        if num % 3 == 0 or num % 5 == 0:\n            sum += num\n    return sum\n```"}]}
{"dataset": "code_medium", "id": "code_medium_782", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you modify the code to check whether the list contains an even number?\n\n### Input:\nlist_data = [1, 2, 3, 4]\nfor item in list_data:  \n    print(item)\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist_data = [1, 2, 3, 4]\nflag = False\nfor item in list_data:  \n    print(item)\n    if item % 2 == 0:\n       flag = True\nif flag:\n    print(\"List contains even number.\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_783", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program that can calculate the factorial of a number using a while loop\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef factorial_while(n):\n    factorial = 1\n    while n>0:\n        factorial = factorial * n\n        n = n - 1\n    return factorial\n```"}]}
{"dataset": "code_medium", "id": "code_medium_784", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following recursive function such that it runs in iterative manner.\n\n### Input:\ndef f(n):\n    if n <= 1:\n        return n\n    else:\n        return f(n-1) + f(n-2)\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef f(n):\n    if n <= 1:\n        return n\n    else: \n        a, b = 1, 1\n        for _ in range(n-1):\n            a, b = b, a+b\n        return b\n```"}]}
{"dataset": "code_medium", "id": "code_medium_785", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUse the given JSON data to create a function that returns the number of males in the dataset.\n\n### Input:\nSample JSON data:\n\n[\n  {\n    \"name\": \"John\",\n    \"age\": 25,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 22,\n    \"gender\": \"female\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 28,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jill\",\n    \"age\": 24,\n    \"gender\": \"female\"\n  }\n]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_num_males(data):\n    # create a counter variable\n    num_males = 0\n    # loop through the data\n    for person in data:\n        if person['gender'] == 'male':\n            num_males += 1\n    # return the number of males\n    return num_males\n```"}]}
{"dataset": "code_medium", "id": "code_medium_786", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the area of the circle where the radius is 5 inches in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport math \n  \nradius = 5 \narea = math.pi * (radius**2) \nprint(\"The area of the circle is\", area)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_787", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given list, create a code that will generate a unique list of numbers\n\n### Input:\nx = [4, 10, 16, 22, 28, 34]\n\n### Response:"}, {"role": "assistant", "content": "```python\nnew_list = []\nfor num in x:\n    if num not in new_list:\n        new_list.append(num)\nprint(new_list)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_788", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input string, create a new string that contains all the characters in even indices.\n\n### Input:\nmy_string = \"abcdefghi\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Create an empty string\nnew_string = \"\"\n# Iterate over the even indices\nfor i in range(0, len(my_string), 2):\n    new_string += my_string[i]\n# Print the new string\nprint(new_string) # prints 'acegi'\n```"}]}
{"dataset": "code_medium", "id": "code_medium_789", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes two numbers and swaps the values of the two numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef swap(x, y): \n    temp = x \n    x = y \n    y = temp \n  \nx = 10\ny = 5\nswap(x, y) \nprint(\"x =\", x, \"y =\", y)\n# Output: x = 5 y = 10\n```"}]}
{"dataset": "code_medium", "id": "code_medium_790", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nprint the values of a dictionary in first-in, first-out order\n\n### Input:\nmy_dict = {\n 'a': 1,\n 'b': 2,\n 'c': 3\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_dict(d):\n    queue = [key for key in d.keys()]\n    while len(queue) > 0:\n        key = queue.pop(0)\n        print(d[key])\n        \nif __name__ == '__main__':\n    my_dict = {\n     'a': 1,\n     'b': 2,\n     'c': 3\n    }\n    print_dict(my_dict)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_791", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new array of integers which contains the sum of corresponding elements of two existing arrays.\n\n### Input:\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n# Initialize new array\narr_sum = [0 for _ in range(len(arr1))]\n# Add the values of both arrays\nfor i in range(len(arr1)):\n    arr_sum[i] = arr1[i] + arr2[i]\nprint(arr_sum)\n# Output: [5, 7, 9]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_792", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python for performing basic math calculations\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass MathCalculations:\n    \"\"\"\n    Class to perform math calculations \n    \"\"\"\n    def __init__(self):\n        pass\n    def add(self, num1, num2):\n        \"\"\"\n        Add two numbers\n        \"\"\"\n        return num1 + num2\n    def subtract(self, num1, num2):\n        \"\"\"\n        Subtract two numbers\n        \"\"\"\n        return num1 - num2\n    def multiply(self, num1, num2):\n        \"\"\"\n        Multiply two numbers\n        \"\"\"\n        return num1 * num2\n    def divide(self, num1, num2):\n        \"\"\"\n        Divide two numbers\n        \"\"\"\n        return num1 / num2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_793", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you solve the following problem: Given a list of numbers, find the two numbers that add up to a given sum?\n\n### Input:\n[3, 6, 2, 8, 4], sum = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_sum(arr, num):\n    found = False\n    arr_set = set(arr)\n    for i in arr_set:\n        x = num - i\n        if x in arr_set and x != i:  # make sure the numbers aren't the same\n            found = True\n            return i, x\n    if not found:\n        return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_794", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert this string from snake_case to CamelCase.\n\n### Input:\nsnake_case_string = \"example_string\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ncamelCaseString = ''.join(x.capitalize() or '_' for x in snake_case_string.split('_'))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_795", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a list of 5 integers and print out their product.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a list of 5 integers and print out their product\n\"\"\"\nlist_of_ints = [1, 2, 3, 4, 5]\nproduct = 1\nfor i in list_of_ints:\n    product *= i\nprint(product)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_796", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to find the smallest number in an array of numbers.\n\n### Input:\narr = [5, 8, 2, 4, 7, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_smallest_number(arr):\n    \"\"\"\n    Finds the smallest number in an array of numbers.\n    \"\"\"\n    min_num = arr[0]\n    for num in arr[1:]:\n        if num < min_num:\n            min_num = num\n    return min_num\n```"}]}
{"dataset": "code_medium", "id": "code_medium_797", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code in Python to swap two elements in a list.\n\n### Input:\nlist1 = [1, 2, 4]\n\nlist1[0], list1[1] = list1[1], list1[0]\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist1 = [1, 2, 4]\nlist1[0], list1[2] = list1[2], list1[0]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_798", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDetermine the longest word in a given string.\n\n### Input:\nsentence = \"I am Python Programmer\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_word(sentence):\n    words = sentence.split()\n    max_len = len(words[0])\n     \n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n     \n    return max_word\n \nprint(longest_word('I am Python Programmer'))\nOutput: Programmer\n```"}]}
{"dataset": "code_medium", "id": "code_medium_799", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an object-oriented code for a Book class.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Book:\n    def __init__(self, title, author, year):\n        self.title = title\n        self.author = author\n        self.year = year\n        \n    def get_title(self):\n        return self.title\n    \n    def get_author(self):\n        return self.author\n    \n    def get_year(self):\n        return self.year\n    \n    def set_title(self, new_title):\n        self.title = new_title\n        \n    def set_author(self, new_author):\n        self.author = new_author\n        \n    def set_year(self, new_year):\n        self.year = new_year\n```"}]}
{"dataset": "code_medium", "id": "code_medium_800", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to generate prime numbers between 1 and 50.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Program to print the prime numbers between 1 and 50\n \nfor num in range(1, 51):\n   # prime numbers are greater than 1\n   if num > 1:\n       for i in range(2, num):\n           if (num % i) == 0:\n               break\n       else:  \n           print(num)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_801", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop that runs from 1 to 10 and prints the square of each number.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range (1, 11):\n    print(i**2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_802", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that adds two numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef add(x, y):\n    \"\"\"Return the sum of x and y.\"\"\"\n    return x + y\n```"}]}
{"dataset": "code_medium", "id": "code_medium_803", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python dictionary containing the squares of the numbers from 1 to n.\n\n### Input:\nint n = 10;\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generateDict(n):\n    dict = {}\n    for i in range(1, n+1):\n        dict[i] = i**2\n    return dict\nn = 10\nprint(generateDict(n))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_804", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a dictionary that stores the number of occurrences of each character in a given string.\n\n### Input:\nstring = \"Hello World!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nchar_frequency_dict = {}\nfor char in string:\n    if char in char_frequency_dict:\n        char_frequency_dict[char] += 1\n    else:\n        char_frequency_dict[char] = 1\n```"}]}
{"dataset": "code_medium", "id": "code_medium_805", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWith given input string, create a program that returns a new string with the first character capitalized.\n\n### Input:\nhello world\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef capitalize(text):\n    return text[0].upper() + text[1:]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_806", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web browser automation script in Python to scrape the data from a website.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom selenium import webdriver\n# Create webdriver object\ndriver = webdriver.Chrome()\n# Put target website URL\nurl = 'https://www.example.com/'\n# Navigate to the website\ndriver.get(url)\n# Scrape the data\ndata = driver.find_elements_by_xpath('//*[@class=\"data-class\"]')\nfor element in data:\n    print(element.text)\n# Close the browser\ndriver.close()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_807", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nBreak down the given code into its individual parts.\n\n### Input:\ndef square_sum(x, y):\n return x*x + y*y\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef square_sum(x, y):\n return x * x + y * y\n# Break down code\n# part 1\ndef square_sum(x, y):\n# part 2\n return x * x + y * y\n# part 3\n# return calculated value\n```"}]}
{"dataset": "code_medium", "id": "code_medium_808", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake the following Python function for generating powerset.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef powerset(s):\n    result = [[]]\n    for x in s:\n        result.extend([y + [x] for y in result])\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_809", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRe-write the code segment as a list comprehension.\n\n### Input:\nnumbers = []\nfor i in range(10):\n    if i % 2 == 0:\n        numbers.append(i)\n\n### Response:"}, {"role": "assistant", "content": "```python\nnumbers = [i for i in range(10) if i % 2 == 0]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_810", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a NumPy array with all the elements set to 0.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport numpy as np\narr = np.zeros(shape=(10, 10))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_811", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to generate a random number within the range of 0 and 1000.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\ndef random_in_range():\n    return random.randint(0, 1000)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_812", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the roots of a quadratic equation given its coefficients.\n\n### Input:\nCoefficients:  4, 3, 1\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Calculate the roots of the given equation\ndef quadratic_roots(a, b, c):\n   # Calculate the discriminant\n   discriminant = b**2 - 4*a*c\n \n   # Calculate root1 and root2\n   root1 = (-b + discriminant**0.5)/(2*a)\n   root2 = (-b - discriminant**0.5)/(2*a)\n   \n   return root1, root2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_813", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a for loop that iterates 10 times and prints the square of each iteration.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(10):\n    print(i**2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_814", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sequence to sequence model for translation.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom tensorflow.keras.layers import Input, LSTM, Dense\ndef seq2seq_model(src_length, trg_length, embedding_dim, num_enc_tokens, num_dec_tokens):\n    # Define an input layer.\n    encoder_inputs = Input(shape=(None, num_enc_tokens))\n    # Add an LSTM layer with `src_length` number of units\n    encoder_lstm = LSTM(src_length, return_state=True)\n    # Define the encoder output, state and the encoder states\n    encoder_outputs, state_h, state_c = encoder_lstm(encoder_inputs)\n    # Discard `encoder_outputs` and only keep the states.\n    encoder_states = [state_h, state_c]\n    # Set up the decoder, using `encoder_states` as initial state.\n    decoder_inputs = Input(shape=(None, num_dec_tokens))\n    # Add an LSTM layer with `src_length` number of units\n    decoder_lstm = LSTM(src_length, return_state=True, return_sequences=True)\n    decoder_outputs, _, _ = decoder_lstm(decoder_inputs, initial_state=encoder_states)\n    # Add a fully connected layer\n    decoder_dense = Dense(trg_length, activation='softmax')\n    # Define the output of the decoder\n    decoder_outputs = decoder_dense(decoder_outputs)\n    # Create a model\n    model = Model([encoder_inputs, decoder_inputs], decoder_outputs)\n    # Compile the model\n    model.compile(optimizer='adam', loss='categorical_crossentropy')\n    return model\n```"}]}
{"dataset": "code_medium", "id": "code_medium_815", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nReturn the \"name\" field of the JSON object given below.\n\n### Input:\n{\n\t\"name\": \"John Doe\",\n\t\"age\": 28,\n\t\"country\": \"United States\"\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport json\ninput_json = {\n        \"name\": \"John Doe\",\n        \"age\": 28,\n        \"country\": \"United States\"\n}\ndef get_name(json):\n    json_dict = json.loads(json)\n    name = json_dict['name']\n    return name\nif __name__ == '__main__':\n    print(get_name(input_json))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_816", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the sum of all multiples of 3 and 5 between 1 and a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_multiples_of_3_and_5(n):\n    sum = 0\n    for i in range(1, n+1):\n        if i % 3 == 0 or i % 5 == 0: \n            sum += i\n    return sum\n```"}]}
{"dataset": "code_medium", "id": "code_medium_817", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint the contents of the provided dictonary\n\n### Input:\nDictonary: {'name': 'John', 'age': 23, 'address': '123 Main Street'}\n\n### Response:"}, {"role": "assistant", "content": "```python\nprint('Name:', d['name'])\nprint('Age:', d['age'])\nprint('Address:', d['address'])\n```"}]}
{"dataset": "code_medium", "id": "code_medium_818", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the function to also remove all whitespace from the string.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\ndef remove_special_chars_and_whitespace(s):\n    return re.sub(r'\\s','', re.sub(r'[^\\w\\s]','', s))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_819", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to update the elements of a list inplace.\n\n### Input:\nlst = [2, 4, 6, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(len(lst)):\n    lst[i] *= 2\n```"}]}
{"dataset": "code_medium", "id": "code_medium_820", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a lambda expression to deduct 10 from a number.\n\n### Response:"}, {"role": "assistant", "content": "```python\nlambda x: x-10\n```"}]}
{"dataset": "code_medium", "id": "code_medium_821", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to convert a given string into a list of words.\n\n### Input:\nMy name is Anna.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef string_to_list(string):\n words = string.split(' ')\n return words\n```"}]}
{"dataset": "code_medium", "id": "code_medium_822", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following C++ program to Python.\n\n### Input:\n#include <iostream>\n\nint main()\n{\n  int i = 0;\n  int x = 0;\n\nwhile(i<5){\n  x=x+i;\n  i++;\n}\n  std::cout << x;\n\nreturn 0;\n\n### Response:"}, {"role": "assistant", "content": "```python\ni = 0 \nx = 0 \nwhile i < 5: \n    x += i \n    i += 1 \nprint(x)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_823", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to convert a given binary string to its equivalent hexadecimal representation.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bin_to_hex(binary_string):\n    dec = int(binary_string, 2)\n    hex_string = hex(dec).replace('x', '')\n    return hex_string\n```"}]}
{"dataset": "code_medium", "id": "code_medium_824", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the intersection between two lists.\n\n### Input:\nlist1 = [1, 2, 3, 5, 7]\nlist2 = [3, 4, 5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef intersection(list1, list2):\n    result = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                result.append(i)\n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_825", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that removes all occurrences of a character from a given string.\n\n### Input:\nstring = \"happiness\"\nchar = \"p\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef removeCharFromString(string, char):\n  result_string = []\n  for c in string:\n    if c != char:\n      result_string.append(c)\n  return ''.join(result_string)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_826", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nTake the following array as an argument and output the sum of all the numbers in the array using Python.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_of_array(arr):\n  return sum(arr)\narray = [1, 2, 3, 4, 5]\nresult = sum_of_array(array)\nprint(resutl) # Output: 15\n```"}]}
{"dataset": "code_medium", "id": "code_medium_827", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code to return the elements in the reversed order.\n\n### Input:\ndef reverse_list(lst):\n    for i in range(0, len(lst)):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_list(lst):\n    for i in range(0, len(lst)//2):\n        temp = lst[i]\n        lst[i] = lst[len(lst)-1-i]\n        lst[len(lst)-1-i] = temp\n    return lst\n```"}]}
{"dataset": "code_medium", "id": "code_medium_828", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nIn the given code, add an if statement to check if the user's score is greater than a certain limit.\n\n### Input:\nscore = 67\nlimit = 70\n\n### Response:"}, {"role": "assistant", "content": "```python\nif score > limit:\n  print(\"The user scored higher than the limit.\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_829", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a quick-sort algorithm in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quick_sort(arr):\n    \"\"\"Sort a list of numbers in ascending order using the Quick-Sort algorithm\"\"\"\n    if len(arr) == 0:\n        return []\n    pivot = arr[0]\n    left_arr = [x for x in arr if x < pivot]\n    right_arr = [x for x in arr if x > pivot]\n    return quick_sort(left_arr) + [pivot] + quick_sort(right_arr)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_830", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the code below, update the function to find the average of two numbers.\n\n### Input:\ndef find_average(num1, num2): \n  total = num1 + num2\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_average(num1, num2): \n  total = num1 + num2 \n  average = total / 2\n  return average\n```"}]}
{"dataset": "code_medium", "id": "code_medium_831", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a recursive algorithm, reverse the order of elements in a list.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# recursive approach\ndef recursive_reverse(arr, length):\n    if length == 0:\n        return\n    recursive_reverse(arr, length - 1)\n    arr.append(arr[length - 1])\n    arr.pop(length - 1)\n    \n# call function on the data\nrecursive_reverse(arr, len(arr))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_832", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a Python class for a camera object.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Camera:\n    \"\"\"Class representing a camera\"\"\"\n    \n    def __init__(self, brand, model):\n        \"\"\"\"\"\"\n        self.brand = brand \n        self.model = model \n    \n    def get_brand(self):\n        \"\"\"\"\"\"\n        return self.brand\n    \n    def get_model(self):\n        \"\"\"\"\"\"\n        return self.model\n```"}]}
{"dataset": "code_medium", "id": "code_medium_833", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a dictionary comprehension to capture all the words in a sentence.\n\n### Input:\nThe quick brown fox jumps over the lazy dog\n\n### Response:"}, {"role": "assistant", "content": "```python\n{word: word for word in sentence.split()}\n```"}]}
{"dataset": "code_medium", "id": "code_medium_834", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a new array called 'arr2' by combining the elements of two existing arrays 'arr1' and 'arr2'. Both arrays should be of the same size.\n\n### Input:\narr1 = [1, 2, 3]\narr2 = [4, 5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\narr2 = []\nfor i in range(len(arr1)):\n    arr2.append(arr1[i] + arr2[i])\nprint(arr2)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_835", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a class in Python that can calculate the volume of a cube given its side length.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Cube(object):\n    \n    def __init__(self, side_length):\n        self.side_length = side_length\n    \n    \n    def calculate_volume(self):\n        return self.side_length * self.side_length * self.side_length\n```"}]}
{"dataset": "code_medium", "id": "code_medium_836", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest an algorithm to sum values of pairs in an array.\n\n### Input:\narr = [2, 3, 5, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef array_sum(arr):\n    sum = 0\n    for i in range(0, len(arr)-1, 2):\n        sum += arr[i] + arr[i+1]\n    return sum\n```"}]}
{"dataset": "code_medium", "id": "code_medium_837", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPreprocess a natural language text for text classification.\n\n### Input:\nText: \u201cThe food I ate yesterday was really amazing. I loved the entire experience.\u201d\n\n### Response:"}, {"role": "assistant", "content": "```python\ntext = \"The food I ate yesterday was really amazing. I loved the entire experience.\"\n \n# lowercase \ntext = text.lower() \n# remove punctuation \ntext = re.sub(r'[^\\w\\s]','',text) \n# remove digits \ntext = re.sub(r'\\d+','',text) \n# Tokenization \ntokens = word_tokenize(text) \n# Stopword removal \nfiltered_words = [word for word in tokens if word not in stopwords.words('english')] \n# Lemmatization\nlemmatizer = WordNetLemmatizer() \nlemmatized_word = [lemmatizer.lemmatize(word) for word in filtered_words] \nprint(lemmatized_word)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_838", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a for loop to iterate over the elements of a list and print the total number of elements.\n\n### Input:\nmylist = [1, 2, 3, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ntotal = 0\nfor i in mylist:\n    total += 1\nprint(\"The total number of elements is:\", total)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_839", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a decision tree to classify if a given student's grade ranges from A to D.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Decision Tree\ndef classify_grades_decision_tree(grade):\n    if grade in range(90, 101): # A range\n        return 'A'\n    elif grade in range(80,90): # B range\n        return 'B'\n    elif grade in range(70,80): # C range\n        return 'C'\n    elif grade in range(60,70): # D range\n        return 'D'\n    else:\n        return 'Error: Grade not in range'\n# Driver code\n# Testing\nprint(classify_grades_decision_tree(87)) # Output: B\n```"}]}
{"dataset": "code_medium", "id": "code_medium_840", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python named ``Rectangle`` with two attributes length and width.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Rectangle:\n    def __init__(self, length, width):\n        self.length = length\n        self.width = width\n```"}]}
{"dataset": "code_medium", "id": "code_medium_841", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given code to ensure it outputs appropriate messages for successful and unsuccessful output.\n\n### Input:\ndef handleInput(name):\n  if len(name) > 0:\n    print('Hello, ' + name)\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef handleInput(name):\n    if len(name) > 0:\n        print('Hello, ' + name)\n    else:\n        print('No name provided.')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_842", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a C# code snippet to print the product of two numbers.\n\n### Input:\nnum1 = 5\nnum2 = 7\n\n### Response:"}, {"role": "assistant", "content": "```python\nConsole.WriteLine(\"Product of two numbers is: \" + (num1 * num2));\n```"}]}
{"dataset": "code_medium", "id": "code_medium_843", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to format a given list of numbers with commas as thousands separators.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef format_numbers(nums):\n    formatted_nums = []\n    for num in nums:\n        formatted_nums.append(\"{:,}\".format(num))\n    return formatted_nums\n```"}]}
{"dataset": "code_medium", "id": "code_medium_844", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to remove all 'null' values from a nested dictionary.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_nulls(dictionary):\n    if isinstance(dictionary, dict):\n        return {key: remove_nulls(value) \n        for key, value in dictionary.items() if not value == None}\n    else:\n        return dictionary\n```"}]}
{"dataset": "code_medium", "id": "code_medium_845", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Flask web application to display a message.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef hello_world():\n    return 'Hello, World!'\nif __name__ == '__main__':\n    app.run()\n```"}]}
{"dataset": "code_medium", "id": "code_medium_846", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a neural network for regression\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport tensorflow as tf\n# create input layer\ninputs = tf.keras.Input(shape=(2,))\n# create the first layer of the network with 16 neurons\nfc1 = tf.keras.layers.Dense(16, activation=\"relu\")(inputs)\n# create the second layer of the network with 8 neurons\nfc2 = tf.keras.layers.Dense(8, activation=\"relu\")(fc1)\n# create the output layer of the network with 1 neuron (for regression)\noutputs = tf.keras.layers.Dense(1, activation=\"sigmoid\")(fc2)\n# create the model and compile it.\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\nmodel.compile(optimizer='Adam', loss='mse')\n```"}]}
{"dataset": "code_medium", "id": "code_medium_847", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to start a timer with the specified duration.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef start_timer(duration):\n    start_time = time.time()\n    end_time = start_time + duration\n    while time.time() < end_time:\n        time.sleep(1)\n    print(\"Timer finished!\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_848", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given an array of numbers. Create a function to check if the array contains duplicate values.\n\n### Input:\n11, 15, 40, 14, 11\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef contains_duplicates(arr):\n  unique_elements = set(arr)\n  if len(arr) != len(unique_elements):\n    return True\n  else:\n    return False\n```"}]}
{"dataset": "code_medium", "id": "code_medium_849", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a function in Python for selecting all rows from a Pandas DataFrame where a column value is equal to a given value.\n\n### Input:\ndf = pd.DataFrame({'A':[1, 2, 3, 4, 5],\n                   'B':[2, 3, 4, 5, 6],\n                   'C':[3, 4, 5, 6, 7],\n                   'D':[4, 5, 6, 7, 8]})\ncol_1 = 'A' \nvalue = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef select_rows(df, col_1, value): \n    return df[df[col_1] == value]\n```"}]}
{"dataset": "code_medium", "id": "code_medium_850", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given a string of symbols. Write a program to remove all the symbols and get a valid text string.\n\n### Input:\n\"This , is an example string %\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_symbols(string):\n  text_string = ''\n  for c in string:\n    if c.isalpha() or c.isdigit():\n      text_string += c\n  \n  return text_string\nprint(remove_symbols(\"This , is an example string %\"))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_851", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to read a code and count the number of lines of code.\n\n### Input:\ndef function(a, b):\n    c = a + b\n    d = a * b\n    return c + d\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_lines_of_code(code):\n    lines = code.splitlines()\n    return len(lines)\nif __name__ == '__main__':\n    code=\"\"\"\ndef function(a, b):\n    c = a + b\n    d = a * b\n    return c + d\n    \"\"\"\n    print(count_lines_of_code(code))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_852", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given list of numbers, find the sum of the numbers.\n\n### Input:\nnumbers = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ntotal = 0\nfor num in numbers:\n    total += num\nprint('The sum of the numbers is:', total)\n# Output: The sum of the numbers is: 15\n```"}]}
{"dataset": "code_medium", "id": "code_medium_853", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to detect the pattern of spikes in an EEG.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nDesign an algorithm to detect the pattern of spikes in an EEG\n\"\"\"\nimport numpy as np\ndef detect_spike_pattern(eeg_data):\n    # Compute power spectrum of the EEG data\n    power_spectra = np.abs(np.fft.rfft(eeg_data))\n    # Detect spikes by finding peaks in the power spectrum\n    spikes = np.where(power_spectra > np.mean(power_spectra) + np.std(power_spectra))[0]\n    # Construct the spike pattern using differences between consecutive spikes\n    pattern = [spikes[i+1] - spikes[i] for i in range(len(spikes)-1)]\n    return pattern\n```"}]}
{"dataset": "code_medium", "id": "code_medium_854", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python which takes in a list of numbers and returns the sum of all numbers.\n\n### Input:\n[1,2,3,4,5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef list_sum(num_list): \n \n    # initialize sum\n    Sum = 0\n \n    # traverse through all numbers\n    for num in num_list: \n        Sum += num \n  \n    # return Sum\n    return Sum \n  \n# test the above code\nlist1 = [1,2,3,4,5] \nprint(list_sum(list1)) \n# Output:\n15\n```"}]}
{"dataset": "code_medium", "id": "code_medium_855", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class for a bike which has a color, make and description as attributes.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Define a class for a bike\nclass Bike:\n def __init__(self, color, make, description): \n  self.color = color\n  self.make = make\n  self.description = description\n```"}]}
{"dataset": "code_medium", "id": "code_medium_856", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuppose a web page contains an unknown number of parameters. Write a function to count the number of parameters present in a given URL.\n\n### Input:\nhttps://www.example.com?query=environment&limit=10&sort=descending\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_parameters(url):\n    params = url.split('?')[-1]\n    return len(params.split('&'))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_857", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop in Python to multiply each element of a list with 10.\n\n### Input:\nlst = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef multiply_list(lst):\n    for i in range(len(lst)):\n        lst[i] *= 10\n    return lst\n```"}]}
{"dataset": "code_medium", "id": "code_medium_858", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code in Python to retrieve the top 10 Rated Movies in IMDB.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\nimport json\nurl = 'https://imdb-api.com/documentation/top-rated/all}'\nresponse = requests.get(url)\ndata = json.loads(response.text)\nmovies = data['results'][:10]\nfor movie in movies:\n    title = movie['title']\n    rating = movie['rating']\n    print(f\"{title}: {rating}\")\n```"}]}
{"dataset": "code_medium", "id": "code_medium_859", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAdd the following Python function to generate a Fibonacci sequence.\n\n### Input:\ndef fibonacci_sequence(n):\n    \"\"\"Generate a Fibonacci sequence up to n.\"\"\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci_sequence(n):\n    \"\"\"Generate a Fibonacci sequence up to n.\"\"\"\n    result = []\n    first, second = 0, 1\n    while first < n:\n        result.append(first)\n        first, second = second, first + second\n    \n    return result\n```"}]}
{"dataset": "code_medium", "id": "code_medium_860", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program to calculate the area of a triangle given its three sides.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Function to calculate area of triangle  \ndef calculateArea(a, b, c): \n     \n    # Calculating the semi-perimeter of triangle  \n    s = (a + b + c) / 2\n  \n    # Calculate the area  \n    area = (s*(s - a)*(s - b)*(s - c)) ** 0.5    \n    \n    return area \n# Driver code  \na = 5\nb = 6\nc = 7\nprint(\"Area of triangle is %0.2f\" %calculateArea(a, b, c))\n```"}]}
{"dataset": "code_medium", "id": "code_medium_861", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to find the powers of two in a given range.\n\n### Input:\nRange:  0 to 20\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef powers_of_two(start, end):\n    powers = []\n    current_power = 1\n    while current_power < end:\n        if current_power >= start: \n            powers.append(current_power)\n        current_power *= 2\n    return powers\n```"}]}
{"dataset": "code_medium", "id": "code_medium_862", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to replace the first letter of a string with an underscore (_).\n\n### Input:\nstring = \"Hello World!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nstring = list(string)\nstring[0] = '_'\nstring = ''.join(string)\nprint(string) # Output: _ello World!\n```"}]}
{"dataset": "code_medium", "id": "code_medium_863", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUtilize a regular expression to match all words that begin with 'b' in a given text.\n\n### Input:\ntext = \"The quick brown fox jumps over the lazy dog.\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\ntext = \"The quick brown fox jumps over the lazy dog.\"\nword_list = re.findall(r\"\\b[bB]\\w+\", text)\nprint(word_list)\n# output: ['brown', 'fox', 'b jumps', 'b lazy']\n```"}]}
{"dataset": "code_medium", "id": "code_medium_864", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to find the n-th Fibonacci number for a given n\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_fibonacci(n):\n    a, b = 0, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b\n```"}]}
{"dataset": "code_medium", "id": "code_medium_865", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a loop to print out all odd number from 0 to 10.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(0, 11): \n    if i % 2 != 0:\n        print(i)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_866", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to take a float input and output its binary equivalent.\n\n### Input:\n25.68\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef floatToBin(num):\n    whole, decimal = str(num).split(\".\")   \n    whole = int(whole)\n    decimal = int (decimal) \n    res = bin(whole).lstrip(\"0b\")+\".\"\n    for x in range(10):\n        decimal *= 2\n        res += str(decimal//1)\n        decimal %= 1\n    return res \n \n# Driver code  \nnumber = 25.68\nprint(floatToBin(number)) # returns '11001.1011'\n```"}]}
{"dataset": "code_medium", "id": "code_medium_867", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to display the number of days between two given dates.\n\n### Input:\nDate 1: 21 May 2020\nDate 2: 13 June 2020\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport datetime \nstart_date = datetime.date(2020, 5, 21)\nend_date = datetime.date(2020, 6, 13)\ndelta = end_date - start_date\nprint(\"Number of days between two dates:\", delta.days)\n```"}]}
{"dataset": "code_medium", "id": "code_medium_868", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the comment as a guide, fill in the gaps in the following code.\n\n### Input:\ninput_list = [1, 2, 3, 4]\n\ndef transform_list (input_list):\n    '''Transform the list by adding 5 to each element'''\n    # TODO\n\n### Response:"}, {"role": "assistant", "content": "```python\ninput_list = [1, 2, 3, 4]\ndef transform_list (input_list):\n    '''Transform the list by adding 5 to each element'''\n    transformed_list = [x+5 for x in input_list]\n    return transformed_list\n```"}]}
{"dataset": "code_medium", "id": "code_medium_869", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a student and their GPA.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Student:\n    def __init__(self, name, gpa):\n        self.name = name\n        self.gpa = gpa\n    def get_name(self):\n        return self.name\n    def get_gpa(self):\n        return self.gpa\n```"}]}
