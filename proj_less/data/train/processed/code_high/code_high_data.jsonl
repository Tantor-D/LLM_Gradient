{"dataset": "code_high", "id": "code_high_0", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that sorts a list in ascending order using Bubble Sort algorithm.\n\n### Input:\nmy_list = [4, 6, 3, 9, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(list):\n    for i in range(len(list)):\n        for j in range(i+1, len(list)):\n            if list[i] > list[j]:\n                list[i], list[j] = list[j], list[i]\n    return list\nmy_list = [4, 6, 3, 9, 1]\nprint(bubble_sort(my_list))\n```"}]}
{"dataset": "code_high", "id": "code_high_1", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm that sorts an array from lowest to highest numbers using the bubble sort approach.\n\n### Input:\n[5, 1, 7, 3, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubblesort(arr):\n    for i in range(len(arr)-1, 0, -1): \n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\nmy_list = [5, 1, 7, 3, 2]  \nbubblesort(my_list) \nprint(my_list)\n# Output: [1, 2, 3, 5, 7]\n```"}]}
{"dataset": "code_high", "id": "code_high_2", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to simulate Conway\u2019s Game of Life.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nWrite a code to simulate Conway\u2019s Game of Life\n\"\"\"\nimport numpy as np\ndef conways_game_of_life(state, iterations):\n    # make a copy of the game state\n    game_state = np.copy(state)\n    # loop over the number of iterations\n    for _ in range(iterations):\n        # calculate the number of neighbors for each cell\n        num_neighbors = (game_state[0:-2,0:-2] + game_state[0:-2,1:-1] + game_state[0:-2,2:] +\n                        game_state[1:-1,0:-2] + game_state[1:-1,2:] +\n                        game_state[2:,0:-2] + game_state[2:,1:-1] + game_state[2:,2:]).astype(np.uint8)\n        # decide if a cell should live or die based on the number of neighbors\n        game_state[1:-1, 1:-1][(num_neighbors == 2) | (num_neighbors == 3)] = 1\n        game_state[1:-1, 1:-1][(num_neighbors != 2) & (num_neighbors != 3)] = 0\n    # return the modified current state\n    return game_state\n```"}]}
{"dataset": "code_high", "id": "code_high_3", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to perform in-place array rotation.\n\n### Input:\narr = [1, 2, 3, 4, 5]\nrotation = 2\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef rotate_in_place(arr, rotation):\n    rotation %= len(arr)\n    \n    start = 0\n    count = 0\n    while count < len(arr):\n        current_index = start\n        current_value = arr[start]\n        next_index = (current_index + rotation) % len(arr)\n        while next_index != start:\n            next_value = arr[next_index]\n            arr[next_index] = current_value\n            current_index = next_index\n            current_value = next_value\n            next_index = (current_index + rotation) % len(arr)\n            count += 1\n        arr[start] = current_value\n        start += 1\n        count += 1\n```"}]}
{"dataset": "code_high", "id": "code_high_4", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the Levenshtein distance algorithm in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nImplementing the Levenshtein distance algorithm in Python\n\"\"\"\ndef levenshtein(word1, word2):\n    \"\"\"Calculate the Levenshtein distance between two words\"\"\"\n    size_x = len(word1) + 1\n    size_y = len(word2) + 1\n    matrix = [[0 for i in range(size_x)] for j in range(size_y)] \n    for x in range(size_x):\n        matrix[0][x] = x\n    for y in range(size_y):\n        matrix[y][0] = y\n    for x in range(1, size_x):\n        for y in range(1, size_y):\n            if word1[x-1] == word2[y-1]:\n                matrix[y][x] = min(\n                    matrix[y-1][x] + 1,\n                    matrix[y-1][x-1],\n                    matrix[y][x-1] + 1\n                )\n            else:\n                matrix[y][x] = min(\n                    matrix[y-1][x] + 1,\n                    matrix[y-1][x-1] + 1,\n                    matrix[y][x-1] + 1\n                )\n    return matrix[size_y-1][size_x-1]\n```"}]}
{"dataset": "code_high", "id": "code_high_5", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input as a guide, write code that prints out a copy of the 2d matrix with its elements transposed.\n\n### Input:\nmatrix = [[1,2,3],[4,5,6],[7,8,9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef transpose_matrix(matrix):\n    \"\"\"Function to transpose 2d list matrix\"\"\"\n    row = len(matrix) \n    col = len(matrix[0]) \n  \n    transpose = [[0 for j in range(row)] for i in range(col)] \n  \n    for i in range(row): \n        for j in range(col): \n            transpose[j][i] = matrix[i][j] \n  \n    for i in range(col): \n        print(transpose[i]) \nif __name__ == '__main__':\n    matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    transpose_matrix(matrix)\n```"}]}
{"dataset": "code_high", "id": "code_high_6", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to return a list of prime numbers in the given range.\n\n### Input:\nStart: 10. End: 15\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_prime_numbers(start, end):\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                prime_numbers.append(num)\n    return prime_numbers\n    \n# print list of prime numbers\nprint(get_prime_numbers(10, 15))  \n# Output: [11, 13, 15]\n```"}]}
{"dataset": "code_high", "id": "code_high_7", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to sort an array using Quick Sort.\n\n### Input:\nArray: [5, 3, 6, 2, 1, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quickSort(arr, low, high):\n    # Base case\n    if low >= high:\n        return\n    # Pivot is the middle element\n    pivot = arr[(low + high) // 2]\n    i = low # Left pointer\n    j = high # Right pointer\n    while i <= j:\n        # If the current value is smaller or equal than the pivot\n        while arr[i] < pivot:\n            i += 1\n        # If the current value is larger than the pivot\n        while arr[j] > pivot:\n            j -= 1\n        # If values are not in the correct order\n        if i <= j:\n            arr[i], arr[j] = arr[j], arr[i]\n            i += 1\n            j -= 1\n    # Recursively sort the left and right halves\n    quickSort(arr, low, j)\n    quickSort(arr, i, high)\narr = [5, 3, 6, 2, 1, 4]\nquickSort(arr, 0, len(arr)-1)\nprint(arr)\nOutput: [1, 2, 3, 4, 5, 6]\n```"}]}
{"dataset": "code_high", "id": "code_high_8", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a matrix, write a program to rotate it by 90 degrees clockwise.\n\n### Input:\nmatrix = [[1,2,3], \n          [4,5,6], \n          [7,8,9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef rotateMatrix(matrix):\n    N = len(matrix[0])\n    for i in range(N // 2):\n        for j in range(i, N - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[N - 1 - j][i]\n            matrix[N - 1 - j][i] = matrix[N - 1 - i][N - 1 - j]\n            matrix[N - 1 - i][N - 1 - j] = matrix[j][N - 1 - i]\n            matrix[j][N - 1 - i] = temp\nrotateMatrix(matrix)\n```"}]}
{"dataset": "code_high", "id": "code_high_9", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code to save the first ten prime numbers in an array.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# prime number sieve\ndef prime_numbers(n): \n \n    prime = [True for i in range(n+1)] \n    p = 2\n    while (p * p <= n): \n        if (prime[p] == True): \n            for i in range(p * p, n+1, p): \n                prime[i] = False\n        p += 1\n  \n    prime_numbers = []\n    for p in range(2, n): \n        if prime[p]: \n            prime_numbers.append(p)\n    return prime_numbers[:10]\n  \nif __name__ == \"__main__\":\n    n = 100\n    print(prime_numbers(n))\n```"}]}
{"dataset": "code_high", "id": "code_high_10", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind all the prime factors of a given integer.\n\n### Input:\n100\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_factors(n):\n    # Empty list to store prime factors \n    lst = [] \n    \n    # Divide by 2 while the number is \n    # divisible by 2  \n    while n % 2 == 0: \n        lst.append(2)\n        n = n / 2\n          \n    # n must be odd, now \n    # check all the numbers from 3 to \n    # the square root of n  \n    for i in range(3, int(n**0.5)+1): \n        # check for divisibility of i by n  \n        while n % i== 0: \n            lst.append(i) \n            n = n / i \n          \n    # If n is a prime number then it \n    # will only be divisible by itself  \n    if n > 2:\n        lst.append(n)\n      \n    return lst\n# Test  \nprint(prime_factors(100))\n# Output\n[2, 2, 5, 5]\n```"}]}
{"dataset": "code_high", "id": "code_high_11", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code to use loop instead of recursion.\n\n### Input:\ndef longest_substring(input_string):\n    if len(input_string) <= 1:\n        return input_string\n    else:\n        first_letter = input_string[0]\n        rest_substring = input_string[1:]\n        sub_string = longest_substring(rest_substring)\n        if first_letter in sub_string:\n            return sub_string\n        else:\n            return first_letter + sub_string\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_substring(input_string):\n    longest_substring = \"\"\n    for i in range(len(input_string)):\n        current_substring = \"\"\n        for j in range(i, len(input_string)):\n            if input_string[j] not in current_substring:\n                current_substring += input_string[j]\n            else:\n                break\n        if len(current_substring) > len(longest_substring):\n            longest_substring = current_substring\n    return longest_substring\n```"}]}
{"dataset": "code_high", "id": "code_high_12", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to search for a particular node in a binary tree using breadth-first search.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef breadthFirstSearch(root, target):\n    if root is None:\n        return False\n    \n    queue = [root]\n    while len(queue) > 0:\n        node = queue.pop(0)\n        if node.val == target:\n            return True\n        if node.left is not None:\n            queue.append(node.left)\n        if node.right is not None:\n            queue.append(node.right)\n    return False\n```"}]}
{"dataset": "code_high", "id": "code_high_13", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to find the maximum substring in the given string.\n\n### Input:\nabcadefghi\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef findMaxSubstring(string):\n    max_len = 0\n    max_substring = \"\"\n    for i in range(len(string)):\n        current_substring = []\n        for j in range(i, len(string)):\n            if string[j] not in current_substring:\n                current_substring.append(string[j])\n            else:\n                break\n        if len(current_substring) > max_len:\n            max_len = len(current_substring)\n            max_substring = ''.join(current_substring)\n    return max_substring\n```"}]}
{"dataset": "code_high", "id": "code_high_14", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a custom min-heap data structure in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass MinHeap:\n    def __init__(self):\n        self.heap = [] \n \n    def parent(self, i): \n        return (i-1)/2 \n \n    def insertKey(self, k): \n        self.heap.append(k) # Insert the new element at the end of the heap \n        i = len(self.heap)-1 \n        self.heapifyup(i) \n  \n    def heapifyup(self, i): \n        # If the current node is smaller than the parent node \n        # Swap the two nodes \n        if i != 0 and self.heap[int(self.parent(i))] > self.heap[i]: \n            self.heap[int(self.parent(i))], self.heap[i] = self.heap[i], self.heap[int(self.parent(i))]\n            self.heapifyup(self.parent(i))\n  \n    def remove(self):\n        # Get the value of the root node \n        root = self.heap[0] \n        # Move the last element of the heap to the top \n        self.heap[0] = self.heap[-1] \n        # Delete the last element of the heap \n        self.heap.pop()\n        if len(self.heap) > 0:\n            self.heapifydown(0)\n        return root\n  \n    def heapifydown(self, i):\n        # Get the left and right indices \n        left = 2*i+1\n        right = 2*i+2\n        small = i # Make the current node the small node \n  \n        # Compare the left child with the small node \n        if left < len(self.heap) and self.heap[left] < self.heap[small]:\n            small = left\n  \n        # Compare the right child with the small node \n        if right < len(self.heap) and self.heap[right] < self.heap[small]:\n            small = right\n \n        # If any of the children of the current node is smaller than \n        # the current node, then swap the current node with the small node \n        if small != i:\n            self.heap[small], self.heap[i] = self.heap[i], self.heap[small] \n            self.heapifydown(small)\n```"}]}
{"dataset": "code_high", "id": "code_high_15", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you sort an array of integers using Merge Sort algorithm?\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_sort(arr): \n    # Base case: if the list has 0 or 1 elements it is already sorted \n    if len(arr) > 1: \n        mid = len(arr)//2 \n        # Split the array \n        left = arr[:mid]  \n        right = arr[mid:]  \n  \n        # Recursively call merge_sort on left and right half\n        merge_sort(left) \n        merge_sort(right) \n  \n        # Set up variables to help track merges\n        i = 0 # left array index \n        j = 0 # right array index \n        k = 0 # result array index \n  \n        # Merge the two halves \n        while i < len(left) and j < len(right): \n            if left[i] < right[j]: \n                arr[k] = left[i] \n                i+=1 \n            else: \n                arr[k] = right[j] \n                j+=1 \n            k+=1\n          \n        # Copy the rest of the left half and right half \n        while i < len(left): \n            arr[k] = left[i] \n            i+=1\n            k+=1\n          \n        while j < len(right): \n            arr[k] = right[j] \n            j+=1\n            k+=1\n```"}]}
{"dataset": "code_high", "id": "code_high_16", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput an array that contains all the unique elements from two input arrays\n\n### Input:\narr1 = [1, 2, 3], arr2 = [2, 3, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef unique_elements(arr1, arr2):\n    res = [] \n    i = j = 0\n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] == arr2[j]: \n            i += 1\n            j += 1\n        elif arr1[i] < arr2[j]: \n            res.append(arr1[i]) \n            i += 1\n        else: \n            res.append(arr2[j]) \n            j += 1\n    res.extend(arr1[i:]) \n    res.extend(arr2[j:]) \n    return list(set(res))\n```"}]}
{"dataset": "code_high", "id": "code_high_17", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you write a function in Python for generating a Fibonacci sequence?\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_18", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to detect whether an array is sorted in a given order.\n\n### Input:\narray = [1, 2, 4, 7, 10, 11]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_sorted(arr, order = \"asc\"):\n    #check if array is sorted in ascending or descending order\n    if order == \"asc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] > arr[i+1]:\n                return False\n    elif order == \"desc\":\n        for i in range(0, len(arr)-1):\n            if arr[i] < arr[i+1]:\n                return False\n    else:\n        print(\"Error: Invalid sort order!\")\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_19", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nReorder a given array in specialized order\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reorder_array(arr):\n    \"\"\"\n    Reorder a given array in specialized order\n    :param arr: the input array to reorder\n    :return: the reordered array\n    \"\"\"\n    # determine the size of the array\n    n = len(arr)\n    \n    # create a new array to store the reordered results\n    reordered = [0] * n\n    \n    # loop through the array \n    for i in range(n):\n        # calculate the position of the current element\n        pos = 2 * (arr[i] % (1 + n // 2))\n        # find the first vacant position in the new array\n        while reordered[pos] != 0:\n            pos += 1\n        # assign the current element to the vacant position\n        reordered[pos] = arr[i]\n    \n    return reordered\n```"}]}
{"dataset": "code_high", "id": "code_high_20", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the square root of a number using bisection search.\n\n### Input:\nnumber = 9\n\n### Response:"}, {"role": "assistant", "content": "```python\nlow = 0\nhigh = number\nanswer = (high + low) / 2\n#Store the difference between the answer and the number\ndiff = (answer ** 2) - number\n#Loop until the difference is within a very small tolerance\nwhile abs(diff) > 0.00001:\n    if diff > 0:\n        #the answer is too high\n        high = answer\n    else:\n        #the answer is too low\n        low = answer\n    #compute a new answer\n    answer = (high + low) /2\n    #and compute a new diff\n    diff = (answer ** 2) - number\nprint(answer)\n```"}]}
{"dataset": "code_high", "id": "code_high_21", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompress the following string using a Huffman algorithm.\n\n### Input:\n\"aaaaaaaaabccddddee\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport heapq\ndef huffman_encode(string):\n    freq = {}\n    for c in string:\n        freq[c] = freq.get(c, 0) + 1\n    \n    heap = [[weight, [char, \"\"]] for char, weight in freq.items()]\n    heapq.heapify(heap)\n    while len(heap) > 1:\n        low = heapq.heappop(heap)\n        high = heapq.heappop(heap)\n        for pair in low[1:]:\n            pair[1] = '0' + pair[1]\n        for pair in high[1:]:\n            pair[1] = '1' + pair[1]\n        heapq.heappush(heap, [low[0] + high[0]] + low[1:] + high[1:])\n    \n    encoded = \"\"\n    codes = dict()\n    for char, code in heap[0][1:]:    \n        codes[char] = code\n        encoded += code\n    return codes, encoded\nif __name__ == '__main__':\n    string = \"aaaaaaaaabccddddee\"\n    codes, encoded = huffman_encode(string)\n    print(encoded)\n```"}]}
{"dataset": "code_high", "id": "code_high_22", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to sort a list of numbers using merge sort.\n\n### Input:\nmyList = [4, 8, 2, 3, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef mergeSort(myList): \n    if len(myList) >1: \n        mid = len(myList)//2 #Finding the mid of the array \n        L = myList[:mid] # Dividing the array elements  \n        R = myList[mid:] # into 2 halves \n  \n        mergeSort(L) # Sorting the first half \n        mergeSort(R) # Sorting the second half \n  \n        i = j = k = 0\n          \n        # Copy data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                myList[k] = L[i] \n                i+= 1\n            else: \n                myList[k] = R[j] \n                j+= 1\n            k+= 1\n          \n        # Checking if any element was left \n        while i < len(L): \n            myList[k] = L[i] \n            i+= 1\n            k+= 1\n          \n        while j < len(R): \n            myList[k] = R[j] \n            j+= 1\n            k+= 1\n```"}]}
{"dataset": "code_high", "id": "code_high_23", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper that can collect data from the same web page.\n\n### Input:\nhttps://example.com/movies\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nA web scraper that can collect data from the same web page\n\"\"\"\nimport requests\nfrom bs4 import BeautifulSoup\ndef get_data(url):\n    response = requests.get(url)\n    parser = BeautifulSoup(response.text, 'html.parser')\n    movies = parser.find_all('div', {'class': 'movie-card'})\n    data = []\n    for movie in movies:\n        title = movie.find('h3').get_text()\n        year = movie.find('div', {'class': 'movie-year'}).get_text()\n        rating = movie.find('div', {'class': 'movie-rating'}).get_text()\n        data.append({\n            'title': title,\n            'year': year,\n            'rating': rating\n        })\n    return data\nif __name__ == \"__main__\":\n    data = get_data('https://example.com/movies')\n    print(data)\n```"}]}
{"dataset": "code_high", "id": "code_high_24", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a function to flatten a dictionary.\n\n### Input:\n{\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef flatten_dict(d):\n\tflattened_dict = {}\n\tfor key, val in d.items():\n\t\tif type(val) is dict: # if val is a dict\n\t\t\tfor k, v in val.items():\n\t\t\t\tflattened_dict[key + \"_\" + k] = v\n\t\telse:\n\t\t\tflattened_dict[key] = val\n\treturn flattened_dict\nif __name__ == '__main__':\n\td = {\"a\": 1, \"b\": {\"c\": 2, \"d\": 3}}\n\tprint(flatten_dict(d))\n```"}]}
{"dataset": "code_high", "id": "code_high_25", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list of all the prime numbers in the range from 0 to the given number n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(n):\n    \"\"\"\n    This function will check if a given number is prime or not.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef generate_list_of_primes(n):\n    \"\"\"\n    This function will generate a list of all the prime numbers in the range from 0 to the given number n.\n    \"\"\"\n    primes = []\n    for i in range(2, n + 1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_26", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to throttle a stream of messages that exceeds a set limit of messages within a certain time window.\n\n### Input:\nlimit = 100\ntime_window = 5 seconds\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport time\ndef throttle_messages(limit, window):\n    count = 0\n    start = time.time()\n \n    while count < limit:\n        next_message = yield\n        count += 1\n         \n        end = time.time()\n        if (end - start) > window: \n            count = 0\n            start = end\n            \n    yield\n```"}]}
{"dataset": "code_high", "id": "code_high_27", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the Python library `pygame`, create a simple game where the player is able to move a character on screen using the arrow keys.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport pygame \npygame.init()  \n  \n# setting up the display window \nwin = pygame.display.set_mode((500, 500)) \n# creating a character that is used to move in the window \nx = 50 \ny = 50 \nvel = 5\n# The main game loop \nrun = True\nwhile run: \n  \n    # reacts to the event from keyboard \n    for event in pygame.event.get(): \n        if event.type == pygame.QUIT: \n            run = False\n          \n    # checks if the key pressed is left or right\n    # and moves the character accordingly \n    keys = pygame.key.get_pressed() \n    if keys[pygame.K_LEFT]: \n        x -= vel\n    if keys[pygame.K_RIGHT]: \n        x += vel\n    # draws the character at its x and y position \n    pygame.draw.rect(win, (255, 0, 0), (x, y, 40, 40))\npygame.quit()\n```"}]}
{"dataset": "code_high", "id": "code_high_28", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a matrix, write a program to fill it with zeroes in constant time and space complexity.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fill_matrix_zeros(matrix):\n    n, m = len(matrix), len(matrix[0])\n    col0_zero = False\n    for i in range(n):\n        if matrix[i][0] == 0:\n            col0_zero = True\n        for j in range(1, m):\n            if matrix[i][j] == 0:\n                matrix[i][0] = 0\n                matrix[0][j] = 0\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][0] == 0 or matrix[0][j] == 0:\n                matrix[i][j] = 0\n    if matrix[0][0] == 0:\n        for j in range(m):\n            matrix[0][j] = 0\n    if col0_zero:\n        for i in range(n):\n            matrix[i][0] = 0\n```"}]}
{"dataset": "code_high", "id": "code_high_29", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python to retrieve all elements in a given array that occur only once.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef singleOccurence(arr): \n    ans = []\n    for i in range(len(arr)): \n        count = 0\n        for j in range(len(arr)): \n            if arr[i] == arr[j]: \n                count+=1\n        if count == 1: \n            ans.append(arr[i]) \n    return ans\n```"}]}
{"dataset": "code_high", "id": "code_high_30", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find all pairs in a given list of numbers whose sum equals a given target number\n\n### Input:\nGiven List: [1, 4, 2, 9, 5]\nTarget number: 7\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_pairs_sum(numbers, target):\n    res = [] \n    for i in range(len(numbers)): \n        for j in range(i + 1, len(numbers)):\n            if numbers[i] + numbers[j] == target: \n                res.append([numbers[i], numbers[j]]) \n  \n    return res\n```"}]}
{"dataset": "code_high", "id": "code_high_31", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function to identify prime numbers between 0 and n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(n):\n    \"\"\"This function will check if a number is a prime number or not.\"\"\"\n    # Corner case \n    if n <= 1: \n        return False\n    # Check from 2 to n-1 \n    for i in range(2,n): \n        if n % i == 0: \n            return False\n    return True\nif __name__ == '__main__':\n    for n in range(2, 100):\n        if is_prime(n):\n            print(n)\n```"}]}
{"dataset": "code_high", "id": "code_high_32", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to remove all occurrences of string t from string s.\n\n### Input:\ns = 'The quick brown fox jumps over the lazy dog.'\nt = 'the'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_string(s, t):\n    if t not in s:\n        return s\n    s = s.lower()\n    t = t.lower()\n    indices = []\n    start = 0\n    while True:\n        index = s.find(t, start)\n        if index == -1:\n            break\n        indices.append(index)\n        start = index + 1\n    offset = 0\n    for index in indices:\n        s = s[:index - offset] + s[index - offset + len(t):]\n        offset += len(t)\n    return s\n```"}]}
{"dataset": "code_high", "id": "code_high_33", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function which converts a string representation of number in English to a numerical value.\n\n### Input:\n\"one thousand two hundred and thirty four\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a function which converts a string representation of number in English to a numerical value.\n\"\"\"\ndef convert_english_number(number_string):\n    word_values = {\"one\":1,\"two\":2,\"three\":3,\"four\":4,\"five\":5,\"six\":6,\"seven\":7,\"eight\":8,\"nine\":9,\"ten\":10,\"eleven\":11,\"twelve\":12,\"thirteen\":13,\"fourteen\":14,\"fifteen\":15,\"sixteen\":16,\"seventeen\":17,\"eighteen\":18,\"nineteen\":19,\"twenty\":20,\"thirty\":30,\"forty\":40,\"fifty\":50,\"sixty\":60,\"seventy\":70,\"eighty\":80,\"ninety\":90}\n    word_list = number_string.split()\n    final_num = 0\n    i=0\n    while i<len(word_list): \n        if word_list[i] in word_values.keys():\n            final_num += word_values[word_list[i]]\n        elif word_list[i]==\"hundred\":\n            final_num = final_num*100\n            \n        if(i+1<len(word_list) and word_list[i+1]==\"hundred\"):\n            final_num += word_values[word_list[i]]*100\n        i+=1\n    return final_num\nif __name__ == '__main__':\n    print(convert_english_number(\"one thousand two hundred and thirty four\"))\n```"}]}
{"dataset": "code_high", "id": "code_high_34", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate permutations of the given array of numbers.\n\n### Input:\nnumbers = [1, 2, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutations(arr):\n    # base case:\n    if len(arr) == 0:\n        return []\n \n    # base case: \n    if len(arr) == 1:\n        return [arr]\n \n    # find all permutations for arr of size n-1\n    smaller_permutations = permutations(arr[1:])\n \n    # find permutations for element at the index 0\n    current_element = arr[0]\n    permutations_for_current_element = []\n \n    # iterate smaller permutations\n    for per in smaller_permutations:\n        # create new permutation\n        for i in range(len(per)+1):\n            # copy original values\n            new_permutation = per[:]\n            # insert current element\n            new_permutation.insert(i, current_element)\n            permutations_for_current_element.append(new_permutation)\n \n    return permutations_for_current_element\n```"}]}
{"dataset": "code_high", "id": "code_high_35", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to classify a text as positive or negative.\n\n### Input:\ntext = \"This is an amazing product.\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef classify_text(text):\n  score = 0\n  words = text.split(\" \")\n  for word in words:\n    if word in positive_words:\n      score += 1\n    elif word in negative_words:\n      score -= 1\n  if score > 0:\n    return \"positive\"\n  elif score == 0:\n    return \"neutral\"\n  else:\n    return \"negative\"\n```"}]}
{"dataset": "code_high", "id": "code_high_36", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python program to find the longest increasing subsequence in a given array.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef long_increasing_subsequence(arr):\n    # Number of items in given array\n    n = len(arr)\n \n    # Initialize 'lengths' values for all indices\n    lengths = [1]*n\n \n    # Find the longest increasing subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i] and lengths[j] + 1 > lengths[i]:\n                lengths[i] = lengths[j] + 1\n \n    return lengths\n```"}]}
{"dataset": "code_high", "id": "code_high_37", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a simple calculator program.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculator():\n    number1 = int(input(\"Please enter first number: \"))\n    number2 = int(input(\"Please enter second number: \"))\n    print(\"Please choose operation -\\n\" \\\n          \"1. Add\\n\" \\\n          \"2. Subtract\\n\" \\\n          \"3. Multiply\\n\" \\\n          \"4. Divide\\n\") \n    choice = int(input(\"Enter your choice: \"))\n    if choice == 1:\n        ans = number1 + number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 2:\n        ans = number1 - number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 3:\n        ans = number1 * number2\n        print(\"Answer={}\".format(ans))\n    elif choice == 4:\n        ans = number1 / number2\n        print(\"Answer={}\".format(ans))\n    else:\n        print(\"Invalid Choice\")\n```"}]}
{"dataset": "code_high", "id": "code_high_38", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to find the maximum number of overlapping intervals.\n\n### Input:\n[[2, 3], [1, 5], [7, 10]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef maxOverlaps(intervals): \n    if len(intervals) == 0: \n        return 0\n  \n    # Sort intervals according to their starting time \n    intervals.sort(key = lambda x: x[0])\n  \n    # Creating an array that stores the number of \n    # overlapping intervals for each interval \n    result = [0] * len(intervals) \n  \n    # Initialising result[0] (as the first interval is always \n    # non-overlapping as it has no previous intervals) \n    result[0] = 1\n  \n    # Initializing the endpoint variable for comparison \n    endpoint = intervals[0][1] \n  \n    for i in range(1, len(intervals)): \n        # If the current interval's start time is less \n        # than or equal to the endpoint, it's overlapping \n        if intervals[i][0] <= endpoint: \n            # Store the maximum number of overlapping \n            # intervals \n            result[i] = result[i - 1] + 1\n        else: \n            result[i] = 1\n          \n        # Update the endpoint \n        endpoint = max(endpoint, intervals[i][1]) \n  \n    # Finding the maximum number of overlapping intervals \n    maximum_overlaps = max(result) \n  \n    return maximum_overlaps\n```"}]}
{"dataset": "code_high", "id": "code_high_39", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement Quicksort in Python to sort this list of integers.\n\n### Input:\n[8, 5, 3, 9, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\nsorted_arr = quicksort([8, 5, 3, 9, 1])\n \nprint(sorted_arr)\n```"}]}
{"dataset": "code_high", "id": "code_high_40", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a hashtable in Python of size 8 and insert five elements.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass HashTable:\n    def __init__(self, size):\n        self.size = size\n        self.table = [None] * size\n    def insert(self, key, value):\n        hash_value = hash(key)\n        index = hash_value%self.size\n        if self.table[index] == None:\n            self.table[index] = [key, value]\n        else:\n            self.table[index].append([key,value])\n    # Other methods go here\n# Create a hashtable\nht = HashTable(8)\n# Insert elements\nht.insert('apple', 5)\nht.insert('banana', 8)\nht.insert('strawberry', 11)\nht.insert('kiwi', 2)\nht.insert('mango', 6)\n```"}]}
{"dataset": "code_high", "id": "code_high_41", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script to generate the Fibonacci sequence up to a certain number.\n\n### Input:\nNumber of elements to generate: 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci_sequence(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    else:\n        lst = [1, 1]\n        while len(lst) < n:\n            lst.append(lst[-1] + lst[-2])\n        return lst\n```"}]}
{"dataset": "code_high", "id": "code_high_42", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that prints out the set of all prime divisors of a given number\n\n### Input:\nnum = 50\n\n### Response:"}, {"role": "assistant", "content": "```python\nprimes = []\nfor i in range(2, num+1):\n    is_prime = True\n    for j in range(2, int(i**0.5)+1):\n        if (i % j) == 0:\n            is_prime = False\n            break\n    if is_prime:\n        primes.append(i)\nprime_divisors = {i for i in primes if num % i == 0}\nprint(prime_divisors)\n```"}]}
{"dataset": "code_high", "id": "code_high_43", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the similarity between two given sentences using NLTK library.\n\n### Input:\nsentence1 = \"This has been an exciting journey\"\nsentence2 = \"It's been a thrilling ride\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport nltk\nfrom nltk.corpus import wordnet\nsentence1 = \"This has been an exciting journey\"\ns1 = nltk.word_tokenize(sentence1) \nsentence2 = \"It's been a thrilling ride\"\ns2 = nltk.word_tokenize(sentence2) \n# First we convert the words into their respective synonyms\nsyn1 = []\nfor word in s1:\n    for syn in wordnet.synsets(word): \n        for l in syn.lemmas(): \n            syn1.append(l.name())\nsyn2 = []\nfor word in s2:\n    for syn in wordnet.synsets(word): \n        for l in syn.lemmas(): \n            syn2.append(l.name())\n# Calculating similarity using Path_Similarity \nsimilarity = []\nfor word1 in syn1:\n    for word2 in syn2:\n        p_sim = wordnet.path_similarity(wordnet.synset(word1),wordnet.synset(word2))\n        similarity.append(p_sim)\n       \n# Calculate the average of all similarity scores\nresult = sum(similarity)/len(similarity)\n# Output\n0.6521739130434783\n```"}]}
{"dataset": "code_high", "id": "code_high_44", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, create a program that finds the longest subarray with a sum of 0.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_sum_zero(arr):\n    left = 0\n    max_len = 0\n    sum = 0\n    hash_map = dict()\n    for right in range(len(arr)):\n        sum += arr[right]\n        if sum == 0:\n            max_len = max(max_len, right - left + 1)\n        if sum in hash_map:\n            left = max(left, hash_map[sum] + 1)\n            max_len = max(max_len, right - left + 1)\n        hash_map[sum] = right\n    return max_len\n```"}]}
{"dataset": "code_high", "id": "code_high_45", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to implement Bubble Sort.\n\n### Input:\narr = [5, 8, 2, 4, 7, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(arr):\n    \"\"\"\n    Implementation of the Bubble Sort algorithm.\n    \"\"\"\n    for i in range(len(arr)-1):\n        for j in range(len(arr)-1-i):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_46", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program which calculates the median of an array.\n\n### Input:\n[3, 5, 4, 1, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a program which calculates the median of an array\n\"\"\"\ndef median(arr): \n    n = len(arr) \n    arr.sort() \n  \n    if n % 2 == 0: \n        return (arr[n//2] + arr[n//2-1])/2\n    else: \n        return arr[n//2]\nif __name__ == '__main__':\n    print(median([3, 5, 4, 1, 7]))\n```"}]}
{"dataset": "code_high", "id": "code_high_47", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Bubble Sort algorithm for a list of numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_48", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to categorize a given array of numbers into prime and composite numbers.\n\n### Input:\narr = [2, 5, 7, 11, 17, 21, 25]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(num):\n    # check prime\n    divisors = []\n    for x in range(1, num + 1):\n        if (num % x == 0):\n            divisors.append(x)\n    if len(divisors) == 2:\n        return True\n    else:\n        return False\ndef categorize_numbers(arr):\n    prime_nums = []\n    composite_nums = []\n    for number in arr:\n        if is_prime(number):\n            prime_nums.append(number)\n        else:\n            composite_nums.append(number)\n    return prime_nums, composite_nums\n    \nprime_nums, composite_nums = categorize_numbers(arr)\nprint(\"Prime numbers in arr:\", prime_nums)\nprint(\"Composite numbers in arr:\", composite_nums)\n```"}]}
{"dataset": "code_high", "id": "code_high_49", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a given list in increasing order.\n\n### Input:\nmy_list = [3, 4, 2, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_list(my_list):\n    \"\"\"Function to sort the list in increasing order\"\"\"\n    for i in range(len(my_list)):\n        min_idx = i\n        for j in range(i+1, len(my_list)):\n            if my_list[min_idx] > my_list[j]:\n                min_idx = j\n        my_list[i], my_list[min_idx] = my_list[min_idx], my_list[i]\n    return my_list\n    \nif __name__ == '__main__':\n    my_list = [3, 4, 2, 6]\n    sorted_list = sort_list(my_list)\n    print(sorted_list)  # [2, 3, 4, 6]\n```"}]}
{"dataset": "code_high", "id": "code_high_50", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following code in to a recursive function.\n\n### Input:\ndef calculate_fibonacci(n):\n    a, b = 0, 1\n    for i in range(1, n+1):\n        a, b = b, a + b\n    return a\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_fibonacci(n):\n    if n < 0:\n        print(\"Incorrect input\")\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return calculate_fibonacci(n-1) + calculate_fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_51", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script which checks if an input string is a palindrome.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_palindrome(input_string):\n    input_string = input_string.lower()\n    if len(input_string) == 0:\n        return False\n    if len(input_string) == 1:\n        return True\n    if input_string[0] == input_string[-1]:\n        return is_palindrome(input_string[1:-1])\n    return False\n# Usage \nstring = 'RADAR'\nresult = is_palindrome(string)\nprint(result) # Output: True\n```"}]}
{"dataset": "code_high", "id": "code_high_52", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to print out all the prime numbers between 2 and 10.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# initialize an empty list to store prime numbers\nprime_numbers = []\n# Iterate over the range from 2 to 10\nfor num in range(2, 11):\n    cnt = 0\n    # check if the number is divisible by any natural number from 2 to num-1\n    for i in range(2, num):\n        if num % i == 0:\n            cnt += 1\n    # if the number is not divisible by any of the numbers then add to the list\n    if cnt == 0:\n        prime_numbers.append(num)\nprint(prime_numbers) # prints [2, 3, 5, 7]\n```"}]}
{"dataset": "code_high", "id": "code_high_53", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to solve this DP(Dynamic Programming) problem from LeetCode.\n\n### Input:\nYou are given coins of different denominations and a total amount of money. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef coinChange(coins, amount):\n    dp = [float(\"inf\")] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n    if dp[amount] == float(\"inf\"):\n        return -1\n    return dp[amount]\n```"}]}
{"dataset": "code_high", "id": "code_high_54", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes a sentence and returns the string with all occurrences of the longest word removed.\n\n### Input:\n\"This is a very long sentence\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_longest_word(sentence): \n    # Split the sentence into words \n    words = sentence.split(' ')\n    # Find the longest word \n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word): \n            longest_word = word \n    # Remove all occurrences of the longest word\n    new_sentence = [] \n    for word in words:\n        if word != longest_word: \n            new_sentence.append(word) \n    \n    # Join the list back into a string and return it \n    return \" \".join(new_sentence)\nprint(remove_longest_word(\"This is a very long sentence\")) # This is a sentence\n```"}]}
{"dataset": "code_high", "id": "code_high_55", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes a number \"n\" as an argument and returns the nth Fibonacci number\n\n### Input:\nn = 15\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    else: \n        return fibonacci(n-1) + fibonacci(n-2) \n  \nfibonacci(15)\n```"}]}
{"dataset": "code_high", "id": "code_high_56", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an array of all the prime numbers up to 50.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \nprime_array = []\nfor i in range(2, 51):\n    if is_prime(i):\n        prime_array.append(i)\n```"}]}
{"dataset": "code_high", "id": "code_high_57", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.\n\n### Input:\nString 1: \"Hello World\" \nString 2: \"World Hello\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a function which receives two strings and checks if the characters in the first string appear in the same order as in the second string.\n\"\"\"\ndef check_order(str1,str2): \n    stack=[]\n    j=0\n    for i in range(len(str2)): \n        if str2[i]==str1[j]: \n            stack.append(str2[i]) \n            j+=1\n            if stack==str1: \n                return True\n                \n    return False\nif __name__ == '__main__': \n    str1 = \"Hello World\"\n    str2 = \"World Hello\"\n    print(check_order(str1,str2))\n```"}]}
{"dataset": "code_high", "id": "code_high_58", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given a string s, output the longest substring with no repeating characters.\n\n### Input:\ns = \"abcabcbb\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_substring(s):\n    length = len(s)\n    current_length = 1\n    last_occur= {s[0]:0 }\n    max_length = 0\n    i = 0 \n    while i < length:\n        if(s[i] in last_occur):\n            current_length = i - last_occur[s[i]]\n            if(current_length > max_length):\n                max_length = current_length\n            last_occur[s[i]] = i\n        else:\n            last_occur[s[i]] = i\n            current_length += 1\n            if(current_length > max_length):\n                max_length = current_length\n        i += 1\n    return max_length\nlongest_substring(s)\n3\n```"}]}
{"dataset": "code_high", "id": "code_high_59", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to input a number and prints out its prime factorization\n\n### Input:\n24\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_factors(num):\n    factors = list()\n    x = 2\n    while x * x <= num:\n        while num % x == 0:\n            factors.append(x)\n            num /= x\n        x += 1\n    if num > 1:\n        factors.append(num)\n    return factors\nprint(prime_factors(24))\n```"}]}
{"dataset": "code_high", "id": "code_high_60", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code for sorting an array in-place.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quicksort(arr):\n    \"\"\"This function takes an array as parameter and sorts it in-place\"\"\"\n    if len(arr) <= 1:\n        return\n    pivot = arr[0]\n    left, right = [], []\n    for i in range(1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    quicksort(left)\n    quicksort(right)\n    arr[:] = left + [pivot] + right\n```"}]}
{"dataset": "code_high", "id": "code_high_61", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a TensorFlow program for a linear regression model.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport tensorflow as tf\n# Create variables\na = tf.Variable(0.5)\nb = tf.Variable(0.5)\n# > Create the input data, y and x\nx = tf.placeholder(tf.float32)\ny = tf.placeholder(tf.float32)\n# > Model: y = ax + b\ny_pred = a * x + b\n# > Loss: Mean Squared Error (MSE)\nloss = tf.reduce_mean(tf.square(y_pred - y))\n# > Optimizer: Gradient Descent\ntrain_op = tf.train.GradientDescentOptimizer(0.01).minimize(loss)\n# > Initialize all variables\ninit = tf.global_variables_initializer()\n# > Execute the graph\nwith tf.Session() as sess:\n    sess.run(init)\n    for step in range(200):\n        sess.run(train_op, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})\n        if (step + 1) % 20 == 0:\n            loss_val = sess.run(loss, {x: [1, 2, 3, 4], y: [2, 4, 6, 8]})\n            print(\"Step:\", step + 1, \" Loss:\", loss_val)\n```"}]}
{"dataset": "code_high", "id": "code_high_62", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a quick calculator in Python based on the user input.\n\n### Input:\n2 * 3 + 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quick_calc(string):\n    result = 0 \n    calculation = string.split(\" \")\n    for item in calculation:\n        try:\n            result += int(item)\n        except:\n            if item.lower() == \"*\":\n                result *= int(calculation[calculation.index(item) + 1])\n    return result\nprint(quick_calc(\"2 * 3 + 5\"))\n11\n```"}]}
{"dataset": "code_high", "id": "code_high_63", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the bottom up cut rod algorithm in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bottomUpCutRod(prices, n): \n \n    # Create an array of size n+1 \n    temp_array = [0 for i in range(n+1)] \n    for i in range(1, n+1): \n        tempval = -float('inf') \n        for j in range(i): \n            tempval = max(tempval, prices[j] + temp_array[i-j-1]) \n        temp_array[i] = tempval \n  \n    return temp_array[n]\n```"}]}
{"dataset": "code_high", "id": "code_high_64", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to perform binary search on a sorted array.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binarySearch(array, item):\n  low = 0\n  high = len(array) - 1\n  while low <= high:\n    mid = (low + high) // 2\n    guess = array[mid]\n    if guess == item:\n      return mid\n    if guess > item:\n      high = mid - 1\n    else:\n      low = mid + 1\n  return None\n```"}]}
{"dataset": "code_high", "id": "code_high_65", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify a given code to sort a two-dimensional array (matrix) using bubble sort.\n\n### Input:\nMatrix: \n[[1, 5, 2], \n[8, 4, 6],\n[3, 7, 9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(arr): \n    n = len(arr) \n    for i in range(n):\n        for j in range(0, n-i-1): \n            for k in range(0, 3): \n                if arr[j][k] > arr[j+1][k] : \n                    arr[j][k], arr[j+1][k] = arr[j+1][k], arr[j][k]\n  \narr = [[1, 5, 2], \n       [8, 4, 6], \n       [3, 7, 9]]\nbubble_sort(arr)\nprint(\"Sorted matrix: \") \nfor row in arr: \n    print(row)\n```"}]}
{"dataset": "code_high", "id": "code_high_66", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a recursive algorithm to generate the Fibonacci sequence.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n   if n<0: \n      print(\"Incorrect input\") \n   # First Fibonacci number is 0 \n   elif n==0: \n      return 0\n   # Second Fibonacci number is 1 \n   elif n==1: \n      return 1\n   else: \n      return Fibonacci(n-1)+Fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_67", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that takes a given list and sorts them using heapsort.\n\n### Input:\narr = [1, 6, 5, 4, 8, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef heapsort(arr):\n    # Build the max heapify \n    n = len(arr) \n    for i in range(n, -1, -1): \n        heapify(arr, n, i) \n    # One by one extract elements \n    for i in range(n-1, 0, -1): \n        arr[i], arr[0] = arr[0], arr[i] # swap \n        heapify(arr, i, 0) \ndef heapify(arr, n, i): \n    largest = i # Initialize largest as root \n    l = 2 * i + 1     # left = 2*i + 1 \n    r = 2 * i + 2     # right = 2*i + 2 \n  \n    # check if left child of root exists and is \n    # greater than root \n    if l < n and arr[i] < arr[l]: \n        largest = l \n  \n    # check if right child of root exists and is \n    # greater than root \n    if r < n and arr[largest] < arr[r]: \n        largest = r \n  \n    # Change root, if needed \n    if largest != i: \n        arr[i],arr[largest] = arr[largest],arr[i] # swap \n  \n        # Heapify the root. \n        heapify(arr, n, largest) \n# Driver code \nif __name__ == \"__main__\":\n    arr = [1, 6, 5, 4, 8, 2]\n    heapsort(arr) \n    n = len(arr) \n    print (\"Sorted array is\") \n    for i in range(n): \n        print (\"%d\" %arr[i]),\n```"}]}
{"dataset": "code_high", "id": "code_high_68", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class for a grocery store inventory management system.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass GroceryInventory:\n    def __init__(self):\n        self.inventory = {}\n    def add_item(self, item, quantity):\n        if item not in self.inventory:\n            self.inventory[item] = quantity\n        else:\n            self.inventory[item] += quantity\n            \n    def remove_item(self, item, quantity):\n        if item in self.inventory:\n            self.inventory[item] -= quantity\n            if self.inventory[item] <= 0:\n                del self.inventory[item]\n    \n    def get_inventory(self):\n        return self.inventory\n```"}]}
{"dataset": "code_high", "id": "code_high_69", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function that takes a string of HTML tags in an input and removes the tags from the string\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef strip_tags(s):\n    tag = False\n    out = \"\"\n    for c in s:\n        if c == \"<\":\n            tag = True\n        elif c == \">\":\n            tag = False\n        elif not tag:\n            out += c\n    return out\n```"}]}
{"dataset": "code_high", "id": "code_high_70", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python Function to implement the game of Tic-Tac-Toe.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass GameState:\n    def __init__(self):\n        self.board = [[None, None, None],\n                      [None, None, None],\n                      [None, None, None]\n        ]\n    \n    def is_game_over(self):\n        b = self.board\n        # Check if a player won\n        if b[0][0] == b[0][1] == b[0][2] != None or b[1][0] == b[1][1] == b[1][2] != None or b[2][0] == b[2][1] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][0] == b[2][0] != None or b[0][1] == b[1][1] == b[2][1] != None or b[0][2] == b[1][2] == b[2][2] != None:\n            return True\n        elif b[0][0] == b[1][1] == b[2][2] != None or b[0][2] == b[1][1] == b[2][0] != None:\n            return True\n        # Check if the board is full\n        elif any(None in row for row in b):\n            return False\n        # All positions filled, no winner\n        else:\n            return True\n```"}]}
{"dataset": "code_high", "id": "code_high_71", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm that can efficiently search for an element in a given sorted array\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(arr, x):\n  start = 0\n  end = len(arr) - 1\n  while start <= end:\n    mid = start + (end - start)//2\n    if arr[mid] == x:\n      return mid\n    elif arr[mid] < x: \n      start = mid + 1\n    else: \n      end = mid - 1\n  return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_72", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the quicksort algorithm.\n\n### Input:\n[12, -6, 47, 18, 0, -3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quicksort(alist):\n    quicksort_helper(alist, 0, len(alist)-1)\ndef quicksort_helper(alist, first, last):\n    if first < last:\n        splitpoint = partition(alist, first, last)\n        quicksort_helper(alist, first, splitpoint-1)\n        quicksort_helper(alist, splitpoint+1, last)\ndef partition(alist, first, last):\n    pivot = alist[first]\n    leftmark = first+1\n    rightmark = last\n    done = False\n    while not done:\n        while leftmark <= rightmark and alist[leftmark] <= pivot:\n            leftmark = leftmark + 1\n        while alist[rightmark] >= pivot and rightmark >= leftmark:\n            rightmark = rightmark - 1\n        if rightmark < leftmark:\n            done = True\n        else:\n            temp = alist[leftmark]\n            alist[leftmark] = alist[rightmark]\n            alist[rightmark] = temp\n    temp = alist[first]\n    alist[first] = alist[rightmark]\n    alist[rightmark] = temp\n    return rightmark\n```"}]}
{"dataset": "code_high", "id": "code_high_73", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a user interface to display a chart showing the number of people of a certain gender and age group.\n\n### Input:\nSample JSON data to be used: \n\n[\n  {\n    \"name\": \"John\",\n    \"age\": 25,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jane\",\n    \"age\": 22,\n    \"gender\": \"female\"\n  },\n  {\n    \"name\": \"Bob\",\n    \"age\": 28,\n    \"gender\": \"male\"\n  },\n  {\n    \"name\": \"Jill\",\n    \"age\": 24,\n    \"gender\": \"female\"\n  }\n]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport json\nimport plotly.graph_objs as go\ndef create_chart():\n    data = json.load('data.json')\n    males = 0 \n    females = 0\n    male_ages = [0] * 100\n    females_ages = [0] * 100\n    # count males/females and age group \n    for person in data:\n        if person['gender'] == 'male':\n            males += 1\n            age = int(person['age'])\n            male_ages[age] += 1\n        else:\n            females += 1\n            age = int(person['age'])\n            females_ages[age] += 1\n    # create data\n    data = [\n        go.Bar(\n            name='Males',\n            x=list(range(100)),\n            y=male_ages\n        ),\n        go.Bar(\n            name='Females',\n            x=list(range(100)),\n            y=females_ages\n        )\n    ]\n    # Create Layout\n    layout = go.Layout(\n        title='Number of People by Gender and Age Group',\n        yaxis=dict(title='Number of People'),\n        xaxis=dict(title='Age')\n    )\n    # Create Figure\n    figure = go.Figure(data=data, layout=layout)\n    # Plot and save the chart\n    figure.show()\n    figure.write_image('gender_age.png')\ncreate_chart()\n```"}]}
{"dataset": "code_high", "id": "code_high_74", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the number of ways to make a change of N with coins of given denominations.\n\n### Input:\nN = 4; Coins = {1,2,3}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef change(n, coins): \n    m = len(coins) \n    table = [[0 for x in range(m)] for x in range(n+1)] \n    # Fill the entries for 0 value case (n = 0) \n    for i in range(m): \n        table[0][i] = 1\n    # Fill rest of the table entries in bottom-up manner \n    for i in range(1, n+1): \n        for j in range(m): \n            # Count of solutions including coins[j] \n            x = table[i - coins[j]][j] if i-coins[j] >= 0 else 0\n            # Count of solutions excluding coins[j] \n            y = table[i][j-1] if j >= 1 else 0 \n            # total count \n            table[i][j] = x + y \n    return table[n][m-1]\n```"}]}
{"dataset": "code_high", "id": "code_high_75", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes a string and returns the longest set of characters in descending order.\n\n### Input:\nHello World\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_substring(string):\n    longest = ''\n    current = ''\n    for i in range(len(string)):\n        if (i==0 or string[i] >= string[i-1]):\n            current += string[i]\n            if (len(current) > len(longest)):\n                longest = current\n        else:\n            current = string[i]\n    return longest\n```"}]}
{"dataset": "code_high", "id": "code_high_76", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement bubble sort in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n```"}]}
{"dataset": "code_high", "id": "code_high_77", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest an algorithm in Python for sorting an array of integers from smallest to largest.\n\n### Input:\nnums = [3, 7, 5, 6, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sortInts(nums): \n    # Traverse through all array elements \n    for i in range(len(nums)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(nums)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if nums[j] > nums[j+1] : \n                nums[j], nums[j+1] = nums[j+1], nums[j] \n                \n    return nums\n```"}]}
{"dataset": "code_high", "id": "code_high_78", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function that takes in 2 strings and returns a new string consisting of alternating characters from the strings passed in.\n\n### Input:\n\"hello\"\n\"world\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n#Implement a function that takes in 2 strings and returns a new string consisting of alternating characters\ndef alt_string(str1, str2):\n    alt_str = \"\" \n    length = len(str1) if len(str1) <= len(str2) else len(str2)\n    \n    for i in range(length):\n        alt_str += str1[i] + str2[i]\n    \n    if len(str1) > len(str2):\n        alt_str += str1[length:]\n    elif len(str2) > len(str1):\n        alt_str += str2[length:]\n    \n    return alt_str\n```"}]}
{"dataset": "code_high", "id": "code_high_79", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a python function to find the maximum element in a 2-dimensional array.\n\n### Input:\narray = [[2, 4, 7, 1], [8, 12, 9, 5]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_element(arr): \n    max_value = arr[0][0] \n    for i in range(len(arr)): \n        for j in range(len(arr[i])): \n            if arr[i][j] > max_value: \n                max_value = arr[i][j] \n    return max_value \n  \n# Driver code \narr = [[2, 4, 7, 1], [8, 12, 9, 5]] \nmax_val = max_element(arr) \nprint(\"The maximum element in 2-dimensional array is\",max_val)\n```"}]}
{"dataset": "code_high", "id": "code_high_80", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nTake an array of integers and return true if there is a triplet whose sum is equals to the given target.\n\n### Input:\narr = [1, 4, 45, 6, 10, -8], target = 16\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_triplet_sum(arr, target):\n    arr.sort()\n    for i in range(0, len(arr)-2):\n        left = i + 1\n        right = len(arr) - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == target:\n                return True \n            elif curr_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False\n```"}]}
{"dataset": "code_high", "id": "code_high_81", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python that implements an algorithm for sorting a list of numbers.\n\n### Input:\nlist = [3, 2, 5, 1, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass SortNum():\n    def selection_sort(self, list):\n        for i in range(len(list)):\n            min_idx = i\n            for j in range(i + 1, len(list)):\n                if list[min_idx] > list[j]:\n                    min_idx = j\n            list[i], list[min_idx] = list[min_idx], list[i]\n        return list\n```"}]}
{"dataset": "code_high", "id": "code_high_82", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nManipulate a 2D array in Python such that it consists of the maximum value of each column.\n\n### Input:\narray = [[1, 2, 3], \n        [4, 5, 6], \n        [7, 8, 9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\narray = [[7, 8, 9], \n        [7, 8, 9], \n        [7, 8, 9]]\ndef max_columns(array): \n    for col in range(len(array[0])): \n        m = array[0][col] \n        for row in array:\n            if row[col] > m: \n                m = row[col]\n        for row in range(len(array)):\n            array[row][col] = m \n    return array\n```"}]}
{"dataset": "code_high", "id": "code_high_83", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to check a given list of strings to determine it contains all valid English words. Output true if so, output false otherwise.\n\n### Input:\nlist = [\"hello\", \"world\", \"fksgks\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests \n  \n# Creating list of words \nlist = [\"hello\", \"world\", \"fksgks\"] \n  \n# Iterating in the list of words \nfor i in list: \n    url = \"https://www.dictionary.com/browse/\"+i \n    try: \n        webpage = requests.get(url) \n  \n        # Valid word if request status  \n        # code is 200 \n        if webpage.status_code == 200: \n            valid = True\n        else: \n            valid = False\n    except: \n        valid = False\n              \nif valid == False: \n    print(\"False\")\nelse:\n    print(\"True\")\n```"}]}
{"dataset": "code_high", "id": "code_high_84", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm to print all the possible n-ary trees with a given number of nodes.\n\n### Input:\nn=4\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Node class \nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.children = [] \n# A function to print the n-ary tree \ndef printNaryTreeUtil(root, func, level = 0): \n   \n    # If node is None, simply return \n    if root is None: \n        return\n  \n    # Process child nodes of root recursively \n    for i in range(len(root.children)): \n        printNaryTreeUtil(root.children[i], func, \n                          level + 1) \n  \n    # Call the function for the root \n    func(root, level) \n  \n# Function to generate n-ary trees    \ndef constructNaryTree(nodes): \n  \n    # Create a root node \n    root = Node(nodes[0]) \n  \n    # Create a stack which will be used to \n    # create children of root and their subtrees \n    s = [root] \n  \n    # Traverse the tree nodes in pre order fashion \n    i = 1\n    while i < len(nodes): \n  \n        node = s[len(s) - 1] \n        child = Node(nodes[i]) \n        node.children.append(child) \n        s.append(child) \n  \n        # If number of children of the node is equal to \n        # its degree, remove the node and its subtree \n        if len(node.children) == node.degree: \n            s.pop() \n  \n        i += 1\n  \n    return root \n    \n# Driver code \nif __name__ == '__main__': \n\t# Given number of nodes \n\tn = 4\n\t# Generate the nodes \n\tnodes = list(range(1, n + 1)) \n\t# Construct n-ary tree \n\troot = constructNaryTree(nodes) \n\t# Function to print the tree \n\tdef printTree(node, level): \n\t\tprint('\\t' * level, node.data, sep=\"\") \n\t# Print the tree \n\tprintNaryTreeUtil(root, printTree)\n```"}]}
{"dataset": "code_high", "id": "code_high_85", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSolve the following problem\n\n### Input:\nGiven two strings s and t, find the minimum window in s which will contain all the characters in t.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef minWindow(s, t): \n    # Initialize with None \n    minWindowLength = None\n    leftIndex = 0 \n          \n    # Balance will act as alphabet to store the occurrence of each character in t \n    balance = {}\n    for char in t:\n        if char not in balance:\n            balance[char] = 1\n        else:\n            balance[char] += 1\n              \n    # leftIndex and rightIndex act as two poiners to traverse the list\n    leftIndex = 0\n    rightIndex = 0\n    charactersFound = 0\n    # Start traversal from left \n    for i in range(len(s)): \n          \n        # If character present in t \n        if s[i] in balance: \n              \n            # Decrease its counter by 1 \n            balance[s[i]] -= 1  \n              \n            # if the character is found first time \n            if balance[s[i]] == 0: \n                charactersFound += 1\n                  \n        # If all characters present \n        if charactersFound == len(balance): \n            # Check the right side window \n            while(rightIndex <= i and charactersFound == len(balance)): \n                  \n                # remove the left side character \n                if s[leftIndex] in balance: \n                    if balance[s[leftIndex]] == 0: \n                        charactersFound -= 1\n  \n                    # Increase the counter of that character \n                    balance[s[leftIndex]] += 1\n                      \n                # Calculate the minimum window\n                if minWindowLength == None or (i-leftIndex+1) < minWindowLength: \n                    minWindowLength = i-leftIndex+1\n                      \n                leftIndex += 1\n                  \n    return minWindowLength\n```"}]}
{"dataset": "code_high", "id": "code_high_86", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate the mean, median, and mode of a given set of data.\n\n### Input:\ndata = [1, 4, 6, 3, 8, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_mean(data):\n    '''Function to calculate mean of data'''\n    mean = sum(data) / len(data)\n    return mean\ndef calculate_median(data):\n    '''Function to calculate median of data'''\n    data.sort()\n    mid_index = len(data) // 2\n    median = data[mid_index]\n    return median\ndef calculate_mode(data):\n    '''Function to calculate mode of data'''\n    count_dict = {}\n    mode_list = []\n    # count the frequency of each element\n    for i in data:\n        count_dict[i] = data.count(i)\n    # find the maximum frequency\n    max_freq = max(count_dict.values())\n    # find all elements with maximum frequency\n    for k,v in count_dict.items():\n        if max_freq == v:\n            mode_list.append(k)\n    return mode_list\ndata = [1, 4, 6, 3, 8, 9]\nmean = calculate_mean(data)\nmedian = calculate_median(data)\nmode = calculate_mode(data)\nprint(f\"Mean of data is: {mean}\")\nprint(f\"Median of data is: {median}\")\nprint(f\"Mode of data is: {mode}\")\n```"}]}
{"dataset": "code_high", "id": "code_high_87", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string, print all its permutations.\n\n### Input:\nbritish\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nGiven a string, print all its permutations\n\"\"\"\ndef permute(string):\n    if len(string) == 1:\n        return string\n    permutations = []\n    for i,c in enumerate(string):\n        for perm in permute(string[:i]+string[i+1:]):\n            permutations.append(c+perm)\n    return permutations\nif __name__ == \"__main__\":\n    print (permute(\"british\"))\n```"}]}
{"dataset": "code_high", "id": "code_high_88", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in Python that takes a list of numbers as input and sorts it in ascending order.\n\n### Input:\nmylist = [3, 2, 5, 4, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef list_sort(list): \n    for i in range(0, len(list)): \n        min_index = i \n        for j in range(i+1, len(list)): \n            if list[min_index] > list[j]: \n                min_index = j             \n        list[i], list[min_index] = list[min_index], list[i]\n    return list\nlist_sort(mylist)\n```"}]}
{"dataset": "code_high", "id": "code_high_89", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to find the intersection of two sorted lists\n\n### Input:\nlist1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_intersection(list1, list2):\n    \"\"\"\n    Find the intersection of two sorted lists\n    :param list1: the first sorted list\n    :param list2: the second sorted list\n    :return: a list with elements found in both lists\n    \"\"\"\n    intersection = []\n    p1 = p2 = 0\n    while p1 < len(list1) and p2 < len(list2):\n        if list1[p1] == list2[p2]:\n            intersection.append(list1[p1])\n            p1 += 1\n            p2 += 1\n        elif list1[p1] < list2[p2]:\n            p1 += 1\n        else:\n            p2 += 1\n    return intersection\nlist1 = [1, 3, 4, 6]\nlist2 = [1, 2, 5, 6]\nprint(find_intersection(list1, list2))\n```"}]}
{"dataset": "code_high", "id": "code_high_90", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, find the pair of elements that have the greatest difference.\n\n### Input:\narr = [2, 5, 9, 11, 15, 27];\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_greatest_difference(arr):\n  max_diff = 0\n  for i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n      diff = abs(arr[i] - arr[j])\n      if diff > max_diff:\n        max_diff = diff\n  return max_diff\n# Testing\narr = [2, 5, 9, 11, 15, 27]\nmax_diff = find_greatest_difference(arr)\nprint(\"Greatest difference is: \", max_diff)\n```"}]}
{"dataset": "code_high", "id": "code_high_91", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the code to return the most repeated character.\n\n### Input:\ndef max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    print(char_count)\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_repeated_char(input_string):\n    char_count = dict()\n    max_count = 0\n    max_char = None\n    for char in input_string:\n        if char not in char_count:\n            char_count[char] = 1\n        else:\n            char_count[char] += 1\n            \n    for char in char_count:\n        if char_count[char] > max_count:\n            max_count = char_count[char]\n            max_char = char\n    return max_char\n```"}]}
{"dataset": "code_high", "id": "code_high_92", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFor a given list of numbers, write a palindrome checker.\n\n### Input:\nsample = [1, 2, 3, 4, 5, 4, 3, 2, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_palindrome(sample):\n    res = True\n    i = 0\n    j = len(sample) - 1\n    while i < j:\n        if sample[i] != sample[j]:\n            res = False\n            break\n        else:\n            i += 1\n            j -= 1\n            \n    return res\n```"}]}
{"dataset": "code_high", "id": "code_high_93", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to find the prime factors of a number.\n\n### Input:\nNumber: 24\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nWrite a Python script to find the prime factors of a number\n\"\"\"\ndef find_prime_factors(num):\n    prime_factors = []\n    for i in range(2, num+1):\n        count = 0\n        while num % i == 0:\n            count += 1\n            num //= i\n        if count > 0:\n            prime_factors.append((i, count))\n \n    return prime_factors\nif __name__ == '__main__':\n    n = 24\n    prime_factors = find_prime_factors(n)\n    print(prime_factors)\n```"}]}
{"dataset": "code_high", "id": "code_high_94", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare two strings and return \"bigger\", \"smaller\" or \"equal\" depending on the lexicographical order.\n\n### Input:\nstring1 = \"zebra\"\nstring2 = \"zeal\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compare_strings(string1, string2):\n    i = 0\n    length = min(len(string1), len(string2))\n    while i < length:\n        if string1[i] < string2[i]:\n            return 'smaller'\n        elif string1[i] > string2[i]:\n            return 'bigger'\n        i += 1\n    \n    if len(string1) > len(string2):\n        return 'bigger'\n    else:\n        return 'equal'\n```"}]}
{"dataset": "code_high", "id": "code_high_95", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to find the most frequent item in an array\n\n### Input:\narr = [1, 4, 6, 8, 9, 1, 4, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_frequent_item(arr):\n    \"\"\"\n    Finds the most frequent item in an array.\n    \"\"\"\n    dictionary = {}\n    for i in arr:\n        if i in dictionary:\n            dictionary[i] += 1\n        else:\n            dictionary[i] = 1\n    max_count = 0\n    max_item = 0\n    for k, v in dictionary.items():\n        if v > max_count:\n            max_item = k\n            max_count = v\n    return max_item\n```"}]}
{"dataset": "code_high", "id": "code_high_96", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, write a program to find the number of triplets that satisfy the triangle inequality.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_num_triplets(arr):\n    arr.sort()\n    count = 0\n    for i in range(len(arr) - 2):\n        for j in range(i + 1, len(arr) - 1):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] > arr[k]:\n                    count += 1\n    return count\n```"}]}
{"dataset": "code_high", "id": "code_high_97", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to convert a given integer number toRoman numerals.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef intToRoman(num): \n  \n    val = [ \n            1000, 900, 500, 400, \n            100, 90, 50, 40, \n            10, 9, 5, 4, \n            1 \n            ] \n    rom_num = [ \n                \"M\", \"CM\", \"D\", \"CD\", \n                \"C\", \"XC\", \"L\", \"XL\", \n                \"X\", \"IX\", \"V\", \"IV\", \n                \"I\"\n                ] \n  \n    res = \"\" \n    i = 0\n    while num > 0: \n  \n        # Find the greatest value smaller \n        # than the given number num \n        div = num // val[i] \n  \n        # Update the number after each \n        # iteration \n        num = num % val[i] \n  \n        # Concatenate the roman characters \n        # equal to the power value of div \n        while div > 0: \n            res = res + rom_num[i] \n            div = div - 1\n        \n        i = i + 1\n  \n    return res \n  \n# Driver code \nnum = 12\nprint(intToRoman(num))\n```"}]}
{"dataset": "code_high", "id": "code_high_98", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that reverses an array\n\n### Input:\nArray = [1,2,3,4,5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse(arr):\n    start = 0\n    end = len(arr)-1\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr\narr = [1,2,3,4,5]\nprint(reverse(arr))\n```"}]}
{"dataset": "code_high", "id": "code_high_99", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the longest substring in a given string which has no repeating characters.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_substring_without_repeating_characters(str):\n    start, max_len = 0, 0\n    used_char = {}\n    for i, char in enumerate(str):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_len = max(max_len, i - start + 1)\n        used_char[char] = i\n        \n    return max_len\n```"}]}
{"dataset": "code_high", "id": "code_high_100", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the longest common substring between two strings.\n\n### Input:\ns1 = \"Tangible\"\ns2 = \"Non-Tangible\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nFind the longest common substring between two strings\n\"\"\"\ndef longest_common_substring(s1, s2):\n    \"\"\"Find the longest common substring between two strings.\n    \n    Args:\n        s1 (str): The first string.\n        s2 (str): The second string.\n        \n    Returns:\n        str: The longest common substring.\n    \"\"\"\n    max_length = 0\n    longest_substring = \"\"\n    len1, len2 = len(s1), len(s2)\n    for i in range(len1): \n        for j in range(len2):\n            length = 0\n            while i + length < len1 and j + length < len2:\n                if s1[i + length] != s2[j + length]:\n                    break \n                length += 1\n            if length > max_length:\n                max_length = length\n                longest_substring = s1[i : i + length]\n    return longest_substring\n    \nif __name__ == '__main__':\n    s1 = \"Tangible\"\n    s2 = \"Non-Tangible\"\n    print(longest_common_substring(s1, s2))\n```"}]}
{"dataset": "code_high", "id": "code_high_101", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm for bubble sorting.\n\n### Input:\n[5, 2, 1, 8, 0, 9, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\n#Function to sort an array using bubble sort\ndef bubbleSort(arr):\n  #Loop through all elements in the array\n  for i in range(len(arr)):\n    #Loop through all elements up to the one larger than the one at the current position\n    for j in range(0, len(arr)-i-1):\n      #Swap elements if necessary\n      if arr[j] > arr[j+1] :\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n#Driver code\narr = [5,2,1,8,0,9,4]\nbubbleSort(arr)\n```"}]}
{"dataset": "code_high", "id": "code_high_102", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to print a diamond pattern of stars.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef diamond_pattern():\n row = 5\n for i in range(1, row + 1):\n  print(\" \"*(row-i)+\"*\"*(2*i-1))\n if row > 1:\n  for i in range(row-1, 0, -1):\n   print(\" \"*(row-i)+\"*\"*(2*i-1))\n```"}]}
{"dataset": "code_high", "id": "code_high_103", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to find the highest prime number that can be divided by a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef highest_prime(num):\n    highest_factor = 0\n    for i in range(1, int(num**0.5)+1):\n        if num % i == 0 and is_prime(i):\n            highest_factor = i\n    return highest_factor\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_104", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, implement insertion sort to sort the array.\n\n### Input:\n[1, 4, 2, 7, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertion_sort(nums):\n    # iterate over the array\n    for i in range(1, len(nums)):\n        j = i-1\n        # hold element to be inserted\n        temp = nums[i]\n        # shift elements right if greater than element to be inserted\n        while nums[j] > temp and j >= 0: \n            nums[j+1] = nums[j]\n            j -= 1\n        # insert element at the found position\n        nums[j+1] = temp\n    return nums\nnums = [1, 4, 2, 7, 5]\nprint(insertion_sort(nums))\n```"}]}
{"dataset": "code_high", "id": "code_high_105", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to find the largest prime factor of a given integer.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            n = n / i\n        else:\n            i += 1\n    return n\n```"}]}
{"dataset": "code_high", "id": "code_high_106", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following code so that it takes a list of numbers and calculates their median.\n\n### Input:\ndef median(data):\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef median(data):\n    data.sort()\n    length = len(data)\n    if length == 0:\n        return 0\n    if length % 2 == 0:\n        return (data[length // 2] + data[length // 2 - 1]) / 2\n    elif length % 2 == 1:\n        return data[length // 2]\n```"}]}
{"dataset": "code_high", "id": "code_high_107", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement quicksort algorithm in Python for a list of integers.\n\n### Input:\n[4, 2, 5, 3, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quicksort(arr):\n\tif len(arr) <= 1:\n\t\treturn arr\n\tpivot = arr[len(arr) // 2]\n\tleft = [x for x in arr if x < pivot]\n\tmiddle = [x for x in arr if x == pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quicksort(left) + middle + quicksort(right)\n```"}]}
{"dataset": "code_high", "id": "code_high_108", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, sort the array in-place using quick sort.\n\n### Input:\n[12, 8, 9, 10, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quickSort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr)//2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quickSort(left) + middle + quickSort(right)\n```"}]}
{"dataset": "code_high", "id": "code_high_109", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nReturn a subset of a given array of size K\n\n### Input:\narr = [3, 6, 2, 5, 7, 4], K = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef subset(arr, K): \n    n = len(arr) \n    subset_arr = [0]; \n      \n    for i in range (0, n): \n        x = len(subset_arr) \n        for j in range(0, x): \n              \n            # Generate subset by adding \n            # elements of A\n            temp = [] \n            temp = subset_arr[j] \n            temp.append(arr[i]) \n              \n            # Append in the list \n            subset_arr.append(temp) \n              \n    # Return K size subset \n    length = len(subset_arr) \n    if (length >= K): \n        return subset_arr[length - K:] \n    else: \n        return -1\n    \nprint(subset(arr, K))\n```"}]}
{"dataset": "code_high", "id": "code_high_110", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a method to find the shortest path between two points in a two-dimensional array using Dijkstra's\nalgorithm.\n\n### Input:\nThe two-dimensional array:\n[[1, 8, 3],\n [4, 5, 6],\n [9, 5, 0]]\nStart point: [0, 0]\nEnd point: [2, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# the weights array will be used to store the distances\n# from the start cell to any other cell in the array\nweights = [[float('inf')] * 3 for _ in range(3)]\nweights[0][0] = 0\n# Directions are up, down, left and right\ndirections = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n# The queue for Dijkstra's algorithm\nq = [(0, 0)]\nwhile q:\n # curr is the current cell in consideration\n curr = q.pop(0)\n # curr_dist is the distance of the current cell\n # from the start cell\n curr_dist = weights[curr[0]][curr[1]]\n # check all the adjacent cells\n for direction in directions:\n  row = curr[0] + direction[0]\n  col = curr[1] + direction[1]\n  # if the adjacent cell is within the array\n  if 0 <= row < 3 and 0 <= col < 3:\n   # if the distance of the adjacent cell is bigger\n   # than current cell distance + 1, update it\n   if weights[row][col] > curr_dist + 1:\n    weights[row][col] = curr_dist + 1\n    q.append((row, col))\n# the distance from the start to the end point will\n# be stored in the weights array at the given location\ndistance = weights[2][2]\nprint(f\"The shortest path from start to end is {distance}\")\n```"}]}
{"dataset": "code_high", "id": "code_high_111", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python to combine two sorted lists into a single sorted list.\n\n### Input:\nlist1 = [3, 5, 7]\nlist2 = [1, 2, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_lists(lst1, lst2): \n  sorted_list = []\n  i=j=0\n  while (i<len(lst1) and j<len(lst2)):\n    if lst1[i] <= lst2[j]:\n      sorted_list.append(lst1[i])\n      i+=1\n    else:\n      sorted_list.append(lst2[j])\n      j+=1\n  sorted_list  += lst1[i:]\n  sorted_list += lst2[j:]\n \n  return sorted_list\nlist1 = [3, 5, 7]\nlist2 = [1, 2, 4]\n \nprint(merge_lists(list1, list2))\n```"}]}
{"dataset": "code_high", "id": "code_high_112", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, write a function to find the maximum difference between a lower element and an upper element.\n\n### Input:\nArray: [3, 10, 2, 6, 4, 8, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef findMaxDifference(arr):\n    min_element = arr[0]\n    max_difference = arr[1] - arr[0]\n    for num in arr:\n        if num - min_element > max_difference:\n            max_difference = num - min_element\n        if num < min_element:\n            min_element = num\n    return max_difference\n```"}]}
{"dataset": "code_high", "id": "code_high_113", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to do a binary search on a sorted list of integers.\n\n### Input:\nnums = [2, 4, 5, 7, 8, 9, 10, 14]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            return mid\n        elif nums[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1 # target is not found\n```"}]}
{"dataset": "code_high", "id": "code_high_114", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind all the possible moves of a knight in a chessboard\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef knight_moves(x, y): \n    result = [] \n    # Move 1 on x-axis, 2 on the y-axis \n    result.append((x + 1, y + 2)) \n    # Move 2 on x-axis, 1 on the y-axis\n    result.append((x + 2, y + 1))\n  \n    # Move 1 on x-axis, -2 on the y-axis \n    result.append((x + 1, y - 2)) \n    # Move -2 on x-axis, 1 on the y-axis \n    result.append((x - 2, y + 1))\n  \n    # Move -1 on x-axis, 2 on the y-axis \n    result.append((x - 1, y + 2)) \n    # Move 2 on x-axis, -1 on the y-axis \n    result.append((x + 2, y - 1))\n  \n    # Move -1 on x-axis, -2 on the y-axis \n    result.append((x - 1, y - 2)) \n    # Move -2 on x-axis, -1 on the y-axis\n    result.append((x - 2, y - 1)) \n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_115", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm that sorts a given list of numbers.\n\n### Input:\n[1, 5, -3, 0, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(list):\n  for i in range(len(list)):\n   for j in range(len(list)-1-i):\n    if list[j] > list[j+1]:\n     list[j], list[j+1] = list[j+1], list[j]\n  return list\nbubble_sort([1,5,-3,0,8])\n```"}]}
{"dataset": "code_high", "id": "code_high_116", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the Fibonacci series from 0 to n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_117", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function to find all elements in a given array which appear more than once.\n\n### Input:\nnums = [4, 3, 6, 7, 3, 8, 4, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_duplicates(nums):\n    duplicates = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] == nums[j]:\n                duplicates.append(nums[i])\n    return duplicates\n```"}]}
{"dataset": "code_high", "id": "code_high_118", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCheck if two strings are an anagram of each other.\n\n### Input:\nstring1 = \"elbon\" string2 = \"noble\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_anagram(string1, string2):\n    # Make sure strings are the same length\n    if len(string1) != len(string2):\n        return False\n    # Create dictionary of letter frequency for each string \n    char_freq1 = {}\n    char_freq2 = {}\n    # Iterate through each character in the strings\n    for char in string1:\n        char_freq1[char] = char_freq1.get(char, 0) + 1\n    for char in string2:\n        char_freq2[char] = char_freq2.get(char, 0) + 1\n    # Compare the two dictionaries\n    if char_freq1 == char_freq2:\n        return True\n    else:\n        return False\nif __name__ == '__main__':\n    string1 = \"elbon\"\n    string2 = \"noble\"\n    print(is_anagram(string1, string2))\n```"}]}
{"dataset": "code_high", "id": "code_high_119", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to find all the Pythagorean triplets which sum up to the given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_triplet(n):\n    \"\"\"\n    @brief: Finds all Pythagorean triplets which sum upto the given number n\n    @param n: the sum which is the given number \n    @return: a list of all Pythagorean triplets which might sum upto n, or an empty list if none are found\n    \"\"\"\n    triplets = []\n    for a in range(1, n):\n        for b in range(a + 1, n - a):\n            c = int(n - a - b)\n            if (a*a) + (b*b) == (c*c):\n                triplets.append((a, b, c))\n    return triplets\n```"}]}
{"dataset": "code_high", "id": "code_high_120", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program that accepts an integer array and returns its median value\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef median(arr):\n    arr.sort()\n    if len(arr)%2 != 0:\n        return arr[len(arr)//2]\n    else:\n        return (arr[(len(arr)//2)-1]+arr[len(arr)//2])/2\n```"}]}
{"dataset": "code_high", "id": "code_high_121", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind a way to generate all the unique permutations for a given string.\n\n### Input:\ns = 'ABC'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutation(str): \n    if len(str) == 0: \n        return [] \n    if len(str) == 1: \n        return [str]  \n    l = []  \n    for i in range(len(str)): \n       m = str[i]  \n       remLst = str[:i] + str[i+1:]  \n       for p in permutation(remLst): \n           l.append([m] + p) \n    return l \nif __name__== \"__main__\":\n    s = 'ABC'\n    perms = permutation(s)\n    for p in perms:\n        print(''.join(p))\n```"}]}
{"dataset": "code_high", "id": "code_high_122", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm that performs bubble sort.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if arr[j] > arr[j+1]:\n                arr[j+1], arr[j] = arr[j], arr[j+1]\n```"}]}
{"dataset": "code_high", "id": "code_high_123", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm that sorts the elements of an array.\n\n### Input:\n[6, 3, 8, 9, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_array(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in correct position\n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n# Driver code to test above \narr = [6, 3, 8, 9, 4] \nsort_array(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\n```"}]}
{"dataset": "code_high", "id": "code_high_124", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCount the number of quadruples that sum up to zero\n\n### Input:\narr = [-2, -1, 0, 1, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef countQuadruplesSumZero(arr):\n    \"\"\"\n    This function returns the number of quadruples that sum up to zero.\n    \"\"\"\n    quad = 0\n           \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            for k in range(j+1, len(arr)):\n                for l in range(k+1, len(arr)):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == 0:\n                        quad += 1\n                            \n    return quad\n```"}]}
{"dataset": "code_high", "id": "code_high_125", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to print all permutations of a string without duplicates.\n\n### Input:\nstring = \"abc\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutations(string):\n    res = set()\n    if len(string) == 1:\n        res.add(string)\n    else:\n        for i, char in enumerate(string):\n            for perm in permutations(string[:i], string[i+1:]):\n                res.add(char + perm)\n    return res\n# Output\n{'abc', 'acb', 'bac', 'bca', 'cab', 'cba'}\n```"}]}
{"dataset": "code_high", "id": "code_high_126", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a two-dimensional array, write a code to print the elements column-wise.\n\n### Input:\n[[1, 2], [3, 4], [5, 6]]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Define a function to print elements column-wise \ndef print_columnwise(arr):\n # Get the number of rows and columns\n num_rows = len(arr)\n num_cols = len(arr[0])\n \n # Initialize the columns \n k = 0\n # Iterate through the rows\n while k < num_cols :\n  # Iterate through the columns\n  for i in range(num_rows):\n   # Print the element\n   print(arr[i][k], end=\" \")\n  \n  # Update the column\n  k = k + 1\n  print()\n# Get the array\narr = [[1, 2], [3, 4], [5, 6]]\n# Print the elements column-wise \nprint_columnwise(arr)\n```"}]}
{"dataset": "code_high", "id": "code_high_127", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to create a Caesar Cipher encryption algorithm.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef cipher(input_str, key):\n  output_str = \"\"\n  for char in input_str:\n    if char.isalpha():\n      # Encrypt each character\n      ascii_value = ord(char)\n      ascii_value = ascii_value + (key % 26)\n      if char.isupper():\n        if ascii_value > ord(\"Z\"):\n          ascii_value -= 26\n      elif char.islower():\n        if ascii_value > ord(\"z\"):\n          ascii_value -= 26  \n      output_str += chr(ascii_value)\n    else:\n      output_str += char\n  return output_str\nif __name__ == '__main__':\n  # Sample input\n  input_str = 'Hello World!'\n  key = 5\n  print('Original input: {}'.format(input_str))\n  # Encryting the string\n  cipher_str = cipher(input_str, key)\n  print('Encrypted input: {}'.format(cipher_str))\n  # Decrypting the string\n  plain_text = cipher(cipher_str, -key)\n  print('Decrypted input: {}'.format(plain_text))\n```"}]}
{"dataset": "code_high", "id": "code_high_128", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate all possible permutations of the characters in a given string\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutations(string):\n    \"\"\"\n    Function to generate all possible permutations of a given string\n    \"\"\"\n    if len(string) == 0:\n        return ['']\n    prev_list = permutations(string[1:len(string)])\n    next_list = []\n    for i in range(0,len(prev_list)):\n        for j in range(0,len(string)):\n            new_string = prev_list[i][0:j]+string[0]+prev_list[i][j:len(string)-1]\n            if new_string not in next_list:\n                next_list.append(new_string)\n    return next_list\nif __name__ == '__main__':\n    string = 'abcd'\n    print(permutations(string))\n    # should print ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'dabc', 'dbac', 'bdac', 'bdca', 'dacb', 'dcab', 'dcba', 'adbc', 'dbca', 'dcab', 'dcba']\n```"}]}
{"dataset": "code_high", "id": "code_high_129", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm to find the longest common prefix string amongst an array of strings.\n\n### Input:\n`<code>['leet', 'leets', 'lee', 'leeston', 'leeve']</code>`\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nConstruct an algorithm to find the longest common prefix string amongst an array of strings\n\"\"\"\ndef longest_common_prefix(strs):\n    prefix = strs[0]\n    i = 0\n    while i < len(prefix):\n        for string in strs:\n            if i >= len(string) or string[i] != prefix[i]:\n                return prefix[0:i]\n        i += 1\n    return prefix\nif __name__ == '__main__':\n    print(longest_common_prefix(['leet', 'leets', 'lee', 'leeston', 'leeve']))\n```"}]}
{"dataset": "code_high", "id": "code_high_130", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate code to find the longest subarray with equal number of 0's and 1's\n\n### Input:\nlist = [0, 0, 1, 0, 1, 0, 0, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_subarray(arr): \n    # Stores index of previos zero \n    prev_zero = -1 \n  \n    # Stores index and length of longest subarray with equal 0 and 1 \n    max_len = 0\n    start_index = 0\n  \n    # Traverse the given array \n    for i in range(len(arr)): \n        # Update previous zero \n        if arr[i] == 0: \n            prev_zero = i \n  \n        # Calculate difference b/w current and previous zero \n        diff = i - prev_zero \n  \n        # Update max_len if required \n        if (diff > max_len): \n            max_len = diff \n            start_index = prev_zero + 1\n  \n    # Return longest sub-array \n    return arr[start_index:start_index + max_len]\n```"}]}
{"dataset": "code_high", "id": "code_high_131", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following code so that it prints the Fibonacci numbers up to the given number\n\n### Input:\nx = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(x):\n    a = 0\n    b = 1\n    if x < 0:\n        return []\n    elif x == 0:\n        return 0\n    elif x == 1:\n        return [0, 1]\n    else:\n        c = a + b\n        res = [a, b, c]\n        while c < x:\n            a = b\n            b = c\n            c = a + b\n            res.append(c)\n        return res\n```"}]}
{"dataset": "code_high", "id": "code_high_132", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to find the most frequent number greater than 100 from a list of numbers.\n\n### Input:\n[102, 130, 102, 140, 150, 60, 70, 102, 140]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_frequent(nums):\n    # Initialize a dictionary to count the frequency \n    # of each number in the list\n    count = {}\n    # Iterate through the list and increase the \n    # count of each number in the dictionary\n    for num in nums:\n        if num> 100:\n            if num not in count:\n                count[num] = 1\n            else:\n                count[num] += 1\n    \n    # Find the most frequent number\n    max_count = 0\n    most_frequent_num = 0\n    for k,v in count.items():\n        if v> max_count:\n            most_frequent_num = k\n            max_count = v\n    return most_frequent_num\n```"}]}
{"dataset": "code_high", "id": "code_high_133", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes in an integer \"n\" and prints all perfect numbers between 0 to n.\n\n### Input:\nn = 20\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef perfect_numbers(n):\n    perfect_numbers = []\n    for number in range(1, n+1):\n        sum_divisors = 0\n        for divisor in range(1, number):\n            if number % divisor == 0:\n                sum_divisors += divisor\n        if sum_divisors == number:\n            perfect_numbers.append(number)\n    return perfect_numbers\n \nprint(perfect_numbers(n))\n```"}]}
{"dataset": "code_high", "id": "code_high_134", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm which takes an array of integers as input and sorts it in ascending order.\n\n### Input:\n[34, 19, 42, -9, 2018, 0, 105]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sorting_algorithm(arr):\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                arr[i], arr[j] = arr[j], arr[i]\n    return arr\n# Test\narr = [34, 19, 42, -9, 2018, 0, 105]\nprint(sorting_algorithm(arr)) # [-9, 0, 19, 34, 42, 105, 2018]\n```"}]}
{"dataset": "code_high", "id": "code_high_135", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a web page with a form that takes a user's name and age, and outputs a greeting based on the age.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Program to generate a simple web page\nfrom flask import Flask, request\napp = Flask(__name__)\n# Render the web page \n@app.route('/', methods = ['GET'])\ndef show_index_page():\n  return '''\n  <html>\n    <head>\n      <title>Greeting Form</title>\n    </head>\n    <body>\n      <h1>Greeting Form</h1>\n      <form method=\"POST\">\n        <input type=\"text\" name=\"user_name\" placeholder=\"Enter your name\" required>\n        <input type=\"number\" name=\"user_age\" placeholder=\"Enter your age\" required>\n        <input type=\"submit\" value=\"Submit\">\n      </form>\n    </body>\n  </html>'''\n  \n# Process the form data and generate the greeting\n@app.route('/', methods = ['POST'])\ndef process_data():\n  name = request.form.get('user_name')\n  age = request.form.get('user_age')\n  \n  if age <= 10:\n    message = f'Hi {name}, how is your day going?'\n  elif age > 10 and age <= 20:\n    message = f'Hello {name}, what are you interested in?'\n  else:\n    message = f'Greetings {name}, it is nice to meet you!'\n  \n  return message\n  \nif __name__ == '__main__': \n  app.run(debug = True)\n```"}]}
{"dataset": "code_high", "id": "code_high_136", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to print out a FizzBuzz pattern for a given number range.\n\n### Input:\nNumber range: 5-20\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fizzbuzz_pattern(n):\n    for num in range(n, n+16):\n        if num % 3 == 0 and num % 5 == 0:\n            print(\"FizzBuzz\")\n        elif num % 3 == 0:\n            print(\"Fizz\")\n        elif num % 5 == 0:\n            print(\"Buzz\")\n        else:\n            print(num)\n```"}]}
{"dataset": "code_high", "id": "code_high_137", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm in Python that takes an array of classmates' age and returns the median age.\n\n### Input:\nages = [10, 9, 12, 14, 11]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef median_age(ages):\n    ages.sort()\n    mid_index = len(ages)//2\n    if len(ages)%2 == 0:\n        return (ages[mid_index-1] + ages[mid_index])/2\n    else:\n        return ages[mid_index]\n```"}]}
{"dataset": "code_high", "id": "code_high_138", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a target number, find two numbers in the list whose sum is equal to the target number.\n\n### Input:\nlist = [2, 7, 11, 15], target = 9\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist = [2, 7, 11, 15]\ntarget = 9\nfor i in range(0, len(list) - 1):\n    for j in range(i + 1, len(list)):\n        if list[i] + list[j] == target:\n            print('The two numbers in the list whose sum is equal to the target number are %d and %d' %(list[i], list[j]))\n```"}]}
{"dataset": "code_high", "id": "code_high_139", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function which will take a list of numbers as an input and return a sorted list\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_list(numbers):\n    #Base case\n    if len(numbers) <= 1:\n        return numbers\n    pivot = numbers[0]\n    left = []\n    right = []\n    #Divide\n    for num in numbers[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            right.append(num)\n    #Conquer\n    left = sort_list(left)\n    right = sort_list(right)\n    #Combine\n    return left + [pivot] + right\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(sort_list(arr))\n```"}]}
{"dataset": "code_high", "id": "code_high_140", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to find the path from a source point to a destination point in a given 2D array.\n\n### Input:\nArray: [[0, 1, 0, 0, 0], [0, 1, 0, 1, 0], [1, 0, 0, 1, 0], [0, 0, 0, 1, 0]]\nSource Point: [0, 0]\nDestination Point: [3, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_path(array, source, dest):\n    path = [source]\n    sx, sy = source\n    while path[-1] != dest:\n        dx, dy = path[-1]\n        if dx > 0 and array[dx - 1][dy] == 0:\n            path.append([dx-1, dy])\n        elif dy > 0 and array[dx][dy-1] == 0:\n            path.append([dx, dy-1])\n        elif dx < len(array)-1 and array[dx + 1][dy] == 0:\n            path.append([dx+1, dy])\n        elif dy < len(array[0])-1 and array[dx][dy+1] == 0:\n            path.append([dx, dy+1])\n    return path\n```"}]}
{"dataset": "code_high", "id": "code_high_141", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to calculate all the possible paths for a N x N matrix.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_paths(matrix):\n    rows = len(matrix)\n    cols = len(matrix[0])\n  \n    dp = [[0 for _ in range(cols)] for _ in range(rows)] \n  \n    dp[0][0] = 1\n  \n    for i in range(rows):\n        for j in range(cols): \n            if i-1 >= 0: \n                dp[i][j] = dp[i][j] + dp[i-1][j]\n            if j-1 >= 0:\n                dp[i][j] = dp[i][j] + dp [i][j-1]\n  \n    return dp[rows-1][cols-1]\n```"}]}
{"dataset": "code_high", "id": "code_high_142", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following selection sort algorithm in Python.\n\n### Input:\ndef selectionSort(arr):\n  for i in range(len(arr)):\n    minIndex = i\n    for j in range(i + 1, len(arr)):\n      if arr[minIndex] > arr[j]:\n        minIndex = j\n    arr[i], arr[minIndex] = arr[minIndex], arr[i]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef selection_sort(arr):\n  for i in range(len(arr)):\n    min_index = i\n    for j in range(i + 1, len(arr)):\n      if arr[min_index] > arr[j]:\n        min_index = j\n    arr[i], arr[min_index] = arr[min_index], arr[i]\n```"}]}
{"dataset": "code_high", "id": "code_high_143", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the maximum sum of m consecutive values in a given array.\n\n### Input:\narr = [2, 6, 1, 3, 7, 4, 9]\nm = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_m_consecutive_sum(arr, m):\n    max_sum = 0\n    for i in range(len(arr) - m + 1):\n        curr_sum = 0\n        for j in range(i, i + m):\n            curr_sum += arr[j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n```"}]}
{"dataset": "code_high", "id": "code_high_144", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm to find the number of occurrences of a substring in a string.\n\n### Input:\nstring = \"This is a test\"\nsubstring = \"is\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_substring(string, substring):\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\nresult = count_substring(string, substring)\nprint(result)\n# Output: 2\n```"}]}
{"dataset": "code_high", "id": "code_high_145", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the longest palindrome in a given string using Python.\n\n### Input:\nstring = \"My name is John\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_palindrome(string):\n    palindrome = ''\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if substring == substring[::-1] and len(substring) > len(palindrome):\n                palindrome = substring\n    return palindrome\n```"}]}
{"dataset": "code_high", "id": "code_high_146", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to print the spiral ordering of an input matrix.\n\n### Input:\n[[1, 2, 3], \n [4, 5, 6], \n [7, 8, 9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef spiralPrint(m, n, a) : \n    k = 0; l = 0\n  \n    ''' k - starting row index \n        m - ending row index \n        l - starting column index \n        n - ending column index \n        i - iterator '''\n  \n  \n    while (k < m and l < n) : \n          \n        # Print the first row from the remaining rows  \n        for i in range(l, n) : \n            print(a[k][i], end = \" \") \n              \n        k += 1\n  \n        # Print the last column from the remaining columns  \n        for i in range(k, m) : \n            print(a[i][n - 1], end = \" \") \n              \n        n -= 1\n  \n        # Print the last row from the remaining rows  \n        if ( k < m) : \n              \n            for i in range(n - 1, (l - 1), -1) : \n                print(a[m - 1][i], end = \" \") \n              \n            m -= 1\n          \n        # Print the first column from the remaining columns  \n        if (l < n) : \n            for i in range(m - 1, k - 1, -1) : \n                print(a[i][l], end = \" \") \n              \n            l += 1\n  \na = [ [1, 2, 3, 4, 5, 6], \n      [7, 8, 9, 10, 11, 12],  \n      [13, 14, 15, 16, 17, 18] ] \n        \nspiralPrint(3, 6, a)\n```"}]}
{"dataset": "code_high", "id": "code_high_147", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a function in Python that sorts a list of integers in increasing order.\n\n### Input:\n[50, 2, 8, 7, 19, 29]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sortInt(nums):\n    for i in range(len(nums)-1):\n        for j in range(i+1,len(nums)):\n            if nums[i] > nums[j]:\n                #Swap\n                nums[i],nums[j] = nums[j],nums[i]\n    return nums\n```"}]}
{"dataset": "code_high", "id": "code_high_148", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to rearrange the elements of an array in such a way that no two same numbers are adjacent to each other.\n\n### Input:\nmylist = [2, 5, 9, 2, 1, 5, 9, 0]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef rearrange(mylist): \n    mylist.sort() \n    length = len(mylist) \n    temp = [0]*(length + 1) \n       \n    # to store indexes of mylist[] \n    j, k = 0, length-1;\n       \n    # filling temp[] from both sides \n    for i in range(length): \n          \n        if i%2==0: \n            temp[i] = mylist[j] \n            j += 1\n        else: \n            temp[i] = mylist[k] \n            k -= 1\n       \n    # modify original array \n    for i in range(length): \n        mylist[i] = temp[i]\n    return mylist\n```"}]}
{"dataset": "code_high", "id": "code_high_149", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that prints out all prime numbers between two given numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_primes(start, end):\n    for num in range(start, end):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)\n```"}]}
{"dataset": "code_high", "id": "code_high_150", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a Python program to generate all permutations of a given list.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutations(nums):\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return [[nums[0]]]\n    \n    perms = []\n    for i, n in enumerate(nums):\n        sub_perms = permutations(nums[:i] + nums[i+1:])\n        for perm in sub_perms:\n            perms.append([n] + perm)\n    return perms\n```"}]}
{"dataset": "code_high", "id": "code_high_151", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that takes a list as input and returns a list of every permutation of that list\n\n### Input:\n[1, 2, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_permutations(input_list): \n    result = [] \n    if len(input_list) == 0: \n        return [] \n    if len(input_list) == 1: \n        return [input_list] \n    for i in range(len(input_list)): \n        x = input_list[i] \n        xs = input_list[:i] + input_list[i+1:] \n        for p in get_permutations(xs): \n            result.append([x] + p) \n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_152", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a coding program that sorts a given list of numbers into ascending order.\n\n### Input:\n[4, 3, 2, 5, 9, 1, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef ascending_order(arr): \n# Bubble sort algorithm. \n    n = len(arr) \n   \n    # Traverse through all array elements \n    for i in range(n): \n   \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n   \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                \n    return arr\n# Test \narr = [4, 3, 2, 5, 9, 1, 8]\nascending_order(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\n```"}]}
{"dataset": "code_high", "id": "code_high_153", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you solve this leetcode problem in Python?\n\n### Input:\nProblem: Implement the following function\n\n```def majorityElement(self, nums: List[int]) -> int:```\n\nGiven an array of size n, find the majority element. The majority element is the element that appears more than \u230a n/2 \u230b times.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef majorityElement(self, nums: List[int]):\n    majority_count = len(nums)//2\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    for key, value in num_count.items():\n        if value > majority_count:\n            return key\n```"}]}
{"dataset": "code_high", "id": "code_high_154", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint all permutations of an input array.\n\n### Input:\narray = [1,2,3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutations(array):\n    if len(array) == 0:\n        return\n    if len(array) == 1:\n        return [array]\n    perms = []\n    for i in range(len(array)):\n        elem = array[i]\n        rem_perms = permutations(array[:i] + array[i+1:])\n        for perm in rem_perms:\n            perms.append([elem] + perm)\n    return perms\n```"}]}
{"dataset": "code_high", "id": "code_high_155", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that finds all the prime numbers between 1-100\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor number in range(1,101):\n    # To check if a number is prime or not\n    is_prime = True\n  \n    # We need to check until the square root of that number\n    for i in range(2, int(number**0.5)+1):\n        if number % i == 0:\n            is_prime = False\n            break\n  \n    if is_prime:\n        print(number, end=\" \")\n```"}]}
{"dataset": "code_high", "id": "code_high_156", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to implement a binary search algorithm.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(arr, target): \n\tstart = 0\n\tend = len(arr) - 1\n\twhile start <= end: \n\t\tmid = start + (end-start)//2\n\t\tif arr[mid] == target: \n\t\t\treturn mid \n\t\telif arr[mid] < target: \n\t\t\tstart = mid + 1\n\t\telse: \n\t\t\tend = mid - 1\n          \n\treturn -1\n```"}]}
{"dataset": "code_high", "id": "code_high_157", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to write a function to check if given input is a palindrome string.\n\n### Input:\nstring = \"level\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_palindrome(string): \n    left = 0\n    right = len(string) - 1\n  \n    while right >= left: \n        if string[left] != string[right]: \n            return False\n        left += 1\n        right -= 1\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_158", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a linked list, remove all elements from it which have greater value than a given number X.\n\n### Input:\nhead = [7, 14, 28, 21, 32]\nvalue = 21\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass node:\n    def __init__(self, data):\n        self. data = data\n        self. next = None\ndef removeGreater(head, value):\n    while head and head.data > value:\n        head = head.next\n    p = head\n    while p and p.next:\n        if p.next.data > value:\n            p.next = p.next.next\n        else:\n            p = p.next\n    return head\nif __name__ == '__main__':\n    head = node(7)\n    head.next = node(14)\n    head.next.next = node(28)\n    head.next.next.next = node(21)\n    head.next.next.next.next = node(32)\n    result = removeGreater(head, 21)\n    while result:\n        print(result.data, end=\" \")\n        result= result.next\n```"}]}
{"dataset": "code_high", "id": "code_high_159", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function which takes a number and returns the Fibonacci sequence up to that number.\n\n### Input:\nn = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n):\n    fib_list = [1]\n    if n == 1:\n        return fib_list\n    else:\n        fib_list.append(1)\n        while len(fib_list) < n:\n            fib_list.append(fib_list[-1] + fib_list[-2])\n        return fib_list\n```"}]}
{"dataset": "code_high", "id": "code_high_160", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to traverse a matrix in spiral form.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef spiral_traverse(matrix):\n    top = 0\n    left = 0\n    right = len(matrix[0])-1\n    bottom = len(matrix)-1\n    while top <= bottom and left <= right:\n        for i in range(left, right+1):\n            print(matrix[top][i], end = ' ')\n        top += 1\n        for i in range(top, bottom+1):\n            print(matrix[i][right], end = ' ')\n        right -= 1\n        if top <= bottom:\n            for i in range(right, left-1, -1):\n                print(matrix[bottom][i], end = ' ')\n            bottom -= 1\n        if left <= right:\n            for i in range(bottom, top-1, -1):\n                print(matrix[i][left], end = ' ')\n            left += 1\n```"}]}
{"dataset": "code_high", "id": "code_high_161", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing python, implement a method to find the longest common subsequence in two strings\n\n### Input:\nstr1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef lcs(str1, str2, n, m): \n    if n == 0 or m == 0:          \n        return 0\n  \n    elif str1[n-1] == str2[m-1]:   \n        return 1 + lcs(str1, str2, n-1, m-1) \n \n    else: \n        return max(lcs(str1, str2, n, m-1),    \n                   lcs(str1, str2, n-1, m))\n```"}]}
{"dataset": "code_high", "id": "code_high_162", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to print all prime numbers up to 1000.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(x):\n    if x<2:\n        return False\n    for i in range(2, int(x**0.5)+1):\n        if x % i == 0:\n            return False\n    return True\nfor x in range(2,1001):\n    if is_prime(x):\n        print(x)\n```"}]}
{"dataset": "code_high", "id": "code_high_163", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to find the pair of numbers that have the highest product in an array of numbers\n\n### Input:\n[1, 2, 4, 8, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_max_product(nums):\n  max_product = 0\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      product = nums[i] * nums[j]\n      if product > max_product:\n        max_product = product\n  return max_product\n```"}]}
{"dataset": "code_high", "id": "code_high_164", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a search() function that uses binary search to find a given element in an array.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_165", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Flask application to redirect the user to a given URL when the user input is valid.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom flask import Flask, redirect, request\napp = Flask(__name__)\n@app.route('/', methods=['GET', 'POST'])\ndef index():\n    if request.method == 'POST':\n        if request.form['userInput']:\n            url = 'https://www.example.com'\n            return redirect(url)\n    return '''\n    <form method=\"POST\">\n        <input type=\"text\" name=\"userInput\" placeholder=\"Type something..\" />\n        <input type=\"submit\" value=\"Submit\" />\n    </form>\n    '''\nif __name__ == \"__main__\":\n    app.run()\n```"}]}
{"dataset": "code_high", "id": "code_high_166", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nTrain a model in PyTorch to classify the following dataset into 4 classes.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport torch\n# Load the dataset\ntrain_data, valid_data, test_data = torch.utils.data.random_split(dataset, (1000, 400, 200))\n# Build the model\nmodel = torch.nn.Sequential(\n    torch.nn.Linear(7, 15), \n    torch.nn.ReLU(), \n    torch.nn.Linear(15, 4), \n    torch.nn.Softmax()\n)\n# Compile the model\ncriterion = torch.nn.CrossEntropyLoss()\noptimizer = torch.optim.Adam(model.parameters(), lr=0.001)\n# Train the model\nmodel.train()\nfor epoch in range(10):\n    loss = 0\n    for data, target in train_loader:\n        data, target = data.to(device), target.to(device)\n        optimizer.zero_grad()\n        output = model(data)\n        loss += criterion(output, target).item()\n        loss.backward()\n        optimizer.step()\n    \n    print(f'Epoch: {epoch}, Loss: {loss/len(train_data)}')\n```"}]}
{"dataset": "code_high", "id": "code_high_167", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to generate permutations of an input string.\n\n### Input:\n\"abc\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutations(string): \n    if len(string) == 0: \n        return [] \n  \n    if len(string) == 1: \n        return [string] \n  \n    l = [] \n    for i in range(len(string)): \n       m = string[i] \n       rem_string = string[:i] + string[i+1:] \n       for p in permutations(rem_string): \n           l.append(m + p) \n    return l\n```"}]}
{"dataset": "code_high", "id": "code_high_168", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that takes two strings as input and finds their longest common subsequence.\n\n### Input:\nx = \u201cABCBDAB\u201d\n y = \u201cBDCABA\u201d\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longestSubsequence(x, y): \n    m = len(x) \n    n = len(y) \n  \n    L = [[None]*(n+1) for i in range(m+1)] \n   \n    for i in range(m + 1): \n        for j in range(n + 1): \n            if i == 0 or j == 0 : \n                L[i][j] = 0\n            elif x[i-1] == y[j-1]: \n                L[i][j] = L[i-1][j-1]+1\n            else: \n                L[i][j] = max(L[i-1][j] , L[i][j-1]) \n  \n    index = L[m][n] \n  \n    lcs = [\"\"] * (index+1) \n    lcs[index] = \"\\0\" \n  \n    i = m \n    j = n \n    while i > 0 and j > 0: \n  \n        if x[i-1] == y[j-1]: \n            lcs[index-1] = x[i-1] \n            i-=1\n            j-=1\n            index-=1\n  \n        elif L[i-1][j] > L[i][j-1]: \n            i-=1\n        else: \n            j-=1\n  \n    print(\"Longest common subsequence of \" + x + \" and \" + y + \" is \\\"\" + \"\".join(lcs) + \"\\\"\")\n```"}]}
{"dataset": "code_high", "id": "code_high_169", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python code to find median of two sorted arrays.\n\n### Input:\nA = [1,4,6,7]B = [3,5,8,9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_median(A, B):\n    \"\"\"Function to find median of two sorted arrays\"\"\"\n    m = len(A)\n    n = len(B)\n    if m > n:\n        A,B,m,n = B,A,n,m\n    imin, imax, half_len = 0, m , (m+n+1) // 2\n    while imin <= imax:\n        i = (imin+imax) // 2\n        j = half_len -i\n        if i < m and B[j-1] > A[i]:\n            # i is too small, must increase it\n            imin = i + 1\n        elif i > 0 and A[i-1] > B[j]:\n            # i is too big, must decrease it\n            imax = i - 1\n        else:\n            # i is perfect\n            if i == 0:\n                max_of_left = B[j-1] \n            elif j == 0:\n                max_of_left = A[i-1] \n            else:\n                max_of_left = max(A[i-1], B[j-1]) \n \n            if (m + n) % 2 == 1:\n                return max_of_left \n \n            if i == m:\n                min_of_right = B[j] \n            elif j == n:\n                min_of_right = A[i] \n            else:\n                min_of_right = min(A[i], B[j]) \n \n            return (max_of_left + min_of_right) / 2.0\nif __name__ == '__main__':\n    A = [1,4,6,7]\n    B = [3,5,8,9]\n    median = find_median(A, B)\n    print(median)\n```"}]}
{"dataset": "code_high", "id": "code_high_170", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement quick sort to sort the given array of integers.\n\n### Input:\n[9, 5, 8, 1, 3, 6, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef partition(nums, low, high):\n    i = low-1\n    # set pivot as last element in array\n    pivot = nums[high]\n    \n    for j in range(low, high):\n        # if element is smaller than pivot, increment i and swap elements\n        if nums[j] < pivot:\n            i += 1\n            nums[i], nums[j] = nums[j], nums[i]\n    # swap pivot \n    nums[i+1], nums[high] = nums[high], nums[i+1] \n    return i+1\ndef quick_sort(nums, low, high):\n    if low < high:\n        # set partition index\n        part_idx = partition(nums, low, high)\n        # sort left side of partition index \n        quick_sort(nums, low, part_idx-1)\n        # sort right side of partition index \n        quick_sort(nums, part_idx+1, high)\nnums = [9, 5, 8, 1, 3, 6, 7]\nquick_sort(nums, 0, len(nums)-1)\nprint(\"Sorted array:\", nums)\n```"}]}
{"dataset": "code_high", "id": "code_high_171", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a given array in ascending order using the Gnome sort algorithm.\n\n### Input:\narray = [8, 3, 6, 1, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef gnome_sort(array):\n    i = 1\n    while i < len(array): \n        if array[i-1] <= array[i]: \n            i += 1\n        else: \n            array[i-1], array[i] = array[i], array[i-1] \n            i -= 1\n            if (i == 0): \n                i = 1\n    return array\n```"}]}
{"dataset": "code_high", "id": "code_high_172", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm for multiplying two matrices.\n\n### Input:\nA = [[1, 2,],\n     [3, 4]] \nB = [[5, 6], \n     [7, 8]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef multiply(A, B): \n    # initialize result matrix \n    rows_A = len(A) \n    cols_A = len(A[0]) \n    rows_B = len(B) \n    cols_B = len(B[0]) \n  \n    if cols_A != rows_B: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return  \n    # construct result matrix  \n    C = [[0 for row in range(cols_B)] for col in range(rows_A)] \n  \n    # iterate through and multiply\n    for i in range(rows_A): \n        for j in range(cols_B): \n            for k in range(cols_A): \n                C[i][j] += A[i][k] * B[k][j] \n  \n    return C\n```"}]}
{"dataset": "code_high", "id": "code_high_173", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a method to sort a list of numbers using the quick sort algorithm.\n\n### Input:\n[10, 3, 9, -2, 8, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quickSort(left) + middle + quickSort(right)\n```"}]}
{"dataset": "code_high", "id": "code_high_174", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, create a function that finds the two elements that sum to a given target number.\n\n### Input:\nnums = [2, 45, 7, 9, 15]\ntarget = 16\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef two_sum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]\nresult = two_sum(nums, target)\nprint(result) \n# Output: [2, 3]\n```"}]}
{"dataset": "code_high", "id": "code_high_175", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to partition an array into two subarrays such that the difference between the sum of the two subarrays is minimum.\n\n### Input:\nInput Array: [1, 6, 5, 11, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef min_partition_array(arr):\n    total = 0\n    for i in arr:\n        total += i\n    sum1, sum2 = 0, total\n    n = len(arr)\n    flag = [[False for i in range(total + 1)] for j in range(n + 1)]\n    flag[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(total + 1):\n            if arr[i - 1] <= j:\n                flag[i][j] = flag[i - 1][j] or flag[i - 1][j - arr[i - 1]]\n            else:\n                flag[i][j] = flag[i - 1][j]\n    for j in range(0, int(total / 2) + 1):\n        if flag[n][j]:\n            sum1 = j\n            sum2 = total - j\n            break\n    return sum1, sum2\n \n# Partition [1, 6, 5, 11, 3]\nsubarr1, subarr2 = min_partition_array([1, 6, 5, 11, 3])\nprint ((subarr1, subarr2)) # prints (8, 9)\n```"}]}
{"dataset": "code_high", "id": "code_high_176", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to get the root of a quadratic equation\n\n### Input:\n1, 4, 4\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_roots_of_quad_eqn(a, b, c):\n    # compute discriminant \n    d = (b**2) - (4 * a * c)\n    \n    # compute roots\n    root1 = (-b + math.sqrt(d)) / (2 * a) \n    root2 = (-b - math.sqrt(d)) / (2 * a) \n    \n    # return the roots\n    return root1, root2\nif __name__ == '__main__':\n    a, b, c = 1, 4, 4\n    print(get_roots_of_quad_eqn(a, b, c))\n```"}]}
{"dataset": "code_high", "id": "code_high_177", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to calculate the mean, mode and median in a given set of numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef mean(nums):\n    return sum(nums)/len(nums)\ndef mode(nums):\n    countDict = {}\n    for num in nums:\n        if num in countDict:\n            countDict[num] += 1\n        else:\n            countDict[num] = 1\n    maxValue = 0\n    maxKey = -1\n    for key, value in countDict.items():\n        if value > maxValue:\n            maxValue = value\n            maxKey = key\n    return maxKey\ndef median(nums):\n    nums.sort()\n    if len(nums) % 2 == 0:\n        return (nums[len(nums)//2] + nums[len(nums)//2-1])/2\n    else:\n        return nums[(len(nums)-1)//2]\nif __name__ == '__main__':\n    nums = [1,2,2,2,3,4,5]\n    print(\"Mean: \", mean(nums))\n    print(\"Mode: \", mode(nums))\n    print(\"Median: \", median(nums))\n```"}]}
{"dataset": "code_high", "id": "code_high_178", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nJoin two dictionaries by adding the values with the same key.\n\n### Input:\nd1 = {\"a\": 1, \"b\": 2, \"c\": 3}\nd2 = {\"a\": 10, \"d\": 20, \"e\": 30}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef join_dictionaries(d1, d2):\n    ''' \n    This function joins two dictionaries by adding their values with\n    the same key\n    '''\n    result = {}\n    for k1, v1 in d1.items():\n        result[k1] = v1\n    \n    for k2, v2 in d2.items():\n        if k2 in result.keys():\n            result[k2] += v2\n        else:\n            result[k2] = v2\n            \n    return result\nif __name__ == '__main__':\n    d1 = {\"a\": 1, \"b\": 2, \"c\": 3}\n    d2 = {\"a\": 10, \"d\": 20, \"e\": 30}\n    print(join_dictionaries(d1, d2))\n```"}]}
{"dataset": "code_high", "id": "code_high_179", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind all substrings of a string that are palindromes in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_all_palindromes(input_string):\n    palindromes = []\n    for substring_length in range(len(input_string)):\n        for i in range(len(input_string) - substring_length + 1):\n            sub_string = input_string[i: i + substring_length]\n            if sub_string == sub_string[::-1]:\n                palindromes.append(sub_string)\n    return palindromes\n# Usage\npalindromes = get_all_palindromes(\"banana\")\nprint(palindromes) # ['a', 'ana', 'anana', 'b', 'na', 'nana']\n```"}]}
{"dataset": "code_high", "id": "code_high_180", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a linked list data structure.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nDesign a linked list data structure\n\"\"\"\nclass ListNode:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def append(self, data):\n        new_node = ListNode(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next is not None:\n                current = current.next\n            current.next = new_node\n    def search(self, target):\n        current = self.head\n        while current is not None:\n            if current.data == target:\n                return current\n            current = current.next\n        return None\n    def print_list(self):\n        current = self.head\n        while current is not None:\n            print(current.data)\n            current = current.next\n```"}]}
{"dataset": "code_high", "id": "code_high_181", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a sorting algorithm that sorts an array using a bubble sort.\n\n### Input:\nnums=[3,4,1,2,9,6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n```"}]}
{"dataset": "code_high", "id": "code_high_182", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to check if a given binary tree is a valid binary search tree\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef isValidBST(root): \n      \n    # Check empty tree  \n    if root is None: \n        return True\n          \n    # Check left subtree recursively  \n    if not isValidBST(root.left): \n        return False\n  \n    # if left is not None then check it has \n    # correct data or not i.e. left node's data \n    # should be less than root's data \n    if (root.left is not None and\n        root.data < root.left.data): \n        return False\n      \n    # Check right subtree recursively  \n    if not isValidBST(root.right): \n        return False\n      \n    # if right is not None then check it has \n    # correct data or not i.e. right node's data \n    # should be greater than root's data \n    if (root.right is not None and\n        root.data > root.right.data): \n        return False\n      \n    # If all conditions satisfied  \n    # then return True  \n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_183", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two string parameters,  s1 and s2, construct a function that returns the longest common subsequence between the two strings.\n\n### Input:\ns1 = \"Hello there!\"\ns2 = \"Hi there!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_common_subsequence(s1, s2):\n    # Init matrix \n    num_rows = len(s1) + 1\n    num_cols = len(s2) + 1\n    matrix = [[0 for x in range(num_cols)] for y in range(num_rows)]\n    # Populate matrix\n    for r in range(1, num_rows):\n        for c in range(1, num_cols):\n            if s1[r-1] == s2[c-1]:\n                matrix[r][c] = matrix[r-1][c-1] + 1\n            else:\n                matrix[r][c] = max(matrix[r-1][c], matrix[r][c-1])\n    # Create result\n    result = \"\"\n    r = num_rows - 1\n    c = num_cols - 1\n    while r > 0 and c > 0:\n        if s1[r-1] == s2[c-1]:\n            result = s1[r-1] + result\n            r -= 1\n            c -= 1\n        elif matrix[r-1][c] > matrix[r][c-1]:\n            r -= 1\n        else:\n            c -= 1\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_184", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to delete a node with a given value from the Linked List.\n\n### Input:\nlinked_list = [10, 5, 3, 4, 6, 5]\nvalue = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Delete a Node from a Linked List\n \n# Node class \nclass Node: \n    def __init__(self, data): \n        self.data = data \n        self.next = None\n  \n# LinkedList class \nclass LinkedList: \n    def __init__(self): \n        self.head = None\n  \n    # Function to delete a node with a given value \n    def delete_by_value(self, value): \n        # Check if Linked List is empty \n        if self.head is None: \n            return \n  \n        # Keep a track of the current node\n        current = self.head \n  \n        # Check to delete the head node \n        if current.data == value: \n            self.head = current.next\n            current = None\n            return \n  \n        # Iterate through the Linked List\n        while current.next is not None: \n            # Get the next node \n            next_node = current.next\n            # Check if the node contains the value \n            if next_node.data == value: \n                # Delete the node and break out of the loop\n                current.next = None\n                current.next = next_node.next\n                break\n  \n            # Step to the next node\n            current = current.next\n  \n# Main Program \nlinked_list = LinkedList()\nlinked_list.head = Node(10)\nlinked_list.head.next = Node(5)\nlinked_list.head.next.next = Node(3)\nlinked_list.head.next.next.next = Node(4)\nlinked_list.head.next.next.next.next = Node(6)\nlinked_list.head.next.next.next.next.next = Node(5)\nvalue = 5\nlinked_list.delete_by_value(value)\n```"}]}
{"dataset": "code_high", "id": "code_high_185", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the edit distance between two provided words using the Levenshtein algorithm.\n\n### Input:\nword1 = \"cat\"\nword2 = \"bat\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef levenshteinDistance(word1, word2):\n  m = len(word1)\n  n = len(word2)\n  \n  dp = [[0 for i in range(n + 1)] for j in range(m + 1)] \n  \n  for i in range(m + 1): \n    for j in range(n + 1): \n      if i == 0: \n        dp[i][j] = j\n        \n      elif j == 0: \n        dp[i][j] = i\n      \n      elif word1[i - 1] == word2[j - 1]: \n        dp[i][j] = dp[i - 1][j - 1] \n      \n      else: \n        dp[i][j] = 1 + min(dp[i][j - 1],  \n                            dp[i - 1][j],  \n                            dp[i - 1][j - 1]) \n  return dp[m][n]\n```"}]}
{"dataset": "code_high", "id": "code_high_186", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings, find the longest common substring between them.\n\n### Input:\ns1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\ns1 = \"Hello, world!\"\ns2 = \"world, goodbye!\"\nprint(longest_substring(s1, s2))\n# Output: world\n```"}]}
{"dataset": "code_high", "id": "code_high_187", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, write an algorithm to reorder the array so that all the negative integers appear before all the positive integers.\n\n### Input:\narr = [4, -7, -3, 9, 1, -4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reorder_arr(arr): \n  negatives = [] \n  positives = [] \n  for item in arr: \n    if item < 0: \n      negatives.append(item) \n    elif item >= 0: \n      positives.append(item) \n    \n  return negatives + positives\n```"}]}
{"dataset": "code_high", "id": "code_high_188", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a binary tree, write a function to serialize and deserialize the tree.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef serialize(root):\n    if not root:\n        return \"None\"\n \n    serializedTree = root.val\n \n    serializedTree += \",\" + serialize(root.left)\n    serializedTree += \",\" + serialize(root.right)\n    return serializedTree\n \ndef deserialize(serializedTree):\n    q = deque(serializedTree.split(','))\n \n    def recur(q): \n        val = q.popleft()\n        if val == 'None':\n            return None\n        count = TreeNode(val)\n        count.left = recur(q)\n        count.right = recur(q)\n        return count\n \n    return recur(q)\n```"}]}
{"dataset": "code_high", "id": "code_high_189", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function \u2018fibonacci\u2019 which takes an argument \u2018n\u2019 and prints the Fibonacci series up to the nth term.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n):\n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\")\n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n     for i in range(2,n):\n       c = a + b\n       a = b\n       b = c\n     return b\n```"}]}
{"dataset": "code_high", "id": "code_high_190", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script that prints the prime numbers up to a given integer n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef printPrimesUpTo_n(n):\n    while n > 1:\n        if not (n % 2 and n > 2):\n            flag = False\n            for i in range(2, int(n**0.5) +1):\n                if not n % i:\n                    flag = True\n                    break\n            if not flag:\n                print(n)\n        n -= 1\n```"}]}
{"dataset": "code_high", "id": "code_high_191", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to insert an element into a binary search tree.\n\n### Input:\ntree = \n    5\n   / \\\n  2   8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insert(self,val): \n\tif not self.root: \n\t\tself.root = Node(val) \n\telse: \n\t\tcurrent = self.root\n\t\twhile True: \n\t\t\tif val < current.val: \n\t\t\t\tif current.left: \n\t\t\t\t\tcurrent = current.left \n\t\t\t\telse: \n\t\t\t\t\tcurrent.left = Node(val) \n\t\t\t\t\tbreak\n\t\t\telif val > current.val: \n\t\t\t\tif current.right: \n\t\t\t\t\tcurrent = current.right \n\t\t\t\telse: \n\t\t\t\t\tcurrent.right = Node(val) \n\t\t\t\t\tbreak\n\t\t\telse: \n\t\t\t\tbreak\n```"}]}
{"dataset": "code_high", "id": "code_high_192", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in Python to print all prime numbers in a given range.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_prime_numbers(start, end): \n      \n    for i in range(start, end + 1): \n        if is_prime_number(i): \n            print(i, end = \" \")\n  \ndef is_prime_number(num): \n      \n    if num > 1: \n          \n        # Iterate from 2 to n / 2  \n        for i in range(2, num//2):  \n            if (num % i) == 0: \n                return False\n        return True\n    else: \n        return False\n```"}]}
{"dataset": "code_high", "id": "code_high_193", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to perform recursive binary search in a sorted array\n\n### Response:"}, {"role": "assistant", "content": "```python\n#returns the index of the target, if it is found\ndef binary_search(arr,left,right,target):\n    # Check base case \n    if right >= left:\n        mid = left + (right - left) // 2 \n  \n        # If element is present at the middle itself \n        if arr[mid] == target:\n            return mid \n          \n        # If element is smaller than mid, then it  \n        # can only be present in left subarray\n        elif arr[mid] > target:\n            return binary_search(arr, left, mid-1,target)\n       \n        # Else the element can only be present  \n        # in right subarray\n        else:\n            return binary_search(arr, mid + 1, right,target) \n    else: \n        # Element is not present in the array \n        return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_194", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a class in Python which will represent a binary search tree.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass BinarySearchTree:\n \n    def __init__(self, value): \n        self.left = None\n        self.right = None\n        self.value = value\n \n    def inorder(self):\n        if self.left:\n            self.left.inorder()\n        print(self.value)\n        if self.right:\n            self.right.inorder()\n \n    def insert(self, value):\n        if value <= self.value:\n            if self.left is None:\n                self.left = BinarySearchTree(value)\n            else:\n                self.left.insert(value)\n        elif value > self.value:\n            if self.right is None:\n                self.right = BinarySearchTree(value)\n            else:\n                self.right.insert(value)\n```"}]}
{"dataset": "code_high", "id": "code_high_195", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to compute the Fibonacci numbers and the sum of their squares.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci (n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\ndef sum_of_squares (n):\n    result = 0\n    for i in range(n+1):\n        result += fibonacci(i)**2\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_196", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to split a list of numbers into two sets with equal sum\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef split_list(list):\n    start = 0\n    end = len(list) - 1\n    left_sum = 0\n    right_sum = sum(list[start:end+1])\n    while start < end:\n        right_sum -= list[end]\n        if left_sum == right_sum:\n            break\n        left_sum += list[start]\n        start += 1\n    if left_sum == right_sum:\n        return list[:start], list[start:]\n    else:\n        return None\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    left, right = split_list(arr)\n    print(\"left set:\", left)  # prints [1, 2, 3, 4]\n    print(\"right set:\", right)  # prints [5, 6, 7]\n```"}]}
{"dataset": "code_high", "id": "code_high_197", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a loop and a conditional statement in Python, check if the number is a prime number.\n\n### Input:\nlet number = 13;\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(number):\n    if (number <= 1):\n        return False\n    if (number <= 3):\n        return True\n    if (number % 2 == 0 or number % 3 == 0):\n        return False\n    i = 5\n    while (i * i <= number):\n        if (number % i == 0 or number % (i + 2) == 0):\n            return False\n        i +=6\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_198", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDefine a function to calculate the median of a given array of numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef median(numbers):\n    sorted_numbers = sorted(numbers)\n    if len(numbers) % 2 == 1:\n        return sorted_numbers[len(numbers)//2]\n    else:\n        middle1 = sorted_numbers[len(numbers)//2]\n        middle2 = sorted_numbers[len(numbers)//2 - 1]\n        return (middle1 + middle2) / 2\n```"}]}
{"dataset": "code_high", "id": "code_high_199", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest an algorithm to compute the sum of all prime numbers from 2 to n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_primes(n):\n    # Initialize sum to 0\n    sum_prime = 0\n    # Iterate through all numbers from 0 to n\n    for num in range(2, n+1):\n        is_prime = True\n        \n        # Check whether the number is prime\n        for div in range(2, num):\n            if num % div == 0:\n                is_prime = False\n                break\n        \n        # If the number is prime, add it to the sum\n        if is_prime:\n            sum_prime += num\n    # Return the sum\n    return sum_prime\n```"}]}
{"dataset": "code_high", "id": "code_high_200", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm in python to find the length of the longest common substring between two strings\n\n### Input:\nstr1 = \"'abbcdefg\"\nstr2 = \"zabxdefujh\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_common_substring(str1, str2):\n    len1 = len(str1)\n    len2 = len(str2)\n    result = 0\n    dp = [[0 for x in range(len2+1)] for x in range(len1+1)]\n    for i in range(len1+1):\n        for j in range(len2+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n                result = max(result, dp[i][j])\n            else:\n                dp[i][j] = 0\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_201", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string and an integer N, write a Python function to construct the Nth palindromic string.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef construct_palindrome(string, N):\n    length = len(string)\n    mid = length // 2\n    left = string[:mid]\n    right = left[::-1]\n    if length % 2 == 0:\n        left = string[:mid - (N - 1)]\n        right = left[::-1]\n    else:\n        left = string[:mid - N]\n        right = string[mid + 1:(mid + 1) + N][::-1]\n    return left + string[mid] + right\n```"}]}
{"dataset": "code_high", "id": "code_high_202", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the code to implement a shell sort algorithm in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef shell_sort(arr):\n    n = len(arr)\n    gap = n//2\n \n    while gap > 0:\n \n        for i in range(gap,n):\n            temp = arr[i]\n            j = i\n            while  j >= gap and arr[j-gap] >temp:\n                arr[j] = arr[j-gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n```"}]}
{"dataset": "code_high", "id": "code_high_203", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes two strings and returns a boolean representing whether or not the strings are anagrams of one another.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_anagram(string1, string2):\n    # remove whitespaces\n    string1 = string1.replace(\" \",\"\")\n    string2 = string2.replace(\" \",\"\")\n    # check length\n    if len(string1) != len(string2):\n        return False\n    # create counters\n    counter = {}\n    for letter in string1:\n        if letter in counter :\n            counter[letter] += 1\n        else:\n            counter[letter] = 1\n            \n    for letter in string2:\n        if letter in counter:\n            counter[letter] -= 1\n        else:\n            return False\n        \n    # Check all values are 0\n    for key in counter:\n        if counter[key] != 0:\n            return False\n    \n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_204", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function to check whether a string is a valid IPv4 address or not.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_valid_ipv4(string):\n    # Split the string at the '.'s\n    parts = string.split(\".\")\n    # Check if the length of the parts is valid\n    if len(parts) != 4:\n            return False\n    # Iterate over each part and check if it is a valid number\n    for part in parts:\n        if not part.isdigit() or int(part) > 255 or int(part) < 0:\n            return False\n    return True\nif __name__ == '__main__':\n    string = \"192.168.1.1\"\n    print(is_valid_ipv4(string))\n```"}]}
{"dataset": "code_high", "id": "code_high_205", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a program to sort an array of integers using bubble sort.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n```"}]}
{"dataset": "code_high", "id": "code_high_206", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, implement a quick sort algorithm.\n\n### Input:\n[7, 4, 5, 9, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n \n    pivot = arr[0]\n    less = [i for i in arr[1:] if i <= pivot]\n    greater = [i for i in arr[1:] if i > pivot]\n \n    return quick_sort(less) + [pivot] + quick_sort(greater)\nif __name__ == '__main__':\n    arr = [7, 4, 5, 9, 1]\n    print(quick_sort(arr)) # Output:[1, 4, 5, 7, 9]\n```"}]}
{"dataset": "code_high", "id": "code_high_207", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that finds the longest common subsequence of two strings.\n\n### Input:\nstr1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef lcs(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    table = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                table[i][j] = 0\n            elif str1[i-1] == str2[j-1]:\n                table[i][j] = table[i-1][j-1] + 1\n            else:\n                table[i][j] = max(table[i-1][j], table[i][j-1])\n    lcs = []\n    i = m\n    j = n\n    while i > 0 and j > 0:\n        if str1[i-1] == str2[j-1]:\n            lcs.append(str1[i-1])\n            i -= 1\n            j -= 1\n        elif table[i-1][j] > table[i][j-1]:\n            i -= 1\n        else:\n            j -= 1\n    return lcs[::-1]\nstr1 = \"ABGXABCAB\"\nstr2 = \"ZXABGAYBCB\"\nprint(lcs(str1, str2))\n```"}]}
{"dataset": "code_high", "id": "code_high_208", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompress a given string to shorter characters by replacing substrings of length 3.\n\n### Input:\nstring = \"aaabbcc\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compress(string):\n    compressed = \"\"\n    count = 1\n    for i in range(len(string)):\n        if (i+1 < len(string) and string[i] == string[i+1]):\n            count += 1\n        else:\n            if count > 3:\n                compressed += string[i] + str(count)\n            else:\n                compressed += string[i]*count\n            count = 1\n    return compressed\nstring = \"aaabbcc\"\nprint(compress(string)) # output: a3b2c2\n```"}]}
{"dataset": "code_high", "id": "code_high_209", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm in Python for the given data.\n\n### Input:\nData: [4, 2, 3, 8, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_data(data):\n    for i in range(len(data)):\n        min_index = i\n        for j in range(i+1, len(data)):\n            if data[min_index] > data[j]:\n                min_index = j\n        data[i], data[min_index] = data[min_index], data[i]\n       \n    return data\n```"}]}
{"dataset": "code_high", "id": "code_high_210", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers and a target number, write a Python program to find if there exists a sublist whose sum equals the target.\n\n### Input:\nnumbers = [2, 4, 8, 9, 5, 7], target = 15\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sublist_sum(numbers, target) : \n    n = len(numbers) \n  \n    # Consider all sublists of arr[] and return \n    # true if given sum is present in any of them \n    for i in range(n) : \n        curr_sum = numbers[i] \n  \n        # Try different endpoints for current subarray \n        j = i+1\n        while j<=n : \n  \n            if curr_sum == target : \n                return True\n  \n            if curr_sum > target or j == n: \n                break\n  \n            curr_sum = curr_sum + numbers[j] \n            j += 1\n  \n    return False\n```"}]}
{"dataset": "code_high", "id": "code_high_211", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that prints a given 2D array in a spiral form.\n\n### Input:\na = [[1,2,3],[4,5,6],[7,8,9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef spiral_print(a):\n    m = len(a)\n    n = len(a[0])\n \n    t = 0   #top\n    b = m-1 #bottom\n    l = 0   #left\n    r = n-1 #right\n    dir = 0\n    while l<=r and t<=b:\n        if dir == 0:\n            for i in range(l, r+1):\n                print(a[t][i], end=\" \")\n            t += 1\n        elif dir == 1:\n            for i in range(t, b+1):\n                print(a[i][r], end=\" \")\n            r -= 1\n        elif dir == 2:\n            for i in range(r, l-1, -1):\n                print(a[b][i], end=\" \")\n            b -= 1\n        elif dir == 3:\n            for i in range(b, t-1, -1):\n                print(a[i][l], end=\" \")\n            l += 1\n        dir=(dir+1)%4\n```"}]}
{"dataset": "code_high", "id": "code_high_212", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to encrypt a text using a Ceasar cipher\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef ceasar_cipher(plaintext, shift): \n    ciphertext = \"\" \n    for i in range(len(plaintext)): \n        char = plaintext[i] \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + shift - 65) % 26 + 65)\n        else: \n            ciphertext += chr((ord(char) + shift - 97) % 26 + 97)\n    return ciphertext\n```"}]}
{"dataset": "code_high", "id": "code_high_213", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a sorting algorithm to sort an array in increasing order.\n\n### Input:\narray = [4,7,1,3,9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(arr): \n    arr_length = len(arr)\n    # Iterate through entire array \n    for i in range(arr_length): \n        # Iterate through unsorted subarray \n        for j in range(0, arr_length-i-1): \n            # Swap items if needed\n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Test our Bubble sort implementation\narr = [4,7,1,3,9] \nbubble_sort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])\n```"}]}
{"dataset": "code_high", "id": "code_high_214", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to perform a Merge Sort on an unsorted array of numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef mergeSort(arr): \n    if len(arr) >1: \n        mid = len(arr)//2 \n        L = arr[:mid] \n        R = arr[mid:] \n  \n        mergeSort(L) \n        mergeSort(R) \n  \n        i = j = k = 0\n          \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n          \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\n```"}]}
{"dataset": "code_high", "id": "code_high_215", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a string representation of a binary tree.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef tree_str(root):\n    if root is None:\n        return ''\n    left_str = tree_str(root.left)\n    right_str = tree_str(root.right)\n    if left_str != '' and right_str != '':\n        return '(' + left_str + ')' + str(root.val) + '(' + right_str + ')'\n    if left_str != '' and right_str == '':\n        return '(' + left_str + ')' + str(root.val)\n    if left_str == '' and right_str != '':\n        return  str(root.val) + '(' + right_str + ')'\n    else:\n        return str(root.val)\n```"}]}
{"dataset": "code_high", "id": "code_high_216", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a solution to this algorithm problem.\n\n### Input:\nGiven an int array A, find the min absolute difference between any two of its elements.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef minAbsDifference(arr):\n    min_difference = float(\"inf\")\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff < min_difference:\n                min_difference = diff\n    return min_difference\n```"}]}
{"dataset": "code_high", "id": "code_high_217", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a stack using a linked list.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Stack:\n    class Node:\n        def __init__(self, value):#, next=None):\n            self.value = value\n            self.next = None\n    def __init__(self):\n        self.head = None\n        self.count = 0\n    def isEmpty(self):\n        if self.count == 0:\n            return True\n        return False\n    def push(self, value):\n        node = self.Node(value)\n        node.next = self.head\n        self.head = node\n        self.count += 1\n    def pop(self):\n        if self.head == None:\n            return None\n        result = self.head.value\n        self.head = self.head.next\n        self.count -= 1\n        return result\n```"}]}
{"dataset": "code_high", "id": "code_high_218", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFill in the blanks of the following Python code to implement a Selection Sort algorithm.\n\n### Input:\ndef selection_sort(arr):\n    for [i] in [range](len(arr),1,-1):\n        max_element=arr[0]\n        for [j] in [range]([i]):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        [temp] = arr[i]\n        arr[i] = max_element\n        arr[arr.index(max_element)] = [temp]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef selection_sort(arr):\n    for i in range(len(arr),1,-1):\n        max_element=arr[0]\n        for j in range(i):\n            if arr[j] > max_element :\n                max_element=arr[j]\n          \n        temp = arr[i-1]\n        arr[i-1] = max_element\n        arr[arr.index(max_element)] = temp\n```"}]}
{"dataset": "code_high", "id": "code_high_219", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that will check if a given string is a palindrome or not without using extra space.\n\n### Input:\nstring = \"level\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_palindrome(string):\n    left, right = 0, len(string)-1\n    \n    while right >= left:\n        if string[left] != string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n    \nif is_palindrome(string):\n    print(\"The string is a palindrome\")\nelse:\n    print(\"The string is not a palindrome\")\n```"}]}
{"dataset": "code_high", "id": "code_high_220", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a 2D matrix of integers, find a path from the leftmost column to the right-most column that maximises the sum of numbers.\n\n### Input:\n[[3,4,7,2],\n[2,7,4,1],\n[7,1,2,4],\n[8,2,2,7]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_sum_path(matrix):\n    rows, columns = len(matrix), len(matrix[0])\n    dp = [[float(\"-inf\") for i in range(columns)] for j in range(rows)]\n    dp[0][0] = matrix[0][0]\n    for i in range(rows):\n        for j in range(columns):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n    return dp[-1][-1]\n```"}]}
{"dataset": "code_high", "id": "code_high_221", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a stack data structure using linked lists.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.next = None\nclass Stack:\n\tdef __init__(self):\n\t\tself.head = None\n\t\tself.num_elements = 0\n\tdef push(self, element):\n\t\tnew_node = Node(element)\n\t\tif self.head == None:\n\t\t\tself.head = new_node\n\t\telse:\n\t\t\tnew_node.next = self.head\n\t\t\tself.head = new_node\n\t\tself.num_elements += 1\n\t\t\n\tdef pop(self):\n\t\tif self.is_empty():\n\t\t\treturn None\n\t\ttemp = self.head\n\t\tself.head = self.head.next\n\t\tself.num_elements -= 1\n\t\treturn temp.data\n\tdef is_empty(self):\n\t\tif self.num_elements == 0:\n\t\t\treturn True\n\t\treturn False\n\tdef top(self):\n\t\tif self.head:\n\t\t\treturn self.head.data\n\t\treturn None\n```"}]}
{"dataset": "code_high", "id": "code_high_222", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nReverse the words in a sentence stored as a list in Python.\n\n### Input:\n['word', 'one', 'is', 'this']\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_words(words):\n    # Get the length of the words\n    n = len(words)\n    # Reverse the list words\n    for i in range(n // 2):\n        words[i], words[n - 1 - i] = words[n - 1 - i], words[i]\n    return words\nif __name__ == \"__main__\":\n    words = ['word', 'one', 'is', 'this']\n    print(reverse_words(words))\n```"}]}
{"dataset": "code_high", "id": "code_high_223", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to print out the Fibonacci sequence up to 20 numbers\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b \n# Driver Program \nprint(\"Fibonacci sequence:\") \nfor i in range(20): \n    print(fibonacci(i))\n```"}]}
{"dataset": "code_high", "id": "code_high_224", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes a string of brackets and checks if they are correctly matched or not.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef check_brackets(bracket_string):\n    \"\"\"\n    Function that checks if bracket string is correctly matched.\n    \"\"\"\n    stack = []\n    open_brackets = {'[', '{', '('}\n    close_brackets = {']', '}', ')'}\n    \n    for bracket in bracket_string:\n        if bracket in open_brackets:\n            stack.append(bracket)\n        elif bracket in close_brackets:\n            if not stack or close_brackets[bracket] != stack.pop():\n                return False\n        \n    return not stack\n```"}]}
{"dataset": "code_high", "id": "code_high_225", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes two strings and finds the longest common substring between them.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\n```"}]}
{"dataset": "code_high", "id": "code_high_226", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that calculates the Levenshtein Distance of two strings.\n\n### Input:\nstr1 = \"hackathon\"\nstr2 = \"hack\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_levenshtein_distance(str1, str2):    \n    distances = np.zeros((len(str1)+1, len(str2)+1))\n    for i in range(0, len(str1)+1):\n        distances[i, 0] = i\n    for j in range(0, len(str2)+1):\n        distances[0, j] = j\n    for i in range(1, len(str1)+1):\n        for j in range(1, len(str2)+1):\n            if str1[i-1] == str2[j-1]:\n                distances[i, j] = distances[i-1, j-1]\n            else:\n                distances[i, j] = min(distances[i-1, j], distances[i, j-1], distances[i-1, j-1]) + 1\n    return distances[len(str1), len(str2)]\n```"}]}
{"dataset": "code_high", "id": "code_high_227", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function to generate all prime numbers less than a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_prime_numbers(n): \n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n        if is_prime: \n            primes.append(num) \n    return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_228", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to find all the prime numbers from 2 to n (where n is a given input).\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_primes(n):\n    primes=[]\n    for num in range(2, n+1):\n        for n in range(2, num):\n            if num%n==0:\n                break\n            \n        else:\n            primes.append(num)\n    return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_229", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide a demo snippet to illustrate different ways of looping through a Python dictionary.\n\n### Response:"}, {"role": "assistant", "content": "```python\n#Looping through a dictionary using a for loop \ndict = {'a': 1, 'b': 2, 'c': 3, 'd': 4} \n  \nfor key in dict: \n    print(\"% s : % s\" %(key, dict[key])) \n  \n#Looping through a dictionary using items() method \nfor key, value in dict.items(): \n    print(\"% s : % s\" %(key, value)) \n  \n#Looping through dictionary keys \nfor key in dict.keys(): \n    print(\"% s : % s\" %(key, dict[key])) \n  \n#Looping through dictionary values \nfor value in dict.values(): \n    print(\"% s\" %value)\n```"}]}
{"dataset": "code_high", "id": "code_high_230", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a Python program to generate a prime numbers list in a given range.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_numbers(start_num, end_num):\n    prime_nums_list = []\n    for num in range(start_num, end_num + 1):  \n        # all prime numbers are greater than 1  \n        if num > 1:  \n            for i in range(2,num):  \n                if (num % i) == 0:  \n                    break  \n            else:  \n                prime_nums_list.append(num)\n    return prime_nums_list\n```"}]}
{"dataset": "code_high", "id": "code_high_231", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a function to encode a text string in a ROT13 manner.\n\n### Input:\nString: \"Hello World\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef rot13(message):\n    output = []\n    for char in message:\n        char_code = ord(char)\n        if char_code >= ord('A') and char_code <= ord('Z'):\n            # Rotate lower case characters\n            char_code += 13\n            if char_code > ord('Z'):\n                char_code -= 26\n        elif char_code >= ord('a') and char_code <= ord('z'):\n            # Rotate upper case characters\n            char_code += 13\n            if char_code > ord('z'):\n                char_code -= 26\n        output.append(chr(char_code))\n    return ''.join(output)\nprint(rot13(\"Hello World\"))\n```"}]}
{"dataset": "code_high", "id": "code_high_232", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to generate the Pascal's triangle\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef pascal_triangle(n): \n  \n    # Create an empty list \n    pascal=[]\n  \n    for line in range(1, n+1): \n        l=[1]\n        for i in range(1,line): \n            l.append(pascal[line-2][i-1]+pascal[line-2][i]) \n        l.append(1) \n        pascal.append(l)\n                     \n    return pascal \n  \nprint(pascal_triangle(6))\n# Output -> [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1]]\n```"}]}
{"dataset": "code_high", "id": "code_high_233", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of words, sort them using a bubble sort algorithm.\n\n### Input:\n['apple', 'banana', 'cherry', 'date']\n\n### Response:"}, {"role": "assistant", "content": "```python\n['apple', 'banana', 'cherry', 'date']\ndef bubble_sort(words):\n    n = len(words)\n    for i in range(n): \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n            if words[j] > words[j+1]: \n                words[j], words[j+1] = words[j+1], words[j]\n    return words\n```"}]}
{"dataset": "code_high", "id": "code_high_234", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate code for printing a given 2D matrix in spiral order\n\n### Input:\nmatrix = [[1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_spiral(matrix):\n    # matrix is an 2D array \n    row_start = 0\n    row_end = len(matrix)-1\n    col_start = 0\n    col_end = len(matrix[0])-1\n    while row_start <= row_end and col_start <= col_end:\n        # print top row \n        for i in range(col_start, col_end+1):\n            print(matrix[row_start][i])\n        # increment row start \n        row_start += 1\n        # print right column\n        for i in range(row_start, row_end+1):\n            print(matrix[i][col_end])\n        # decrement col end\n        col_end -= 1\n        \n        # print bottom row\n        if row_start <= row_end:\n            for i in range(col_end, col_start-1, -1):\n                print(matrix[row_end][i])\n            # decrement row end\n            row_end -= 1\n        # print left column\n        if col_start <= col_end:\n            for i in range(row_end, row_start-1, -1):\n                print(matrix[i][col_start])\n            # increment col start\n            col_start += 1\n```"}]}
{"dataset": "code_high", "id": "code_high_235", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in python to find the longest common contiguous subarray between two integers.\n\n### Input:\nint arr1[7] = {1,2,4,4,4,4,7}\nint arr2[5] = {1,4,4,5,5}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef long_com_subarr(arr1, arr2):\n    len1 = len(arr1)\n    len2 = len(arr2)\n    res = 0\n    count = 0 \n    \n    for i in range(len1):\n        for j in range(len2):\n            if arr1[i] == arr2[j]:\n                count += 1\n            else: \n                if result < count:\n                    res = count\n                count = 0\n    \n    return res\n```"}]}
{"dataset": "code_high", "id": "code_high_236", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the given list of integers in descending order using the Bubble sort technique.\n\n### Input:\n[3, 5, 2, 8, 9, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort_descending(nums):\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] < nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\na = [3, 5, 2, 8, 9, 1]\na = bubble_sort_descending(a)\nprint(a) # prints [9, 8, 5, 3, 2, 1]\n```"}]}
{"dataset": "code_high", "id": "code_high_237", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements in the list.\n\n### Input:\n[1, 3, 5, 8, 9, 10, 11, 15]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a Python function which takes in a list and returns the length of the longest common subsequence of consecutive elements.\n\"\"\"\ndef long_consec_sequence(lst):\n    if not lst:\n        return 0\n    \n    # initialize the size of the longest subsequence \n    max_seq_len = 0\n    \n    # iterate through the list \n    for i in range(len(lst)-1) : \n        \n        # create a new sequence \n        curr_seq = 1\n    \n        j = i+1\n        while (j < len(lst)): \n            if (lst[j] - lst[j-1]) == 1 : \n                curr_seq += 1 \n            else: \n                break\n            j += 1\n        \n        # update the length of the maximum subsequence\n        if curr_seq > max_seq_len: \n            max_seq_len = curr_seq \n    \n    # return the length of the maximum consecutive subsequence\n    return max_seq_len \nif __name__ == '__main__':\n    lst = [1, 3, 5, 8, 9, 10, 11, 15]\n    print(long_consec_sequence(lst)) # Output: 4\n```"}]}
{"dataset": "code_high", "id": "code_high_238", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to create a naive bayes model.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass NaiveBayesModel: \n    def __init__(self): \n        pass \n      \n    def train(self, data, labels): \n        self.prior_probability = self.calculatePriorProbabilities(labels)\n        self.likelihoods = self.calculateLikelihoods(data, labels)\n    \n    def calculatePriorProbabilities(self, labels): \n        labels_counts = {} \n        for label in labels: \n            if label not in labels_counts: \n                labels_counts[label] = 0 \n            labels_counts[label] += 1 \n              \n        return {label: count/len(labels)\n                for label, count in labels_counts.items()} \n    def calculateLikelihoods(self, data, labels): \n        likelihoods = {} \n        for feature, values in data.items(): \n            likelihoods[feature] = {} \n            for label in labels: \n                for value in values: \n                    pass # complete the calculation\n                    \n        return likelihoods\n```"}]}
{"dataset": "code_high", "id": "code_high_239", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the longest substring of two characters that is a palindrome.\n\n### Input:\nstring = \"banana\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_palindrome(string):\n    # Create an empty substring\n    longest_substring = ''\n    \n    # Iterate through the string\n    for i in range(len(string)-1): \n        for j in range(i+1, len(string)):\n            substring = string[i:j+1]\n            if substring == substring[::-1] and len(substring) > len(longest_substring):\n                longest_substring = substring\n    return longest_substring\n# Call the function\nlongest_palindrome('banana') # returns 'anana'\n```"}]}
{"dataset": "code_high", "id": "code_high_240", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers and a target sum, write a Python program to determine whether there is a set of three numbers in the list that add up to the target sum.\n\n### Input:\n[2, 7, 5, 1, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_target_sum(nums, target_sum):\n    for i in range(0, len(nums) - 2):\n        for j in range(i+1, len(nums) - 1):\n            for k in range(j+1, len(nums)):\n                if nums[i] + nums[j] + nums[k] == target_sum:\n                    return True\n    return False\n```"}]}
{"dataset": "code_high", "id": "code_high_241", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method in Python to generate all the prime numbers between 1 and 100.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_generator(n):\n    primes = []\n    for i in range(2, n+1):\n        is_prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\nprint(prime_generator(100))\n```"}]}
{"dataset": "code_high", "id": "code_high_242", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a bubble sort on the given array of integers.\n\n### Input:\n[4, 8, 1, 3, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(arr):\n  for _ in range(len(arr) -1): \n    for i in range(len(arr)-1):\n      if arr[i] > arr[i+1]:\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\nprint(bubble_sort([4, 8, 1, 3, 9])) # [1, 3, 4, 8, 9]\n```"}]}
{"dataset": "code_high", "id": "code_high_243", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to construct a BST with the elements 11, 18, 14, 6 and 7.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# A node  \nclass Node:  \n    def __init__(self,key): \n        self.left = None\n        self.right = None\n        self.val = key \n# A function to insert a new node with the given key  \ndef insert(root,node): \n    if root is None: \n        root = node \n    else: \n        if root.val < node.val: \n            if root.right is None: \n                root.right = node \n            else: \n                insert(root.right, node) \n        else: \n            if root.left is None: \n                root.left = node \n            else: \n                insert(root.left, node) \n# Create root node with the key 11  \nroot = Node(11)  \ninsert(root,Node(18))  \ninsert(root,Node(14))  \ninsert(root,Node(6))  \ninsert(root,Node(7))\n```"}]}
{"dataset": "code_high", "id": "code_high_244", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the merge sort algorithm to sort a given array ascending.\n\n### Input:\ngiven_array = [7,9,3,8,1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_sort(arr):\n    if len(arr) > 1: \n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        #calling merge sort function on left and right arrays\n        merge_sort(L) \n        merge_sort(R) \n        i = j = k = 0\n        # Copying data to temp arrays L[] and R[] \n        while i < len(L) and j < len(R): \n            if L[i] < R[j]: \n                arr[k] = L[i] \n                i+=1\n            else: \n                arr[k] = R[j] \n                j+=1\n            k+=1\n  \n        # Checking if any element was left \n        while i < len(L): \n            arr[k] = L[i] \n            i+=1\n            k+=1\n          \n        while j < len(R): \n            arr[k] = R[j] \n            j+=1\n            k+=1\nar =[7,9,3,8,1]\nmerge_sort(ar)\n# printing sorted array \nprint (ar)\n```"}]}
{"dataset": "code_high", "id": "code_high_245", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes an array as input and returns true if all elements in the array are similarly oriented (i.e. either all positive or all negative).\n\n### Input:\n[-2, -4, -7, -9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_all_same_sign(arr):\n    is_same_sign = True\n    for i in range(len(arr)):\n        if i == 0:\n            sign = (arr[i] >= 0)\n        else:\n            if (arr[i] < 0) != sign:\n                is_same_sign = False\n    return is_same_sign\n```"}]}
{"dataset": "code_high", "id": "code_high_246", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that evaluates the quadratic equation.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quadratic_equation(a,b,c):\n   discriminant = pow(b,2)-4*a*c\n   if(discriminant < 0):\n      return \"No real solutions\"\n   elif(discriminant == 0):\n      return (-b + pow(discriminant, 0.5))/(2*a)\n   else:\n      return ((-b + pow(discriminant, 0.5))/(2*a), (-b - pow(discriminant, 0.5))/(2*a))\n```"}]}
{"dataset": "code_high", "id": "code_high_247", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code that sums the first n Fibonacci numbers.\n\n### Input:\nnum = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_n_fibonacci_numbers(num):\n    \"\"\"This function takes in a number, n, and sums\n    the first n Fibonacci numbers.\n    \n    Parameters\n    ----------\n    num : int\n        The number of Fibonacci numbers to sum.\n    \n    Returns\n    -------\n    The sum of the first n Fibonacci numbers.\n    \"\"\"\n    \n    fib = [0, 1]\n    if num < 0:\n        return None\n    elif num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    else:\n        for i in range(2, num + 1):\n            fib.append(fib[i-2] + fib[i-1])\n        return sum(fib)\n```"}]}
{"dataset": "code_high", "id": "code_high_248", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, write a recursive program to merge two sorted subarrays ar1 and ar2\n\n### Input:\nar1 = [1, 4, 7, 9]\nar2 = [2, 5, 6, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef mergeSortedSubarrays(ar1, ar2): \n    # if ar1 is empty \n    if len(ar1) == 0: \n        return ar2   \n    # if ar2 is empty \n    if len(ar2) == 0: \n        return ar1 \n  \n    # compare the first elements of each array\n    if ar1[0] < ar2[0]: \n        # add the smaller element to the result\n        result = [ar1[0]] \n        # remove the element from the first array \n        ar1.remove(ar1[0]) \n    else: \n        result = [ar2[0]] \n        ar2.remove(ar2[0]) \n  \n    # call the same function over the remaining elements in the both arrays\n    result = result + mergeSortedSubarrays(ar1, ar2) \n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_249", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to implement a binary search.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(arr, x): \n  \n    # find the leftmost and rightmost point \n    l = 0\n    r = len(arr) - 1\n      \n    while l <= r: \n  \n        mid = l + (r - l)//2\n  \n        # if element is present at the middle  \n        if arr[mid] == x: \n            return mid \n  \n        # if element is smaller than mid,  \n        # then it can only be present  \n        # in left subarray \n        elif arr[mid] < x: \n            l = mid + 1\n  \n        # else the element can only  \n        # be present in right subarray \n        else: \n            r = mid - 1\n      \n    # if we reach here,  \n    # then the element was not present \n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_250", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to show the rating of a movie based on the review comments\n\n### Input:\nrev_comments = [\"Great movie!\", \"The movie was average.\", \"Didn't enjoy it that much\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef rating(reviews):\n    score = 0\n    \n    positive = [\"great\", \"amazing\", \"funny\", \"entertaining\"]\n    negative = [\"bad\", \"mediocre\", \"average\", \"boring\"]\n    \n    for comment in reviews:\n        for word in positive:\n            if word in comment.lower():\n                score += 1\n        for word in negative:\n            if word in comment.lower():\n                score -= 1\n    \n    return score / len(reviews)\n```"}]}
{"dataset": "code_high", "id": "code_high_251", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a binary tree, write a function to print out the elements in level order.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef levelOrder(root): \n    if root is None: \n        return\n    queue = [] \n    queue.append(root)  \n    while(len(queue) > 0): \n        print (queue[0].data), \n        node = queue.pop(0)  \n        if node.left is not None: \n            queue.append(node.left) \n        if node.right is not None: \n            queue.append(node.right)\n```"}]}
{"dataset": "code_high", "id": "code_high_252", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that sorts an array of n numbers using insertion sort.\n\n### Input:\n[5, 3, 2, 4, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insert_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key\n```"}]}
{"dataset": "code_high", "id": "code_high_253", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to create a function to rotate a given linked list.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a function to rotate a given linked list\n\"\"\"\n# Create a class node\nclass Node: \n\t# Create a constructor to initialise the node object \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\nclass LinkedList: \n\t# Create a constructor to initialise the linked list \n\tdef __init__(self): \n\t\tself.head = None\n\t\n\t# Create a function to rotate the linked list \n\tdef rotate(self, index):\n\t\tif (index == 0): \n\t\t\treturn\n\t\tprev = None            \n\t\tcurr = self.head\n\t\twhile (index > 0):\n\t\t\tprev = curr\n\t\t\tcurr = curr.next\n\t\t\tindex -= 1\n\t\t\n\t\tprev.next = None\n\t\tself.head = curr\n\t\twhile (curr.next != None):\n\t\t\tcurr = curr.next\n\t\tcurr.next = self.head\n```"}]}
{"dataset": "code_high", "id": "code_high_254", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm for sorting a list of numbers using bubble sort.\n\n### Input:\n[3,1,5,4,2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\nbubble_sort([3,1,5,4,2])\n```"}]}
{"dataset": "code_high", "id": "code_high_255", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm to generate the permutations of a string\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutations(string):\n    if len(string) <= 1:\n        return set([string])\n    # get the last character\n    last_char = string[-1]\n    # get all permutations for the remaining characters\n    all_permutations = permutations(string[:-1])\n    # create permutations for including the last character\n    permutations_with_last_char = set()\n    for permutation in all_permutations:\n        for idx in range(len(string)):\n            permutation_with_last_char = permutation[:idx] + last_char + permutation[idx:]\n            permutations_with_last_char.add(permutation_with_last_char)\n    return permutations_with_last_char\n```"}]}
{"dataset": "code_high", "id": "code_high_256", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an array of numbers containing only prime numbers between 10 and 50.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_numbers():\n    prime_nums = []\n    for i in range(10, 50):\n        is_prime = True\n        for j in range(2, i):\n            if i%j ==0:\n                is_prime = False\n                break\n        if is_prime:\n            prime_nums.append(i)\n    return prime_nums\n```"}]}
{"dataset": "code_high", "id": "code_high_257", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given two matrices, M1 and M2. Write a python code to multiply them.\n\n### Input:\nM1 : \n[[2, 3], \n [5, 6]]\n\nM2 : \n[[1, 2], \n [3, 4]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef matrix_multiply(M1, M2):\n    M3 = [[0, 0], [0, 0]]\n    for i in range(len(M1)):\n        for j in range(len(M2[0])):\n            for k in range(len(M2)):\n                M3[i][j] += M1[i][k] * M2[k][j]\n    \n    return M3\n```"}]}
{"dataset": "code_high", "id": "code_high_258", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to convert time from 12 hour to 24 hour format.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef convert12to24(time12h):\n    # Check if last two elements of time is AM and first two are 12\n    if time12h[-2:] == \"AM\" and time12h[:2] == \"12\": \n        return \"00\" + time12h[2:-2] \n          \n    # If last two elements of time is AM\n    elif time12h[-2:] == \"AM\": \n        return time12h[:-2] \n      \n    # If last two elements of time is PM and first two are 12    \n    elif time12h[-2:] == \"PM\" and time12h[:2] == \"12\": \n        return time12h[:-2] \n          \n    else: \n          \n        # add 12 to hours and remove AM\n        return str(int(time12h[:2]) + 12) + time12h[2:8]\n```"}]}
{"dataset": "code_high", "id": "code_high_259", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that produces input strings for a calculator.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef create_input_string(nums, ops):\n    input_str = \"\"\n    \n    for i in range(len(nums)):\n        if i == 0:\n            input_str += str(nums[i])\n        else:\n            input_str += ops[i - 1] + str(nums[i])\n    \n    return input_str\n```"}]}
{"dataset": "code_high", "id": "code_high_260", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to delete a node from a given BST.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Node class to define a node of a BST \nclass Node(object): \n  \n    # Constructor \n    def __init__(self, data): \n        self.data = data \n        self.left = None\n        self.right = None\n  \n# Function to delete a given node from BST \ndef delete_node(root, key): \n  \n    # base case \n    if root is None: \n        return None\n  \n    # If the key to be delete is smaller than the root's \n    # key then it lies in left subtree \n    if key < root.data: \n        root.left = delete_node(root.left, key) \n  \n    # If the kye to be delete is greater than the root's key \n    # then it lies in right subtree \n    elif(key > root.data): \n        root.right = delete_node(root.right, key) \n  \n    # if key is same as root's key, then this is the node \n    # to be deleted \n    else: \n        # Node with only one child or no child \n        if root.left is None : \n            temp = root.right \n            root = None\n            return temp \n              \n        elif root.right is None : \n            temp = root.left \n            root = None\n            return temp \n  \n        # Node with two children: Get the inorder successor \n        # (smallest in the right subtree) \n        temp = find_min(root.right) \n  \n        # Copy the inorder successor's content to this node \n        root.data = temp.data \n  \n        # Delete the inorder successor \n        root.right = delete_node(root.right , temp.data) \n  \n  \n    return root \n  \n\"\"\" Helper Functions \"\"\"\n  \n# Function to find the minimum node \ndef find_min(node): \n    current = node \n  \n    # loop down to find the leftmost leaf \n    while(current.left is not None): \n        current = current.left  \n  \n    return current\n```"}]}
{"dataset": "code_high", "id": "code_high_261", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nLet's try a different sort algorithm. Generate a Python code snippet to implement merge sort.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n    n1 = m - l + 1\n    n2 = r- m \n  \n    # create temp arrays \n    L = [0] * (n1) \n    R = [0] * (n2) \n  \n    # Copy data to temp arrays L[] and R[] \n    for i in range(0 , n1): \n        L[i] = arr[l + i] \n  \n    for j in range(0 , n2): \n        R[j] = arr[m + 1 + j] \n  \n    # Merge the temp arrays back into arr[l..r] \n    i = 0     # Initial index of first subarray \n    j = 0     # Initial index of second subarray \n    k = l     # Initial index of merged subarray \n  \n    while i < n1 and j < n2 : \n        if L[i] <= R[j]: \n            arr[k] = L[i] \n            i += 1\n        else: \n            arr[k] = R[j] \n            j += 1\n        k += 1\n  \n    # Copy the remaining elements of L[], if there \n    # are any \n    while i < n1: \n        arr[k] = L[i] \n        i += 1\n        k += 1\n  \n    # Copy the remaining elements of R[], if there \n    # are any \n    while j < n2: \n        arr[k] = R[j] \n        j += 1\n        k += 1\n  \n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \ndef mergeSort(arr,l,r): \n    if l < r: \n  \n        # Same as (l+r)//2, but avoids overflow for \n        # large l and h \n        m = (l+(r-1))//2\n  \n        # Sort first and second halves \n        mergeSort(arr, l, m) \n        mergeSort(arr, m+1, r) \n        merge(arr, l, m, r)\n```"}]}
{"dataset": "code_high", "id": "code_high_262", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you convert a number from one base to another?\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef convert_base(num, from_base, to_base):\n    if isinstance(num, str):\n        n = int(num, from_base)\n    else:\n        n = int(num)\n    alphabet = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    if n < to_base: \n        return alphabet[(n)]\n    else:\n        return convert_base(n // to_base, from_base, to_base) + alphabet[n % to_base]\n```"}]}
{"dataset": "code_high", "id": "code_high_263", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a program to find the index of a given element in a sorted array with binary search.\n\n### Input:\nlist = [-1, 0, 2, 3, 9, 10]\ntarget = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binarySearch(arr, target):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            end = mid - 1\n        else:\n            start = mid + 1 \n    return -1\nindex = binarySearch([-1, 0, 2, 3, 9, 10], 3)\n```"}]}
{"dataset": "code_high", "id": "code_high_264", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nMerge two sorted lists into a single sorted list\n\n### Input:\nlist1 = [1,3,5,7] \nlist2 = [2,4,6,8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_sorted_lists(list1, list2):\n    merged_list = []\n    i = 0\n    j = 0\n    # Iterate through the lists until all elements have been merged\n    while (i < len(list1) and j < len(list2)):\n        # If the element from the first list is smaller, add it \n        # to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i+=1\n        # Otherwise add the element from the second list\n        else:\n            merged_list.append(list2[j])\n            j+=1\n \n    # Append any remaining elements from the first list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i+=1\n \n    # Append any remaining elements from the second list\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j+=1\n \n    return merged_list\n```"}]}
{"dataset": "code_high", "id": "code_high_265", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to wrap a text in a box, with the given length and padding parameters.\n\n### Input:\ntext = \"Hello World!\", length = 20, padding = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef wrap_in_box(text, length, padding): \n    border = \"\"\n    for i in range(length): \n        border += \"-\"\n    space = \"\"\n    for i in range(padding):\n        space += \" \"\n    text = space + text + space \n    if len(text) > length:\n        text = text[:length-1]\n    text = text.center(length)\n    print(border)\n    print(text)\n    print(border)\n```"}]}
{"dataset": "code_high", "id": "code_high_266", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUse features of the Python language to implement 3-way partitioning of a given array.\n\n### Input:\nArray: [9,6,7,4,1,6,3]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nUse features of the Python language to implement 3-way partitioning of a given array.\n\"\"\"\ndef threeWayPartition(array, pivot): \n    less = [] \n    equal = [] \n    greater = [] \n    for i in array: \n        if i < pivot: \n            less.append(i) \n        elif i == pivot: \n            equal.append(i) \n        else: \n            greater.append(i)   \n    return less + equal + greater \nif __name__ == '__main__': \n    array = [9,6,7,4,1,6,3]\n    pivot = 6\n    print(threeWayPartition(array, pivot))\n```"}]}
{"dataset": "code_high", "id": "code_high_267", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare two given objects and output the differences.\n\n### Input:\nObject 1: {name: John, age: 30, city: New York}\nObject 2: {name: John, age: 40, city: Las Vegas}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compare_objects(object1, object2):\n    for key, value in object1.items():\n        if key in object2:\n            if object1[key] != object2[key]:\n                print(\"Different values for \" + key + \": \" + str(object1[key]) + \" vs. \" + str(object2[key]))\n        else:\n            print(\"New key not in second object: \" + key)\n    for key, value in object2.items():\n        if key not in object1:\n            print(\"New key not in first object: \" + key)\n    \ncompare_objects({\"name\": \"John\", \"age\": 30, \"city\": \"New York\"},\n                {\"name\": \"John\", \"age\": 40, \"city\": \"Las Vegas\"})\n# Output:\n# Different values for age: 30 vs. 40\n# New key not in first object: city\n```"}]}
{"dataset": "code_high", "id": "code_high_268", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to find all anagrams of a given word.\n\n### Input:\nword = \"abbac\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef anagrams(word):\n    if len(word) == 1:\n        return [word]\n    else:\n        anagrams_list = []\n        for i, letter in enumerate(word):\n            for j in anagrams(word[:i]+word[i+1:]):\n                anagrams_list.append(letter+j)\n        return anagrams_list\n```"}]}
{"dataset": "code_high", "id": "code_high_269", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate the list of all prime numbers between 0 and 99.\n\n### Response:"}, {"role": "assistant", "content": "```python\nprime_list = [] \nfor num in range(100): \n    if num > 1:\n        for i in range(2, num): \n            if (num % i) == 0: \n                break\n        else:\n            prime_list.append(num) \nprint(prime_list)\n```"}]}
{"dataset": "code_high", "id": "code_high_270", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function to convert an infix expression to a postfix expression.\n\n### Input:\n\"A + B * C\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef infix_to_postfix(exp):\n  stack = []\n  postfix_exp = \"\"\n  # Convert the expression to a list\n  exp_list = exp.split()\n  for char in exp_list:\n    # If the character is an operand, append it \n    if char in ['A', 'B', 'C']:\n      postfix_exp += char\n    # If the character is an operator, push it to the stack\n    elif char in ['+', '-', '*', '/']:\n      stack.append(char)\n    # When the closing parentheses is encountered, pop all the operators from the stack\n    elif char == ')':\n      while stack[-1] != '(': \n        postfix_exp += stack.pop() \n      stack.pop() #pop the opening parentheses\n  # Pop all the operators in the stack\n  while stack:\n    postfix_exp += stack.pop()\n  \n  return postfix_exp\nexp = \"A + B * C\" \nresult = infix_to_postfix(exp) \nprint(result) #ABC*+\n```"}]}
{"dataset": "code_high", "id": "code_high_271", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to generate a list of prime numbers between 2 and n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_numbers(n):\n    prime_nums = []\n    for num in range(2, n + 1):\n        if num > 1:\n            for i in range(2, num): \n                if (num % i) == 0: \n                    break\n            else:\n                prime_nums.append(num)\n    return prime_nums\n```"}]}
{"dataset": "code_high", "id": "code_high_272", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a basic game of rock, paper, scissors\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\ndef game():\n    options = ['rock', 'paper', 'scissors']\n    player1 = random.choice(options)\n    player2 = random.choice(options)\n    if player1 == 'rock' and player2 == 'scissors':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'paper' and player2 == 'rock':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'paper':\n        print(\"Player 1 Wins!\")\n    elif player1 == 'scissors' and player2 == 'rock':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'rock' and player2 == 'paper':\n        print(\"Player 2 Wins!\")\n    elif player1 == 'paper' and player2 == 'scissors':\n        print(\"Player 2 Wins!\")\n    else:\n        print(\"It's a draw!\")\n```"}]}
{"dataset": "code_high", "id": "code_high_273", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a quick sort algorithm for a given array list.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quick_sort(A):\n    quick_sort_helper(A, 0, len(A) - 1)\ndef quick_sort_helper(A, start, end):\n    if start < end:\n        p_index = partition_list(A, start, end)\n        quick_sort_helper(A, start, p_index - 1)\n        quick_sort_helper(A, p_index + 1, end)\ndef partition_list(A, start, end):\n    pivot = A[end]\n    p_index = start\n    for i in range(start, end):\n        if A[i] <= pivot:\n            A[i], A[p_index] = A[p_index], A[i]\n            p_index += 1\n    A[p_index], A[end] = A[end] , A[p_index]\n    return p_index\n```"}]}
{"dataset": "code_high", "id": "code_high_274", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to sort a list of numbers in ascending order.\n\n### Input:\nlst = [2, 5, 1, 7, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_list_ascending(lst):\n    # Traverse through all array elements \n    for i in range(len(lst)): \n  \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(lst)): \n            if lst[min_idx] > lst[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        lst[i], lst[min_idx] = lst[min_idx], lst[i] \n  \n    return lst\n  \n# Driver code to test above \nlst = [2, 5, 1, 7, 4] \nprint(sort_list_ascending(lst))\n```"}]}
{"dataset": "code_high", "id": "code_high_275", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in Python that takes an array as input and prints all the duplicate values in it.\n\n### Input:\narr = [1, 4, 7, 2, 6, 1, 7, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_duplicates(arr): \n    result = [] \n    for i in range(0, len(arr)): \n        for j in range(i + 1, len(arr)): \n            if arr[i] == arr[j]: \n                result.append(arr[i]) \n    return result\narr = [1, 4, 7, 2, 6, 1, 7, 2] \n  \nresult = find_duplicates(arr) \n  \nprint(result)\n```"}]}
{"dataset": "code_high", "id": "code_high_276", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRemove comments from a given HTML page.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_comments(html_page):\n  comment_start = \"<!--\"\n  comment_end = \"-->\"\n  output_page = \"\"\n  while html_page:\n    comment_start_index = html_page.find(comment_start)\n    if comment_start_index == -1:\n      output_page += html_page\n      break\n    output_page += html_page[:comment_start_index]\n    html_page = html_page[comment_start_index:]\n    comment_end_index = html_page.find(comment_end) + len(comment_end)\n    html_page = html_page[comment_end_index:]\n  \n  return output_page\n```"}]}
{"dataset": "code_high", "id": "code_high_277", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to find the maximum length common subsequence of two given strings.\n\n### Input:\nString1: \"abcdgf\" \nString2: \"abcdhfe\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_max_subseq(str1, str2):\n    n1 = len(str1)\n    n2 = len(str2)\n    dp = [[0 for _ in range(n2 + 1)] for _ in range(n1 + 1)]\n    for i in range(1, n1 + 1):\n        for j in range(1, n2 + 1):\n            if(str1[i - 1] == str2[j - 1]):\n                dp[i][j] = dp[i - 1][j - 1] + 1 \n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n1][n2]\nif __name__ == '__main__':\n    str1 = \"abcdgf\"\n    str2 = \"abcdhfe\"\n    result = find_max_subseq(str1, str2)\n    print(result)  # prints 5\n```"}]}
{"dataset": "code_high", "id": "code_high_278", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers and an integer k, write a program to find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and the absolute difference between i and j is at most k.\n\n### Input:\n[1,3,5,7,3,9], k=3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef solution(arr, target):\n    for i in range(0, len(arr)-1):\n        for j in range(i+1, i + target + 1):\n            if j >= len(arr):\n                break\n            if arr[i] == arr[j]:\n                return True\n    return False\n```"}]}
{"dataset": "code_high", "id": "code_high_279", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSubmit an algorithm to find the first non-repeating character of the given string.\n\n### Input:\nstring = \"bacdedbage\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Find First Non-Repeating Character\ndef first_non_repeat(string): \n    seen = {} \n    for char in string: \n        if char not in seen: \n            seen[char] = 0 \n        seen[char] += 1\n    # Find the first character that appears once\n    for i in range(len(string)): \n        if seen[string[i]] == 1: \n            return string[i] \n      \n    return '_'\n# Main Program\nstring = \"bacdedbage\"\nresult = first_non_repeat(string)\nprint(result)\n```"}]}
{"dataset": "code_high", "id": "code_high_280", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you calculate the distance between two points in a three-dimensional space?\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef distance_3d(x1, y1, z1, x2, y2, z2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2 + (z2 - z1)**2)\nif __name__ == '__main__':\n    x1, y1, z1 = 1, 2, 3\n    x2, y2, z2 = 5, 6, 7\n    print(distance_3d(x1, y1, z1, x2, y2, z2))\n```"}]}
{"dataset": "code_high", "id": "code_high_281", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given list and dictionary, write the Python code to remove duplicate objects from the list.\n\n### Input:\nlist_one = [{\"Name\": \"John\", \"Lastname\": \"Smith\"}, {\"Name\": \"John\", \"Lastname\": \"Smith\"}, {\"Name\": \"Janet\", \"Lastname\": \"Wise\"}]\ndict_one = {\"John\": \"Smith\", \"Janet\": \"Wise\"}\n\n### Response:"}, {"role": "assistant", "content": "```python\nnew_list = []\nfor item in list_one: \n    if item['Name'] + item['Lastname'] not in new_list: \n        new_list.append(item['Name'] + item['Lastname']) \n    if item['Name'] + dict_one[item['Name']] not in new_list: \n        new_list.append(item['Name'] + dict_one[item['Name']])\nfinal_list = [item for item in list_one if item['Name'] + item['Lastname'] in new_list]\n```"}]}
{"dataset": "code_high", "id": "code_high_282", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the following code to reduce its running time\n\n### Input:\nfor i in range(0, len(nums)):\n    if nums[i] == target:\n        return i\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_target(nums, target): \n    for i, num in enumerate(nums):\n        if num == target:\n            return i\n    return -1\nif __name__ == '__main__':\n    nums = [2, 3, 5, 7]\n    target = 5\n    index = -1\n    for i in range(0, len(nums)):\n        if nums[i] == target:\n            index = i\n            break\n    if (index == -1):\n        print(\"Target not found!\")\n    else:\n        print(\"Target found at index:\", index)\n```"}]}
{"dataset": "code_high", "id": "code_high_283", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort(arr):\n    n = len(arr)\n    \n    # Various loops to sort the array \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_284", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuppose you are given a array of 0s,1s and 2s . Write a program to sort the given input array.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sortArray(arr): \n      \n    # loop to run for every element in the array \n    for i in range(len(arr)): \n          \n        # loop to run for elements till the sorted part \n        for j in range(0, len(arr)-i-1): \n  \n            # If a element is found to be greater than its next element then swap them \n            if arr[j] == 2 and arr[j+1] in [0,1]: \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n            elif arr[j] == 1 and arr[j+1] == 0: \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n                  \n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_285", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function that takes a number, n, and returns the n\u2019th Fibonacci number. Remember that the Fibonacci sequence begins with 0, 1, and each subsequent number is the sum of the previous two numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci_number(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci_number(n-1)+Fibonacci_number(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_286", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRead an array of integers and sort it in increasing order.\n\n### Input:\narr = [3, 1, 4, 5, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sortArray(arr): \n    n = len(arr) \n    for i in range(n): \n        for j in range(0, n-i-1): \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \nsortArray(arr) \nprint(arr)\n# Output: [1, 2, 3, 4, 5]\n```"}]}
{"dataset": "code_high", "id": "code_high_287", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to find the longest consecutive sequence inside of a given list of numbers.\n\n### Input:\n[1, 3, 5, 7, 8, 2, 4, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_longest_seq(arr):\n    max_len = 0\n    curr_seq = []\n    for num in arr:\n        if not curr_seq or num == curr_seq[-1] + 1:\n            curr_seq.append(num)\n            max_len = max(max_len, len(curr_seq))\n        else: \n            curr_seq = [num]\n    return max_len\n```"}]}
{"dataset": "code_high", "id": "code_high_288", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nOutput the longest consecutive character string in a given string.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_consecutive_str(s):\n    longest_str = \"\"\n    cur_str = \"\"\n    for char in s:\n        if not cur_str or char == cur_str[-1]:\n            cur_str += char\n        else:\n            if len(cur_str) > len(longest_str):\n                longest_str = cur_str\n            cur_str = char\n    if len(cur_str) > len(longest_str):\n            longest_str = cur_str\n    return longest_str\n```"}]}
{"dataset": "code_high", "id": "code_high_289", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm in Python that will sort an array of numbers in ascending order\n\n### Input:\n[3, 1, 5, 2, 4, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_nums_asc(arr):\n    for i in range(len(arr)):\n        lowest_value_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[lowest_value_index]:\n                lowest_value_index = j\n        arr[i], arr[lowest_value_index] = arr[lowest_value_index], arr[i]\n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_290", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the given list using the quicksort algorithm.\n\n### Input:\nmy_list = [8, 5, 3, 9, 6, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quick_sort(arr):\n  if len(arr) <= 1:\n    return arr\n  else:\n    pivot = arr[0]\n    left, right = [], []\n    # pivot\n    for x in arr[1:]:\n      if x > pivot:\n        right.append(x)\n      else:\n        left.append(x)\n    # concatenate\n    return quick_sort(left) + [pivot] + quick_sort(right)\nquick_sort(my_list)\n```"}]}
{"dataset": "code_high", "id": "code_high_291", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the length of the longest increasing subsequence in an array.\n\n### Input:\narr = [10, 22, 9, 33, 21, 50, 41, 60]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_increasing_subsequence(arr):\n    n = len(arr)\n    # L[i] stores the length of the Longest Increasing \n    # Subsequence ending with arr[i]\n    L = [1]*n\n  \n    # consider all the elements of the array in turn\n    for i in range(1, n):\n        for j in range(i):\n            # if the element is larger then the prev element\n            # update L[i] with the maximum of all such\n            # possible values of L[j] + 1\n            if arr[i] > arr[j]:\n                L[i] = max(L[i], L[j] + 1)\n  \n    # L[i] now stores the LIS ending with arr[i]\n    # find the maximum of all the stored values\n    longest_length = 0\n    for i in range(n):\n        longest_length = max(longest_length, L[i])\n    return longest_length\nprint(longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]))\n```"}]}
{"dataset": "code_high", "id": "code_high_292", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that uses recursion to calculate the Fibonacci sequence up to the 25th number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci(n-1) + Fibonacci(n-2)\nfibonacci_list = []\nfor i in range(26):\n    fibonacci_list.append(Fibonacci(i))\nprint(fibonacci_list)\n```"}]}
{"dataset": "code_high", "id": "code_high_293", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to sort the elements of a list based on their frequency.\n\n### Input:\narr = [2, 5, 9, 8, 8, 5, 9, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef frequencySort(arr): \n    eleFreq = {} \n    sortedList = [] \n  \n    # Create a dictionary with frequency of element as key and element as value\n    for i in arr: \n        if i in eleFreq: \n            eleFreq[i] += 1\n        else: \n            eleFreq[i] = 1\n  \n    # Sort the dictionary \n    sortedFreq = sorted(eleFreq.items(), key = lambda eleFreq: eleFreq[1], reverse = True) \n  \n    # Store the elements in an output list with the same frequency \n    for i in sortedFreq: \n        sortedList.extend([i[0]] * i[1])\n  \n    return sortedList\n```"}]}
{"dataset": "code_high", "id": "code_high_294", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a better approach to sort the given array.\n\n### Input:\n[4, 3, 8, 6, 7, 9, 2, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for i in range (1, len(arr)):\n        if arr[i] < pivot:\n            left.append(arr[i])\n        else:\n            right.append(arr[i])\n    left = quick_sort(left)\n    right = quick_sort(right)\n    return left + [pivot] + right\n```"}]}
{"dataset": "code_high", "id": "code_high_295", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to search for a number in a sorted array.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(list, target):\n    low = 0\n    high = len(list)-1\n    while low <= high:\n        mid = (low + high) // 2\n        if list[mid] == target:\n            return mid\n        if list[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_296", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to identify the longest common prefix between two strings.\n\n### Input:\nString1 = \"Hellocat\"\nString2 = \"Hellokong\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longestCommonPrefix(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n  \n    result = \"\" \n    j = 0\n    i = 0\n    while(i <= n1 - 1 and j <= n2 - 1): \n        if (str1[i] != str2[j]): \n            break\n        result += str1[i] \n        i += 1\n        j += 1\n  \n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_297", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a process to sort an array of numbers from least to greatest.\n\n### Input:\narr = [3, 4, 12, 1, 5, 85]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_array(arr): \n  # Loop through the array, swap each element until it is in order (ascending)\n  for i in range(len(arr) - 1): \n    for j in range(i + 1, len(arr)): \n      if arr[i] > arr[j]: \n        temp = arr[i] \n        arr[i] = arr[j] \n        arr[j] = temp \n  \n  # Return the sorted array \n  return arr\nprint(sort_array(arr)) # [1, 3, 4, 5, 12, 85]\n```"}]}
{"dataset": "code_high", "id": "code_high_298", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a list of integers using quicksort\n\n### Input:\nlist = [4,2,1,5,3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\nsorted_list = quicksort(list)\n```"}]}
{"dataset": "code_high", "id": "code_high_299", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm in Python to find the GCD (Greatest Common Divisor) of two numbers\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef gcd(a, b): \n  \n   if (a == 0): \n       return b \n       \n   if (b == 0): \n       return a \n       \n   if (a == b): \n       return a \n       \n   if (a > b): \n       return gcd(a-b, b) \n      \n   return gcd(a, b-a)\n```"}]}
{"dataset": "code_high", "id": "code_high_300", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to sort an array in ascending order.\n\n### Input:\nArray: [7, 19, 5, 4, 16]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sortArray(arr):\n    for i in range(len(arr)):\n        for j in range(1, len(arr)):\n            if arr[j] < arr[j-1]:\n                arr[j], arr[j-1] = arr[j-1], arr[j]\n    return arr\nsortArray([7, 19, 5, 4, 16]) # [4, 5, 7, 16, 19]\n```"}]}
{"dataset": "code_high", "id": "code_high_301", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an input list of integers, sort the list in ascending order\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sortAsc(lst): \n    for i in range(len(lst)): \n        for j in range(i+1, len(lst)): \n            if lst[i] > lst[j]: \n                lst[i], lst[j] = lst[j], lst[i] \n    return lst\n```"}]}
{"dataset": "code_high", "id": "code_high_302", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nIf a given string contains four consecutive identical characters, write a code to print the string and the count of the consecutive characters.\n\n### Input:\nString: aaaagood\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef four_consecutive_chars(input_string): \n    count = 1\n    prev_char = \"\" \n    result = \"\" \n    for char in input_string: \n        if prev_char == char:\n            count += 1 \n            if count == 4:\n                result += char + \" : \" + str(count) \n        else: \n            result += char + \" : \" + str(count) \n            count = 1\n        prev_char = char \n    print(input_string)\n    print(result)\n```"}]}
{"dataset": "code_high", "id": "code_high_303", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a 2D array, write a program to find the maximum path sum.\n\n### Input:\ntest_array = [[5, 6, 1],\n              [4, 2, 3],\n              [7, 8, 9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_path_sum(test_array): \n    row = max_row = len(test_array) \n    col = max_col = len(test_array[0]) \n    for row in range(max_row - 1, -1, -1): \n        for col in range(max_col): \n            if (row == max_row - 1): \n                test_array[row][col] \n            else: \n           # Choose the route with maximum sum \n                test_array[row][col] += max(test_array[row + 1][col], test_array[row + 1][col + 1]); \n    # Displays the maximum sum \n    print(test_array[0][0]);\n```"}]}
{"dataset": "code_high", "id": "code_high_304", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a code in Python that will calculate the area of any given shape.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef area(shape):\n    if shape == \"rectangle\":\n        length = float(input(\"Please enter the length: \"))\n        width = float(input(\"Please enter the width: \"))\n        return length * width\n    elif shape == \"triangle\":\n        base = float(input(\"Please enter the base: \"))\n        height = float(input(\"Please enter the height: \"))\n        return 0.5 * base * height\n    elif shape == \"circle\":\n        r = float(input(\"Please enter the radius: \"))\n        return 3.14 * r * r\n```"}]}
{"dataset": "code_high", "id": "code_high_305", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAnswer what is the longest palindrome in a given string.\n\n### Input:\n\"Run, spot, run. He ran up red hills\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longestPalindrome(st): \n    palindromes = []\n    for i in range(len(st)): \n        for j in range(i, len(st)): \n            curr = st[i:j+1] \n            rev = curr[::-1] \n            if (curr == rev): \n                palindromes.append(curr) \n    res = max(palindromes, key = len) \n        \n    return res\nprint(longestPalindrome(\"Run, spot, run. He ran up red hills\")) \n# output\nrun\n```"}]}
{"dataset": "code_high", "id": "code_high_306", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to merge two sorted lists into one sorted list.\n\n### Input:\nlist1 = [3, 5, 7]\nlist2 = [1, 4, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_lists(list1, list2):\n    final_list = []\n    i, j = 0, 0\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            final_list.append(list1[i])\n            i += 1\n        else:\n            final_list.append(list2[j])\n            j += 1\n    \n    while i < len(list1):\n        final_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        final_list.append(list2[j])\n        j += 1\n    \n    return final_list\nprint(merge_lists(list1, list2))\n```"}]}
{"dataset": "code_high", "id": "code_high_307", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function that will sort the array using insertion sort.\n\n### Input:\nnums=[5,2,4,6,1,3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertion_sort(nums):\n    for i in range(1,len(nums)):\n        item_to_insert = nums[i]\n        j = i - 1\n        while j >= 0 and nums[j] > item_to_insert:\n            nums[j+1] = nums[j]\n            j -= 1\n        nums[j+1] = item_to_insert\n    return nums\nif __name__ == '__main__':\n    nums = [5,2,4,6,1,3]\n    print(insertion_sort(nums)) # Output: [1, 2, 3, 4, 5, 6]\n```"}]}
{"dataset": "code_high", "id": "code_high_308", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that will return the maximum difference between any two numbers present in an array.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_difference(arr):\n    difference = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[j] - arr[i] > difference:\n                difference = arr[j] - arr[i]\n    return difference\n```"}]}
{"dataset": "code_high", "id": "code_high_309", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a stand-alone Python script to print the sum of all the divisors of a number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef printDivisorSum(num): \n   \n    sum = 0\n    i = 1\n  \n    while i <= num / 2: \n  \n        if num % i == 0: \n            sum = sum + i \n        i = i + 1\n  \n    print(\"Sum of divisors of \" + str(num) + \" is \" + str(sum)) \nnum = 16\nprintDivisorSum(num)\n```"}]}
{"dataset": "code_high", "id": "code_high_310", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a KMP algorithm in Python to find a pattern in a given text.\n\n### Input:\nText: abcabdababd\nPattern:abd\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef KMPSearch(pat, txt): \n    M = len(pat) \n    N = len(txt) \n  \n    # create lps[] that will hold the longest prefix suffix  \n    # values for pattern \n    lps = [0]*M \n    j = 0 # index for pat[] \n  \n    # Preprocess the pattern (calculate lps[] array) \n    computeLPSArray(pat, M, lps) \n  \n    i = 0 # index for txt[] \n    while i < N: \n        if pat[j] == txt[i]: \n            i += 1\n            j += 1\n  \n        if j == M: \n            print(\"Found pattern at index \" + str(i-j)) \n            j = lps[j-1] \n  \n        # mismatch after j matches \n        elif i < N and pat[j] != txt[i]: \n            # Do not match lps[0..lps[j-1]] characters, \n            # they will match anyway \n            if j != 0: \n                j = lps[j-1] \n            else: \n                i += 1\n        \ndef computeLPSArray(pat, M, lps): \n    len = 0 # length of the previous longest prefix suffix \n  \n    lps[0] # lps[0] is always 0 \n    i = 1\n  \n    # the loop calculates lps[i] for i = 1 to M-1 \n    while i < M: \n        if pat[i]== pat[len]: \n            len += 1\n            lps[i] = len\n            i += 1\n        else: \n            # This is tricky. Consider the example. \n            # AAACAAAA and i = 7. The idea is similar  \n            # to search step. \n            if len != 0: \n                len = lps[len-1] \n  \n                # Also, note that we do not increment i here \n            else: \n                lps[i] = 0\n                i += 1\n```"}]}
{"dataset": "code_high", "id": "code_high_311", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to convert an infix expression to prefix notation.\n\n### Input:\nA*(B+C)-D/(E+F)\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef infix_to_prefix(exp): \n\t# stack to store operators\n\tstack = [] \n\t# prefix expression\n\tpref_exp = \"\" \n\t\n\t# traverse through the expression\n\tfor char in exp: \n\t\t\n\t\t# if the character is an operand \n\t\t# add it to prefix expression\n\t\tif char.isalpha(): \n\t\t\tpref_exp += char \n\t\t\n\t\t# if the character is an operator\n\t\telif char in \"*/+-^\": \n\t\t\t\n\t\t\t# push the operator to the stack \n\t\t\tstack.append(char) \n\t\t# if the character is ')' \n\t\telif char == ')': \n\t\t\t\n\t\t\t# pop all the operators from \n\t\t\t# the stack until '(' is found \n\t\t\twhile(stack[-1] != '('): \n\t\t\t\tpref_exp += stack.pop() \n\t\t\t\n\t\t\t# remove '(' from the stack \n\t\t\tstack.pop() \n\t\t\t\n\t# add all the operators to the prefix expression \n\twhile len(stack) != 0: \n\t\tpref_exp += stack.pop() \n        \n\treturn pref_exp\n```"}]}
{"dataset": "code_high", "id": "code_high_312", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python that takes a list of numbers and returns the greatest difference between any two numbers in the list.\n\n### Input:\ntest_list = [4, 6, 8, 10, 3, 1, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef greatest_difference(numbers_list):\n    max_difference = 0\n    for num1 in numbers_list:\n        for num2 in numbers_list:\n            if num1 != num2:\n                difference = abs(num1 - num2)\n                if difference > max_difference:\n                    max_difference = difference\n    \n    return max_difference\ngreatest_difference(test_list)\n```"}]}
{"dataset": "code_high", "id": "code_high_313", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nRead a code that prints out the Fibonacci Series.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_314", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program that sorts an array of integers using the insertion sort algorithm.\n\n### Input:\n[4, 2, 6, 8, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertionSort(arr): \n  \n    # Traverse through 1 to len(arr) \n    for i in range(1, len(arr)): \n  \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \n# Driver code to test above \narr = [12, 11, 13, 5, 6] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (arr[i])\n```"}]}
{"dataset": "code_high", "id": "code_high_315", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a class that can be used to check if the braces in an expression are balanced.\n\n### Input:\nexpression = \"[(}{)]\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass BalancedBraces: \n    \n    def checkBalanced(self, expression):\n        s = []\n        for i in expression:\n            if i == '(' or i == '[' or i == '{': \n                s.append(i)\n            elif i == ')' or i == ']' or i == '}':\n                if len(s) > 0 and (\n                (i == ')' and s[len(s)-1] == '(')or \n                (i == ']' and s[len(s)-1] == '[')or \n                (i == '}' and s[len(s)-1] == '{')):\n                    s.pop()\n                else:\n                    return False\n        return len(s) == 0\n```"}]}
{"dataset": "code_high", "id": "code_high_316", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that reads an integer and prints out the next Fibonacci number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_next_fibonacci_number(n):\n  if n == 0 or n == 1:\n    return n\n  else:\n    fibonacci_sequence = [0,1] \n    for i in range(2, n + 1): \n      next_value = fibonacci_sequence[i-2] + fibonacci_sequence[i-1] \n      fibonacci_sequence.append(next_value)\n    return fibonacci_sequence[n]\n```"}]}
{"dataset": "code_high", "id": "code_high_317", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to return the kth element in the Fibonacci sequence.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef return_fibonacci(k):\n    a = 0\n    b = 1\n    if k < 0:\n        return \"Incorrect input\"\n    elif k == 0:\n        return a\n    elif k == 1:\n        return b\n    else:\n        for i in range(2, k+1):\n            c = a + b\n            a = b\n            b = c\n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_318", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function 'play_game' that plays a simple game of rock paper scissors.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef play_game():\n    options = ['rock', 'paper', 'scissors']\n    computer_choice = random.choice(options)\n    user_choice = input('Choose \"rock\", \"paper\", or \"scissors\": ')\n    if user_choice == computer_choice:\n        print('It is a tie!')\n    elif user_choice == 'rock':\n        if computer_choice == 'paper':\n            print('Computer wins!')\n        else:\n            print('You win!')\n    elif user_choice == 'paper':\n        if computer_choice == 'scissors':\n            print('Computer wins!')\n        else:\n            print('You win!')\n    elif user_choice == 'scissors':\n        if computer_choice == 'rock':\n            print('Computer wins!')\n        else:\n            print('You win!')\n```"}]}
{"dataset": "code_high", "id": "code_high_319", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the given code to multiply two n x n matrices.\n\n### Input:\ndef multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n): \n            result[i][j] = 0\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef multiply(m1, m2, n):\n    result = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                result[i][j] += m1[i][k] * m2[k][j]\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_320", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCan you code a solution to Bubble Sort an array of integers?\n\n### Input:\n[5, 4, 3, 2, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(arr): \n    n = len(arr)\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [5, 4, 3, 2, 1] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\n```"}]}
{"dataset": "code_high", "id": "code_high_321", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following list, write a program to sort it in ascending order.\n\n### Input:\n[3, 4, -5, 6, 1, -2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                \n    return arr \narr = [3, 4, -5, 6, 1, -2]\nprint(bubbleSort(arr))\n```"}]}
{"dataset": "code_high", "id": "code_high_322", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that returns the length of the longest common substring between two strings.\n\n### Input:\ns1 = 'abcde'\ns2 = 'abfghe'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_common_substring(s1, s2): \n    m = len(s1) \n    n = len(s2) \n  \n    # initialize matrix \n    L = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    # To store the length of longest common substring \n    length = 0 \n  \n    # Comparing each character of s1 and s2 \n    for i in range(m + 1): \n        for j in range(n + 1): \n  \n            # If current character of s1 and s2 matches \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif s1[i - 1] == s2[j - 1]: \n                L[i][j] = L[i - 1][j - 1] + 1\n                length = max(length, L[i][j]) \n            else: \n                L[i][j] = 0\n  \n    return length \n# Driver code \ns1 = 'abcde'\ns2 = 'abfghe'\nprint(\"Length of Longest Common Substring is: \", longest_common_substring(s1, s2))\n```"}]}
{"dataset": "code_high", "id": "code_high_323", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to generate Fibonacci numbers in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(num):\n  fib_list = [0, 1]\n  if num == 0:\n    return []\n  elif num == 1:\n    return [0]\n  else:\n    for _ in range(2, num):\n      nxt_num = fib_list[-1] + fib_list[-2]\n      fib_list.append(nxt_num)\n    return fib_list\n```"}]}
{"dataset": "code_high", "id": "code_high_324", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to display all prime numbers between a given range.\n\n### Input:\na, b = 2, 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_numbers_in_range(a, b):\n    \"\"\"\n    Displays all prime numbers between a given range.\n    \"\"\"\n    for num in range(a, b+1):\n        if is_prime(num):\n            print(num,' is prime.')\ndef is_prime(num):\n    \"\"\"\n    Checks if a number is prime or not.\n    \"\"\"\n    if num == 1:\n        return False\n    else:\n        for i in range(2, num):\n            if num % i == 0:\n                return False \n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_325", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function that takes two strings and returns the longest common subsequence.\n\n### Input:\nstr1 = \"AGGTAB\"\nstr2 = \"GXTXAYB\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef LongestCommonSubsequence(str1, str2):\n    n = len(str1)\n    m = len(str2)\n    t = [[0 for j in range(m+1)] for i in range(n+1)]\n    \n    for i in range(1, n+1): \n        for j in range(1, m+1):  \n            if str1[i-1] == str2[j-1]: \n                t[i][j] = 1 + t[i-1][j-1] \n            else: \n                t[i][j] = max(t[i-1][j], t[i][j-1])   \n    return t[n][m]\n```"}]}
{"dataset": "code_high", "id": "code_high_326", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a unsorted array, sort it using the quick sort algorithm.\n\n### Input:\n[5, 4, 8, 7, 1, 3, 10, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quickSort(nums): \n    if len(nums) <= 1: \n        return nums\n    pivot = nums[len(nums) // 2] \n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot] \n    right = [x for x in nums if x > pivot] \n    return quickSort(left) + middle + quickSort(right)\n  \n   \nnums = [5, 4, 8, 7, 1, 3, 10, 9] \nprint(quickSort(nums))\n```"}]}
{"dataset": "code_high", "id": "code_high_327", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDetermine the index of an element in a given array using binary search.\n\n### Input:\narr = [1, 2, 3, 4, 5, 6, 7]\nelement = 4\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nDetermine the index of an element in a given array using binary search.\nInput: arr (list)  element (int)\nOutput: index (int)\n\"\"\"\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if element < arr[mid]:\n            end = mid - 1\n        elif element > arr[mid]:\n            start = mid + 1\n        else:\n            return mid\n    \n    return -1\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4, 5, 6, 7]\n    element = 4\n    print(binary_search(arr, element)) \n    # Output: 3\n```"}]}
{"dataset": "code_high", "id": "code_high_328", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the group of three numbers in a list that has the greatest product.\n\n### Input:\nlist = [2, 3, -2, -3, 4, -5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_greatest_product(lst):\n    products = []\n    for i in range(len(lst)-2):\n        for j in range(i+1, len(lst)-1):\n            for k in range(j+1, len(lst)):\n                products.append(lst[i] * lst[j] * lst[k])\n    return max(products)\n```"}]}
{"dataset": "code_high", "id": "code_high_329", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of positive numbers, write a function to return the maximum number of adjacent numbers with the same sign.\n\n### Input:\narr = [5, 2, 3, -2, 4, -5, 2, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef maxAdjSameSign(arr): \n    \"\"\"\n    This function returns the maximum number of adjacent numbers with the same sign.\n    \"\"\"\n    max_count = 0\n    count = 1\n  \n    for i in range(0, len(arr)-1):\n        # If current element and the next element\n        # have the same sign \n        if (arr[i] > 0 and arr[i+1] > 0) or (arr[i] < 0 and arr[i+1] < 0):\n            count += 1\n        else: \n            max_count = max(max_count, count) \n  \n        # Reset count to 1\n        count = 1\n  \n    return max(max_count, count)\n```"}]}
{"dataset": "code_high", "id": "code_high_330", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a String and a list of words, write a Python program to determine if the String is a sequence of any of the words in the list.\n\n### Input:\nstring = \"thequickbrownfox\" \nwords_list = [\"the\", \"quick\", \"brown\", \"fox\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_valid_sequence(string, words_list):\n    str_index = 0\n    for word in words_list:\n        if len(string[str_index:]) < len(word):\n            return False\n        if string[str_index:str_index+len(word)] != word:\n            return False\n        str_index += len(word)\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_331", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a heuristic algorithm in Python to find an approximate solution to the traveling salesman problem.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef traveling_salesman_heuristic(distance_matrix):\n    # Create a list of cities\n    num_cities = len(distance_matrix)\n    cities = range(num_cities)\n    \n    # Create a list of visited cities and an empty list for the route\n    visited = [False for _ in range(num_cities)]\n    route = []\n    \n    # Start from the first city\n    current_city = 0\n    visited[current_city] = True\n    route.append(current_city)\n \n    # Find the total distance of the route so far\n    total_distance = 0\n    \n    # Keep looping until all cities are visited\n    while False in visited:\n        # Find the nearest unvisited city\n        best_city = 0\n        best_distance = float('inf')\n        for i in range(1, num_cities):\n            if not visited[i] and distance_matrix[current_city][i] < best_distance:\n                best_city = i\n                best_distance = distance_matrix[current_city][i]\n                \n        # Mark the best city as visited\n        visited[best_city] = True\n        \n        # Add the best city to the route\n        route.append(best_city)\n        \n        # Accumulate the total distance\n        total_distance += best_distance\n        \n        # Change the current city to the best city\n        current_city = best_city\n        \n    # Add the distance from the last city to the first\n    total_distance += distance_matrix[route[-1]][route[0]]\n    \n    return route, total_distance\n```"}]}
{"dataset": "code_high", "id": "code_high_332", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the length of the longest substring without repeating characters\n\n### Input:\nstring = \"abcabcbb\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_substring(string):\n    longest_substring = \"\"\n    curr_substring = \"\"\n    char_set = set()\n    for char in string:\n        if char not in char_set:\n            curr_substring += char\n            char_set.add(char)\n        else:\n            if len(curr_substring) > len(longest_substring):\n                longest_substring = curr_substring\n            curr_substring = char\n            char_set = set(char)\n    if len(curr_substring) > len(longest_substring):\n        longest_substring = curr_substring\n    return len(longest_substring)\n```"}]}
{"dataset": "code_high", "id": "code_high_333", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to identify a given string as a valid ISBN 10 code\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_valid_isbn_10(code):\n    # check for the length\n    if len(code) != 10:\n        return False\n    # check for leading \"X\" characters\n    if code.startswith(\"X\"):\n        return False\n    # check for digits\n    if not code.isdigit():\n        return False\n    # calculate the check digit\n    sum = 0\n    for i in range(9): \n        sum += int(code[i]) * (10 - i)\n    checksum = sum % 11\n    # check for valid check digit\n    if not (checksum==int(code[9]) or (checksum == 10 and code[9] == 'X')):\n        return False\n    # No errors found\n    return True\nif __name__ == '__main__':\n    code = input('Enter the ISBN-10 code: ')\n    print(is_valid_isbn_10(code))\n```"}]}
{"dataset": "code_high", "id": "code_high_334", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to sort the following array in increasing order.\n\n### Input:\n[10, 2, 7, 8, 32, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# sorting array using insertion sort\narr = [10, 2, 7, 8, 32, 4] \n# traverse through all array elements \nfor i in range(1, len(arr)):\n    key = arr[i]\n    # move elements of arr[0..i-1], that are greater than key,\n    # to one position ahead of their current position\n    j = i-1\n    while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n    arr[j + 1] = key\n  \n#print the sorted array\nprint(arr)\n```"}]}
{"dataset": "code_high", "id": "code_high_335", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to calculate the median of three given numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef median_num(n1, n2, n3):\n    if n1 > n2 and n2 > n3:\n        return n2\n    elif n3 > n2 and n2 > n1:\n        return n2\n    elif n1 > n3 and n3 > n2:\n        return n3\n    elif n2 > n3 and n3 > n1:\n        return n3\n    elif n2 > n1 and n1 > n3:\n        return n1\n    else:\n        return n1\n```"}]}
{"dataset": "code_high", "id": "code_high_336", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate three different sorting algorithms for a list of integers.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Bubble Sort algorithm\ndef bubble_sort(lst):\n    for i in range(len(lst)-1):\n        for j in range(len(lst)-1-i):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst\n# Insertion Sort algorithm\ndef insertion_sort(lst):\n    for i in range(1, len(lst)):\n        key = lst[i]\n        j = i - 1\n        while j >= 0 and key < lst[j]:\n            lst[j+1] = lst[j]\n            j -= 1\n        lst[j+1] = key\n    return lst\n# Heap Sort algorithm\ndef heap_sort(lst):\n    # build max heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        heapify(lst, len(lst), i)\n   \n    # extract elements\n    for i in range(len(lst) - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n    return lst\ndef heapify(lst, n, i):\n    # Find largest among root, left child and right child\n    largest = i \n    l = 2 * i + 1\n    r = 2 * i + 2 \n  \n    if l < n and lst[i] < lst[l]:\n        largest = l\n  \n    if r < n and lst[largest] < lst[r]:\n        largest = r\n  \n    # change root, if needed\n    if largest != i:\n        lst[i], lst[largest] = lst[largest], lst[i]\n        heapify(lst, n, largest)\n```"}]}
{"dataset": "code_high", "id": "code_high_337", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUse a while loop to iterate over a list of numbers and find the first even number\n\n### Input:\nnumbers = [7, 3, 5, 11, 13]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# while loop to iterate over list of numbers\ni = 0 \nwhile i < len(numbers):\n    if numbers[i] % 2 == 0:\n        break\n    i += 1\n# main program\nif i < len(numbers):\n    print(\"First even number is \", numbers[i])\nelse:\n    print(\"No even numbers found\")\n```"}]}
{"dataset": "code_high", "id": "code_high_338", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet for a function that deletes a specific element from an array.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef delete_element(arr, element):\n    count = 0\n    for i in range(len(arr)):\n        if arr[i] == element:\n            while count < len(arr)-1:\n                arr[i] = arr[i+1]\n                i+=1\n            count+=1\n    arr.pop()\n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_339", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to find all prime numbers up to a given limit n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_primes(limit):\n    \"\"\"\n    @brief: Finds all prime numbers up to a given limit n\n    @param limit: the upper limit to find prime numbers\n    @return: a list of all prime numbers found\n    \"\"\"\n    primes = []\n    for n in range(2, limit + 1):\n        is_prime = True\n        for prime in primes:\n            if n % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(n)\n    return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_340", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function to create a list of factors for a given integer.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef factor_list(number):    \n    factors = []\n \n    i = 2\n    while i * i <= number:\n        if number % i:\n            i += 1\n        else:\n            number //= i\n            factors.append(i)\n    if number > 1:\n        factors.append(number)\n \n    return factors\n```"}]}
{"dataset": "code_high", "id": "code_high_341", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven 2 string variables, write a function to find out if the 2 strings are anagrams.\n\n### Input:\nstr1 = 'schoolmaster', str2 = 'the classroom'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        counts = dict()\n        for char in str1:\n            counts[char] = counts.get(char, 0) + 1\n        for char in str2:\n            if char not in counts or counts[char] == 0:\n                return False\n            counts[char] -= 1\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_342", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.\n\n### Input:\nTarget: 10\nNumbers: [1,4,5,3,6]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate an algorithm to find the optimal sum from a set of given numbers such that the sum is equal to a given target.\n\"\"\"\ndef optimal_sum(target, numbers): \n    if (target == 0): \n        return True\n    n = len(numbers) \n    subset = [True] + [False]*target \n      \n    for i in range(n): \n        for j in range(target,numbers[i]-1,-1): \n            subset[j] = subset[j] or subset[j-numbers[i]] \n  \n    return subset[target] \nif __name__ == '__main__': \n    target = 10\n    numbers = [1,4,5,3,6]\n    print(optimal_sum(target, numbers))\n```"}]}
{"dataset": "code_high", "id": "code_high_343", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate the Fibonacci sequence in a given range in Python.\n\n### Input:\nn = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \n  \nFibonacci(n)\n```"}]}
{"dataset": "code_high", "id": "code_high_344", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to find all elements of a given list whose sum is equal to a given number.\n\n### Input:\nlist = [5, 7, 9, 4]\nnumber = 18\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_elements(list, number): \n    result = [] \n    for i in range(len(list)): \n        for j in range(i + 1, len(list)): \n            if list[i] + list[j] == number: \n                result.append([list[i], list[j]]) \n  \n    return result \n  \n# Driver code \nlist = [5, 7, 9, 4] \nn = 18\nprint(find_elements(list, n))\n```"}]}
{"dataset": "code_high", "id": "code_high_345", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes an array of numbers and returns an array whose elements are the product of all the elements except the element at the current index.\n\n### Input:\narr = [2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_products(arr):\n    left = [1]\n    right = [1]\n    ans = []\n    # Traverse from left to right\n    for i in range(1, len(arr)):\n        left.append(arr[i-1] * left[i-1])\n    # Traverse from right to left\n    for i in reversed(range(len(arr)-1)):\n        right.insert(0, arr[i+1] * right[0])\n    # Compute the product of all elements except itself\n    for i in range(len(arr)):\n        ans.append(left[i] * right[i])\n    return ans\nget_products(arr) # returns [20, 15, 12, 10]\n```"}]}
{"dataset": "code_high", "id": "code_high_346", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, return the first number that appears an odd number of times.\n\n### Input:\narr = [2,4,4,4,2,2,8,4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_odd_occurrence_num(arr):\n    seen = {}\n    for item in arr:\n        if item not in seen:\n            seen[item] = 1\n        else:\n            seen[item] += 1\n    for item, count in seen.items():\n        if count % 2 != 0:\n            return item\n    return None\nfind_odd_occurrence_num(arr) # Returns 8\n```"}]}
{"dataset": "code_high", "id": "code_high_347", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a given array of integers using Quick Sort\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quickSort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quickSort(left) + middle + quickSort(right)\n```"}]}
{"dataset": "code_high", "id": "code_high_348", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the LCM (Least Common Multiple) of two integers.\n\n### Input:\nint x = 15;\nint y = 10;\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef lcm(x, y): \n    if x > y:\n        greater = x \n    else:\n        greater = y \n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1 \n    return lcm \n  \nx = 15\ny = 10\nprint(\"The L.C.M. is\", lcm(x, y))\n```"}]}
{"dataset": "code_high", "id": "code_high_349", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an efficient matrix multiplication of two given matrices.\n\n### Input:\nmatrix1 = [[1, 2], [3, 4]]\nmatrix2 = [[5, 6], [7, 8]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef matrix_multiply(matrix1, matrix2):\n    if len(matrix1[0]) != len(matrix2):\n        return \"Matrices should have the same size for multiplication\"\n    result = [[0 for x in range(len(matrix1))] for j in range(len(matrix2[0]))]\n    for i in range(len(matrix1)):\n        for j in range(len(matrix2[0])):\n            for k in range(len(matrix2)):\n                result[i][j] += matrix1[i][k] * matrix2[k][j]\n    return result\nif __name__ == \"__main__\":\n    matrix1 = [[1, 2], [3, 4]]\n    matrix2 = [[5, 6], [7, 8]]\n    print(matrix_multiply(matrix1, matrix2))\n```"}]}
{"dataset": "code_high", "id": "code_high_350", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes two numbers and returns their greatest common divisor in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a function that takes two numbers and returns their greatest common divisor in Python.\n\"\"\"\ndef greatest_common_divisor(a, b):\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a == b:\n        return a\n    if a > b:\n        return greatest_common_divisor(a - b, b)\n    return greatest_common_divisor(a, b - a)\nif __name__ == '__main__':\n    print(greatest_common_divisor(20, 25))  # 5\n```"}]}
{"dataset": "code_high", "id": "code_high_351", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that prints Fibonacci numbers up to N (N>1).\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2, n+1): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_352", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm that verifies whether an integer is a prime number\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_check(n):\n    if n < 2: \n        return False\n    if n == 2: \n        return True\n    if not n & 1: \n        return False\n    for x in range(3, int(n**0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_353", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a search algorithm in Python to find an element in a sorted array in less than log(n) time.\n\n### Input:\narr = [1, 2, 3, 4, 5, 6, 7, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binarySearch(arr, element):\n    start = 0;\n    end = len(arr) - 1\n    \n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] == element:\n            return mid\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1 \n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_354", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort an array of numbers in descending order using the bubble sort algorithm.\n\n### Input:\n`array = [10, 5, 2, 7, 6]`\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(arr): \n    for i in range(len(arr)): \n        for j in range(0, len(arr)-i-1): \n            if arr[j] < arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n  \narray = [10, 5, 2, 7, 6]\nbubble_sort(array)\nprint(array) # Output: [10, 7, 6, 5, 2]\n```"}]}
{"dataset": "code_high", "id": "code_high_355", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two arrays of integers, find a pair of values (one from each array) that you can swap to give the two arrays the same sum.\n\n### Input:\n[1, 2, 3, 4], [3, 2, 1, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_pair(arr1, arr2):\n    sum_arr1 = sum(arr1)\n    sum_arr2 = sum(arr2)\n    diff = abs(sum_arr1 - sum_arr2)\n    for x in arr1:\n        for y in arr2:\n            if x + y == diff:\n                return (x, y)\n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_356", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that returns the longest substring of the given string without repeating characters.\n\n### Input:\nstring = \"abcabcbb\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longestSubstring(s): \n    length = len(s) \n    longest_string = 0\n    i = 0\n       \n    while (i < length): \n   \n        # Store the last index of the current character \n        last_char_index = -1\n        string_set = set() \n        current_string = 0\n          \n        for j in range(i, length): \n  \n            # If the character is already in string_set \n            if s[j] in string_set: \n                # Update the last index \n                last_char_index = j \n                break\n  \n            else: \n                # Add the character to string_set \n                string_set.add(s[j]) \n  \n                # Increase its length by 1 \n                current_string += 1\n              \n        if longest_string < current_string: \n            longest_string = current_string \n  \n        # Move ahead until the last index \n        i = last_char_index + 1 \n  \n    return longest_string\n```"}]}
{"dataset": "code_high", "id": "code_high_357", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind all numbers from a given array that can be expressed as the sum of two squares.\n\n### Input:\narr = [2, 3, 4, 6, 8, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\nvals = []\nfor num in arr:\n    for i in range(int(num ** 0.5) + 1):\n        for j in range(int(num ** 0.5) + 1):\n            if i*i + j*j == num:\n                vals.append(num)\n                break;\nprint(vals)\n# Output: [4, 8]\n```"}]}
{"dataset": "code_high", "id": "code_high_358", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to find the closest string to the given string from a list of strings.\n\n### Input:\nstring = \"text\"\nstrings = [\"tens\", \"tent\", \"teach\", \"tewksbury\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef closest_string_match(string, strings):\n    min_distance = float(\"inf\")\n    min_string = \"\"\n    for s in strings:\n        distance = levenshtein_distance(string, s)\n        if distance < min_distance:\n            min_distance = distance \n            min_string = s\n    return min_string\ndef levenshtein_distance(s1, s2):\n    if len(s1) > len(s2):\n        s1, s2 = s2, s1\n    distances = range(len(s1) + 1)\n    for i2, c2 in enumerate(s2):\n        distances_ = [i2+1]\n        for i1, c1 in enumerate(s1):\n            if c1 == c2:\n                distances_.append(distances[i1])\n            else:\n                distances_.append(\n                    1 + min((distances[i1], distances[i1 + 1], distances_[-1])))\n        distances = distances_\n    return distances[-1]\n```"}]}
{"dataset": "code_high", "id": "code_high_359", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to find the largest subset of an array that sums up to a given value.\n\n### Input:\narr = [1, 2, 3, 4, 5], target = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_largest_subset(arr, target):\n    curr_sums, max_sum_list = [], []\n    for num in arr:\n        for curr_sum in curr_sums[:]:\n            new_sum = curr_sum + num\n            if new_sum == target:\n                if new_sum > sum(max_sum_list):\n                    max_sum_list = curr_sum + [num]\n            else:\n                curr_sums.append(new_sum)\n    return max_sum_list\n```"}]}
{"dataset": "code_high", "id": "code_high_360", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that returns true if the given number is a prime number.\n\n### Input:\nnumber = 9\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(number):\n    if number < 2:\n        return False\n    for i in range(2, number // 2 + 1):\n        if number % i == 0:\n            return False\n    return True\nif is_prime(number):\n    print(\"The number is a prime number\")\nelse:\n    print(\"The number is not a prime number\")\n```"}]}
{"dataset": "code_high", "id": "code_high_361", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConvert the following pseudocode into code that implements a binary search\n\n### Input:\nInput: Array, Item\n\nSet low to the first index of the array\nSet high to the last index of the array\n\nwhile low is less than or equal to high\n  set mid to the average of low and high\n  if the item is found at mid, then return mid\n  else if the item is less than what is found at mid,\n    set high to mid - 1\n  else\n    set low to mid + 1\n\nreturn null\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binarySearch(list, item):\n    low = 0\n    high = len(list) - 1\n    while low <= high: \n        mid = (low + high) // 2\n        guess = list[mid] \n        if guess == item:\n            return mid\n        if guess > item:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return None\n```"}]}
{"dataset": "code_high", "id": "code_high_362", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to sort the given list of integers.\n\n### Input:\n[5, 7, 2, 4, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort(lst):\n    for i in range(len(lst)):\n        min_index = i\n        for j in range(i+1, len(lst)):\n            if lst[j] < lst[min_index]:\n                min_index = j\n        lst[i], lst[min_index] = lst[min_index], lst[i]\n    return lst\n```"}]}
{"dataset": "code_high", "id": "code_high_363", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an efficient algorithm that finds the intersection between two sorted arrays.\n\n### Input:\narr1 = [1, 2, 6, 8, 9]\narr2 = [2, 3, 5, 6, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef intersection(arr1, arr2): \n    result = []\n    \n    i = 0\n    j = 0\n  \n    while i < len(arr1) and j < len(arr2): \n        if arr1[i] < arr2[j]: \n            i += 1\n        elif arr2[j] < arr1[i]: \n            j += 1\n        else: \n            result.append(arr2[j]) \n            j += 1\n            i += 1\n  \n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_364", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the binomial coefficient for two integers.\n\n### Input:\nn = 5\nr = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binomial_coefficient(n, r):\n    fact = 1 \n    if r > n - r:\n        r = n - r \n    for i in range(r):\n        fact *= (n) - i \n        fact /= (i+1) \n    return int(fact)\nprint(binomial_coefficient(n, r))\n```"}]}
{"dataset": "code_high", "id": "code_high_365", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to get the length of the longest increasing subsequence in a given list of integers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_increasing_subsequence_length(nums):\n    n = len(nums)\n    LIS = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if nums[i] > nums[j] and LIS[i] < LIS[j] + 1:\n                LIS[i] = LIS[j] + 1\n    return max(LIS)\n```"}]}
{"dataset": "code_high", "id": "code_high_366", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind all prime numbers up to a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef list_primes(n): \n    primes = [] \n    for num in range(2, n+1): \n        prime=True\n        for i in range(2, int(num/2)+1):\n            if num%i == 0:\n                prime=False\n        if prime:\n            primes.append(num)\n    return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_367", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of n elements and an integer k, find the subarray with the maximum sum less than k.\n\n### Input:\narr = [1, 4, 6, 8, -5, 7], k = 11\n\n### Response:"}, {"role": "assistant", "content": "```python\nmax_sum = 0 \nstart = 0 \nend = 0\n# Loop through each element of the array\nfor i in range(len(arr)): \n    sum = 0\n  \n    # Find maximum sum subarray\n    for j in range(i, len(arr)): \n        sum += arr[j] \n        if (sum > max_sum and sum <= k): \n            max_sum = sum \n            start = i \n            end = j \n  \n# Print maximum subarray\nprint(\"Maximum sum subarray with sum <=\", k, \"is\") \nprint(\"[\", end=\"\") \nfor i in range(start, end+1): \n    print(arr[i], end=\", \") \nprint(\"]\")\n```"}]}
{"dataset": "code_high", "id": "code_high_368", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code to check whether two words are nearly identical.\n\n### Input:\nWord A: bte\nWord B: tree\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_nearly_identical(str1, str2): \n    edit_dist = 0\n    m = len(str1)\n    n = len(str2)\n    # Create matrix to store results of  subproblems \n    dp = [[0 for x in range(n + 1)] for x in range(m + 1)] \n  \n    for i in range(m + 1): \n        for j in range(n + 1):  \n            if i == 0: \n                dp[i][j] = j   \n            elif j == 0: \n                dp[i][j] = i    \n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],      # Insert \n                                   dp[i - 1][j],      # Remove \n                                   dp[i - 1][j - 1])  # Replace \n    edit_dist = dp[m][n]\n    if edit_dist == 1: \n        return True\n    else:\n        return False\n# Driver code\nif is_nearly_identical(\"bte\",\"tree\"): \n    print(\"Words are nearly identical\") \nelse: \n    print(\"Words are not nearly identical\")\n```"}]}
{"dataset": "code_high", "id": "code_high_369", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to find the longest increasing subsequence in an array.\n\n### Input:\ninput = [9, 8, 4, 12, 2, 10, 6, 14, 1, 16, 3, 11, 5, 15, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_longest_increasing_subsequence(input):\n    '''This algorithm will find the longest increasing subsequence in an array.'''\n    n = len(input)\n    leng = [1]*n\n    for i in range(n):\n        for j in range(i):\n            if(input[i] > input[j] and leng[i] < leng[j] + 1):\n                leng[i] = leng[j]+1\n    max_seq_len = max(leng)\n    max_seq = []\n    for i in range(n):\n        if(leng[i] == max_seq_len):\n            max_seq.append(input[i])\n            max_seq_len -= 1\n    max_seq.reverse()\n    return max_seq\nif __name__ == '__main__':\n    input = [9, 8, 4, 12, 2, 10, 6, 14, 1, 16, 3, 11, 5, 15, 7]\n    print(get_longest_increasing_subsequence(input))\n```"}]}
{"dataset": "code_high", "id": "code_high_370", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a code to get the last index of a given substring in a string.\n\n### Input:\n\"hi hi hello\", \"hi\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef lastIndexOf(st, substr): \n    if substr in st: \n        start = -1 \n        while True: \n            pos = st.find(substr, start + 1) \n            if pos == -1: \n                break \n            start = pos \n            \n        return start \n    else: \n        return -1 \n    \nprint(lastIndexOf(\"hi hi hello\", \"hi\")) \n# output \n3\n```"}]}
{"dataset": "code_high", "id": "code_high_371", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a python program to find all anagrams in a given string\n\n### Input:\nstr = \u201cabc\u201d\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_anagrams(str):\n    # list to store anagrams\n    anagrams = [] \n      \n    # create a frequency array of alphabets present in string \n    freq = [0] * 26\n    for char in str: \n        freq[ord(char) - ord('a')] += 1\n          \n    # Loop through all the elements from 0 to ( 2^length of string \u2013 1 ) \n    for i in range(1<<len(str)): \n          \n        # Convert the number to binary string \n        # and calculate its frequency array \n        temp_freq = list(freq)\n        str_bin = bin(i)[2:] \n        n = len(str_bin) \n        for j in range(n): \n            if str_bin[j] == '1': \n                temp_freq[j] -= 1\n              \n        # temp_freq is anagram if all element are 0 \n        if all(x == 0 for x in temp_freq): \n            anagram = \"\" \n            for j in range(n):\n                if str_bin[j] == '1': \n                    anagram += str[j]\n            anagrams.append(anagram)\n                  \n    print(\"All anagrams for '\"+str +\"' are :\" + str(anagrams))\n```"}]}
{"dataset": "code_high", "id": "code_high_372", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class to create a Complex Number with real and imaginary parts.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass ComplexNumber:\n    def __init__(self, real, imaginary):\n        self.real = real\n        self.imaginary = imaginary\n    \n    def __str__(self):\n        if self.imaginary == 0:\n            result = \"%.2f+0.00i\" % (self.real)\n        elif self.real == 0:\n            if self.imaginary >= 0:\n                result = \"0.00+%.2fi\" % (self.imaginary)\n            else:\n                result = \"0.00-%.2fi\" % (abs(self.imaginary))\n        elif self.imaginary > 0:\n            result = \"%.2f+%.2fi\" % (self.real, self.imaginary)\n        else:\n            result = \"%.2f-%.2fi\" % (self.real, abs(self.imaginary))\n        return result\n```"}]}
{"dataset": "code_high", "id": "code_high_373", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function that checks if two strings are anagrams.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_anagram(a, b):\n    char_to_count = {}\n    \n    if len(a) != len(b):\n        return False\n  \n    for char in a:\n        if char in char_to_count:\n            char_to_count[char] += 1\n        else:\n            char_to_count[char] = 1\n    \n    for char in b:\n        if char not in char_to_count:\n            return False\n        else:\n            char_to_count[char] -= 1\n    for count in char_to_count.values():\n        if count != 0:\n            return False\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_374", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to compress a string by counting the characters.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compressString(s): \n\tcomp_string = \"\"\n\tcount = 1\n\tfor i in range(len(s) - 1): \n\t\tif(s[i] == s[i+1]): \n\t\t\tcount+= 1\n\t\telse: \n\t\t\tcomp_string += s[i] + str(count) \n\t\t\tcount = 1\n\tcomp_string += s[i] + str(count) \n\treturn comp_string\n```"}]}
{"dataset": "code_high", "id": "code_high_375", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nReplace the \"TODO\" with the appropriate code for implementing a binary search algorithm in Python.\n\n### Input:\n# TODO\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binarySearch(arr, target):\n    low = 0\n    high = len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_376", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a method to find the maximum number of elements in an array such that all subarrays add up to a specified number.\n\n### Input:\narr = [1, 2, 3, 4, 5, 6, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_max(arr, target): \n  dp = [[False for i in range(target + 1)] for j in range(len(arr))]\n  for i in range(len(arr)):\n      dp[i][0] = True\n  for i in range(1, len(arr)): \n    for j in range(1, target + 1): \n      if dp[i - 1][j]: \n          dp[i][j] = dp[i - 1][j] \n      elif j >= arr[i]: \n          dp[i][j] = dp[i - 1][j - arr[i]] \n  max_val = 0\n  for i in range(1, target + 1): \n    if dp[len(arr) - 1][i]: \n      max_val = max(max_val, i) \n  return max_val\n```"}]}
{"dataset": "code_high", "id": "code_high_377", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nList all the prime numbers less than a specified number \u2018n\u2019\n\n### Input:\nn = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(n):\n    \"\"\"Returns True if n is a prime number and False otherwise.\"\"\"\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n    \ndef prime_numbers_less_than(n):\n    \"\"\"Returns a list of all prime numbers less than n.\"\"\"\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\nn = 10\nprint(prime_numbers_less_than(n)) # [2, 3, 5, 7]\n```"}]}
{"dataset": "code_high", "id": "code_high_378", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to find all pairs of elements in a given array that sum up to a given target.\n\n### Input:\narray = [1, 6, 4, 5, 3, 2]\ntarget = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef findSumPairs(arr, target): \n    # X stores elements and its \n    # frequencies in a dictionary \n    X = dict() \n    n = len(arr) \n    output = [] \n  \n    # Store counts of all elements \n    # of array in a hash \n    for i in range(0, n): \n        if arr[i] in X.keys(): \n            X[arr[i]] += 1\n        else: \n            X[arr[i]] = 1\n    # Loop over each element \n    for i in range(0, n): \n        # finding the compliment \n        k = target - arr[i] \n        # If compliment exists in X \n        # and it is not the same element \n        if (k in X.keys() and X[k] != 0\n            and k != arr[i]): \n            output.append([arr[i], k]) \n            X[k] = X[k] - 1\n  \n    # return content of output \n    return output \n# calling the findSumPairs function \nprint(findSumPairs(array, target)) \n# Output: [[1, 4], [2, 3]]\n```"}]}
{"dataset": "code_high", "id": "code_high_379", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that takes a string as an input and returns TRUE if it is a palindrome or FALSE if it is not.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_palindrome(string): \n    left_pos = 0\n    right_pos = len(string) - 1\n    \n    while right_pos >= left_pos: \n        if not string[left_pos] == string[right_pos]: \n            return False\n        left_pos += 1\n        right_pos -= 1\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_380", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given two strings, find the minimum number of edits required to make them equal.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef edit_distance(str1, str2):\n    edits = 0\n    m = len(str1)\n    n = len(str2)\n    if m < n:\n        for i in range(m, n):\n            edits += 1\n        for i in range(m):\n            if str1[i] != str2[i]:\n                edits += 1\n    else:\n        for i in range(n, m):\n            edits += 1\n        for i in range(n):\n            if str1[i] != str2[i]:\n                edits += 1\n    return edits\n```"}]}
{"dataset": "code_high", "id": "code_high_381", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a generic function to split an array into n equal slices.\n\n### Input:\narr = [1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef splitArr(arr, n):\n    if n > len(arr):\n        return -1\n    result = []\n    for i in range(0, len(arr), n):\n        result.append(arr[i:i+n])\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_382", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that produces an array of Fibonacci numbers with n numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n > 2:\n        fib_nums = [0, 1]\n        for i in range(2, n):\n            fib_nums.append(fib_nums[i-1] + fib_nums[i-2])\n        return fib_nums\n```"}]}
{"dataset": "code_high", "id": "code_high_383", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the bubble sort algorithm, sort the following array.\n\n### Input:\n[3, 5, 2, 1, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(arr): \n    n = len(arr)\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n    return arr\n  \n  \n# Driver code \narr = [3, 5, 2, 1, 4]\n  \nbubbleSort(arr)\nOutput: [1, 2, 3, 4, 5]\n```"}]}
{"dataset": "code_high", "id": "code_high_384", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python script to print out all prime numbers up to and including a given number n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_prime_numbers(n):  \n    for num in range(2, n + 1):  \n        is_prime = True \n        for i in range(2, num):  \n            if (num % i) == 0:  \n                is_prime = False\n                break\n        if is_prime:\n            print(num)\n```"}]}
{"dataset": "code_high", "id": "code_high_385", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to find the most frequent word in a given sentence.\n\n### Input:\nSentence: The quick brown fox ate the lazy dog\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_frequent_word(str): \n    split_str = str.split() \n    frequencies = {} \n    for word in split_str: \n        if word in frequencies: \n            frequencies[word] += 1\n        else: \n            frequencies[word] = 1\n  \n    most_frequent_word = \"\" \n    highest_freq = 0\n    for key, value in frequencies.items(): \n        if value > highest_freq: \n            highest_freq = value \n            most_frequent_word = key \n  \n    return most_frequent_word \n# Driver code   \nprint(most_frequent_word('The quick brown fox ate the lazy dog'))\n```"}]}
{"dataset": "code_high", "id": "code_high_386", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes two integers, A and B, and returns the largest common divisor between A and B.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_largest_common_divisor(a, b):\n    while a != 0 and b != 0:\n        if a > b:\n            a %= b\n        else:\n            b %= a\n    return a + b\nif __name__ == '__main__':\n    print(get_largest_common_divisor(15, 9))\n```"}]}
{"dataset": "code_high", "id": "code_high_387", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a positive integer number, generate the Fibonacci series.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_388", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the bubble sort algorithm for an array of integers.\n\n### Input:\narr = [34, 16, 12, 9, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above\narr = [34, 16, 12, 9, 5]\n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\n```"}]}
{"dataset": "code_high", "id": "code_high_389", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings, s1 and s2, write a program to return the longest common substring between them.\n\n### Input:\ns1 = 'abcdef'\ns2 = 'fghijk'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\nlongest_substring = longest_common_substring(s1, s2)\n```"}]}
{"dataset": "code_high", "id": "code_high_390", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes a list of numbers and identifies the sublists of numbers that add up to a given sum.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sublist_sum(nums, target):\n    result = []\n    current_sum = 0\n    start = 0\n    for end in range(len(nums)):\n        current_sum += nums[end]\n        while current_sum > target and start < end:\n            current_sum -= nums[start]\n            start += 1\n        if current_sum == target:\n            result.append(nums[start:end+1])\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_391", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python that returns the median of an array of integers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef median(arr):\n  sortedArr = sorted(arr)\n  length = len(arr)\n  if length % 2 == 0:\n    return ((sortedArr[length//2-1] + sortedArr[length//2])/2)\n  else:\n    return sortedArr[length//2]\n```"}]}
{"dataset": "code_high", "id": "code_high_392", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, write a program which partitions the list into two parts, such that the sum of the elements in the first part exceeds the sum of the elements in the second part.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef partition(lst):\n    left_sum, right_sum = 0, sum(lst)\n    for i in range(len(lst)-1):\n        left_sum += lst[i]\n        right_sum -= lst[i]\n        if left_sum > right_sum:\n            return lst[:i+1], lst[i+1:]\n    return None\n```"}]}
{"dataset": "code_high", "id": "code_high_393", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to sort a given array using selection sort.\n\n### Input:\narr = [5, 8, 1, 7, 2, 10, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef selection_sort(arr): \n    for i in range(len(arr) - 1): \n        min = i \n        for j in range(i+1, len(arr)): \n            if arr[j] < arr[min]: \n                min = j \n        arr[i], arr[min] = arr[min], arr[i]\n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_394", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the most frequent character in an inputted string.\n\n### Input:\ninput_string = \"Hello, world\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_most_frequent_character(input_string):\n    char_count_dict = {}\n    for char in input_string:\n        if char in char_count_dict.keys():\n            char_count_dict[char] += 1\n        else:\n            char_count_dict[char] = 1\n    max_count = 0\n    max_char = ''\n    for char in char_count_dict.keys():\n        if char_count_dict[char] > max_count:\n            max_count = char_count_dict[char]\n            max_char = char\n    return max_char\n```"}]}
{"dataset": "code_high", "id": "code_high_395", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the list in reverse order using insertion sort.\n\n### Input:\n[4, 2, 0, 6, 1, 7, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertion_sort_reverse(arr):\n    \"\"\" Sort the list in reverse order using insertion sort. \"\"\"\n    # Iterate over the list\n    for i in range(1, len(arr)):\n        current_value = arr[i]\n        # Keep track of position\n        position = i\n        # Iterate over the sorted part of the list\n        while position > 0 and arr[position - 1] < current_value:\n            # Shift one place to the right\n            arr[position] = arr[position - 1]\n            # Move position back\n            position = position - 1\n        # Insert current value at the position\n        arr[position] = current_value\n    return arr\ninsertion_sort_reverse([4, 2, 0, 6, 1, 7, 3]) # Outputs[7, 6, 4, 3, 2, 1, 0]\n```"}]}
{"dataset": "code_high", "id": "code_high_396", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou have been given a list containing both words and numbers. You need to write a code to generate a new list containing only words in the original list and to calculate the average length of the words.\n\n### Input:\nmixed_list = ['cat', 1, 'dog', 2, 'rabbit', 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_words(mixed_list):\n  words = []\n  for item in mixed_list:\n    if type(item) == str:\n      words.append(item)\n  return words\ndef get_average_word_length(words):\n  total_length = 0\n  for word in words:\n    total_length += len(word)\n  return total_length/len(words)\nif __name__ == \"__main__\":\n  words = get_words(mixed_list)\n  print(\"Words in original list:\", words)\n  print(\"Average length of the words:\", get_average_word_length(words))\n```"}]}
{"dataset": "code_high", "id": "code_high_397", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to implement a binary search in an array with upto 1 million elements.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(arr, x): \n    l = 0\n    r = len(arr) - 1\n    while l <= r: \n        mid = l + (r - l) // 2\n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            l = mid + 1\n        else: \n            r = mid - 1\n  \n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_398", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a DFS algorithm in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef dfs(graph, start, end):\n    # create a visited array\n    visited = [False] * len(graph)\n    # create a stack\n    stack = []\n    # mark the starting node as visited and push it in the stack\n    stack.append(start)\n    while stack:\n        # get the current node\n        node = stack.pop()\n        # if the node hasn't been visited\n        if not visited[node]:\n            # mark the node as visited\n            visited[node] = True\n            # check for the end node\n            if node == end:\n                return True\n            # append the neighbors of the node to the stack\n            neighbors = graph[node]\n            for neighbor in neighbors:\n                stack.append(neighbor)\n    # end node not found\n    return False\n```"}]}
{"dataset": "code_high", "id": "code_high_399", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite this function to use a binary search instead.\n\n### Input:\ndef linear_search(arr, x): \n    for i in range (len(arr)): \n        if arr[i] == x: \n            return i \n    return -1\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(arr, x): \n    start = 0\n    end = len(arr) - 1\n  \n    while start <= end: \n        mid = start + (end - start) // 2 \n        if arr[mid] == x: \n            return mid \n        elif arr[mid] < x: \n            start = mid + 1\n        else: \n            end = mid - 1  \n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_400", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a solution to the following problem: given an array of numbers, find all pairs of numbers whose product is equal to the given target number.\n\n### Input:\narr = [1,5,3,2], target = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_pairs(arr, target):\n\tpairs = []\n\tfor i in range(len(arr)):\n\t\tfor j in range(i+1, len(arr)):\n\t\t\tif arr[i]*arr[j] == target:\n\t\t\t\tpairs.append((arr[i], arr[j]))\n\treturn pairs\n```"}]}
{"dataset": "code_high", "id": "code_high_401", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the prime numbers between 1 to 10\n\n### Response:"}, {"role": "assistant", "content": "```python\nprimes = [2, 3, 5, 7]\nfor num in range(1, 11):\n    if num > 1:\n        is_prime = True\n        for i in range(2, num):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\nprint(primes)\n# Output: [2, 3, 5, 7] (all the prime numbers between 1 to 10)\n```"}]}
{"dataset": "code_high", "id": "code_high_402", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a python program to determine if a number is prime or composite.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Program to determine whether a number is prime or composite\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\nnumber = int(input(\"Enter a number: \"))\nif is_prime(number):\n    print(f\"{number} is a prime number.\")\nelse:\n    print(f\"{number} is a composite number.\")\n```"}]}
{"dataset": "code_high", "id": "code_high_403", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes in two strings and returns the number of times the first string is found within the second string.\n\n### Input:\nstring1 = \"ab\"\nstring2 = \"abcabcabc\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_substring(string1, string2):\n  count = 0\n  for i in range(len(string2)-len(string1)+1):\n    if string2[i:i+len(string1)] == string1:\n      count += 1\n  return count\n```"}]}
{"dataset": "code_high", "id": "code_high_404", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to write a program that finds all elements in a given array which are larger than their immediate neighbours.\n\n### Input:\n[3, 5, 1, 6, 8, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_elements_larger_than_neighbours(arr):\n    result = []\n    for index, value in enumerate(arr):\n        if index > 0 and index < len(arr)-1 and value > arr[index-1] and value > arr[index+1]:\n            result.append(value)\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_405", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a code to print out all permutations of the characters in a given string.\n\n### Input:\n\"ABC\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permute(s): \n    if len(s) == 0: \n        return [''] \n    prev_permutation_list = permute(s[1:len(s)])  \n    next_list = [] \n    for p in prev_permutation_list: \n        for j in range(len(p) + 1): \n            next_list.append(p[0:j] + s[0] + p[j:len(p)])  \n    return next_list\n```"}]}
{"dataset": "code_high", "id": "code_high_406", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm to find all the sets of three numbers in an array which adds up to a given number.\n\n### Input:\nArray: [2, 5, 8], Number: 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef three_sum(array, number):\n   result_sets = [] \n   for i in range(len(array) - 2):\n       for j in range(i+1, len(array) - 1):\n           for k in range(j+1, len(array)):\n               if array[i] + array[j] + array[k] == number: \n                   result_sets.append([array[i], array[j], array[k]])\n   return result_sets \nprint(three_sum([2, 5, 8], 10)) # Result: [[2, 5, 8]]\n```"}]}
{"dataset": "code_high", "id": "code_high_407", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to input an array and sort it using QuickSort algorithm.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quicksort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n```"}]}
{"dataset": "code_high", "id": "code_high_408", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a sorted list of integers, write a Python function to search for a specific target element.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(list, target):\n low = 0\n high = len(list) - 1\n while low <= high:\n  mid = (low + high) // 2\n  if list[mid] < target:\n   low = mid + 1\n  elif list[mid] > target:\n   high = mid - 1\n  else:\n   return mid\n return False\n```"}]}
{"dataset": "code_high", "id": "code_high_409", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPrint the longest palindrome from the given string\n\n### Input:\ns = \"abbaba\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longestPalindrome(s):\n    \"\"\"\n    This function prints the longest palindrome from the given string.\n    \"\"\"\n    longest_str = \"\"\n    n = len(s) \n  \n    for i in range(n): \n        # check for odd conditions\n        middle = s[i] \n        left = i-1\n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n        # check for even conditions\n        middle = ''\n        left = i \n        right = i+1\n        while (left >= 0 and right < n and s[left] == s[right]): \n            middle = s[left] + middle + s[right] \n            left -= 1\n            right += 1\n  \n        longest_str = middle if len(middle) > len(longest_str) else longest_str\n  \n    return longest_str\n```"}]}
{"dataset": "code_high", "id": "code_high_410", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the most frequently occurring element in an array.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_frequent_element(arr): \n    # Create a dictionary to store the frequency of each element\n    freq = {} \n    max_freq = 0\n    max_freq_elem = -1\n    \n    # Iterate through an array \n    for elem in arr: \n        if elem in freq.keys(): \n            freq[elem] += 1\n        else: \n            freq[elem] = 1\n  \n    # Find the most frequent element\n    for key,val in freq.items(): \n        # Update the maximum frequency and the corresponding element\n        if (max_freq < val): \n            max_freq_elem = key \n            max_freq = val \n    return max_freq_elem\n```"}]}
{"dataset": "code_high", "id": "code_high_411", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the longest substring with non-repeating characters\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_substring(string):\n    # Initialize the max length and the substring\n    max_length = 0\n    substring = ''\n    # Create an empty set to store previously seen characters\n    char_set = set()\n    # Iterate over the string\n    for char in string:\n        # If the character hasn't already been seen,\n        if char not in char_set:\n            # add it to the set\n            char_set.add(char)\n            # and extend the substring\n            substring += char\n        else:\n            # if the character has already been seen\n            # check whether the current substring is longer than the current max length\n            if len(substring) > max_length:\n                max_length = len(substring)\n            # Clear the set and the substring\n            char_set.clear()\n            substring = ''\n    # Check the last substring\n    if len(substring) > max_length:\n        max_length = len(substring)\n    \n    return max_length\n```"}]}
{"dataset": "code_high", "id": "code_high_412", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to print a Pascal's triangle with five rows.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef pascal_triangle(n): \n    trow = [1] \n    y = [0] \n    for x in range(max(n, 0)): \n        print(trow) \n        trow = [ l + r for l, r in zip(trow + y, y + trow)] \n        if(x > 0):\n            trow.append(1)\n    return n >= 1\npascal_triangle(5)\n```"}]}
{"dataset": "code_high", "id": "code_high_413", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm that checks if the given sequence is an arithmetic sequence.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_arithmetic_sequence(sequence):\n    is_arithmetic = True\n    diff = 0\n    for i in range(1, len(sequence)):\n        if i ==1:\n            diff = sequence[i]-sequence[i-1]\n        else:\n            new_diff = sequence[i]-sequence[i-1]\n            if new_diff != diff:\n                is_arithmetic = False\n                break\n    return is_arithmetic\n```"}]}
{"dataset": "code_high", "id": "code_high_414", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array containing words and a string, find the shortest word in the array that is a substring of the string\n\n### Input:\nwords = [\"apple\", \"banana\", \"cat\", \"dog\"], string = \"aquickbrownfoxjumpsoverthelazydog\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nGiven an array containing words and a string, find the shortest word in the array that is a substring of the string.\n\"\"\"\ndef find_shortest_substring(words, string): \n    min_length = float(\"inf\")\n    min_word = None\n    for word in words:\n        j = string.find(word)\n        if j>-1 and len(word)<min_length:\n            min_length = len(word)\n            min_word = word\n    return min_word\nif __name__ == '__main__': \n    words = [\"apple\", \"banana\", \"cat\", \"dog\"]\n    string = \"aquickbrownfoxjumpsoverthelazydog\"\n    print(find_shortest_substring(words, string))\n```"}]}
{"dataset": "code_high", "id": "code_high_415", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python class that implements a sorted list.\n\n### Input:\nNo input.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass SortedList:\n    def __init__(self):\n        self.items = []\n    def add(self, item):\n        i = 0\n        while i < len(self.items) and self.items[i] < item:\n            i += 1\n        self.items.insert(i, item)\n    def remove(self, item):\n        i = 0\n        while i < len(self.items) and self.items[i] != item:\n            i += 1\n        if i < len(self.items):\n            del self.items[i]\n    def remove_at(self, index):\n        del self.items[index]\n```"}]}
{"dataset": "code_high", "id": "code_high_416", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the standard library to construct a generator that returns the first n prime numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfrom math import sqrt\ndef prime_numbers(n):\n    primes = []\n    i = 2\n    while len(primes) < n:\n        for number in range(2, int(sqrt(i)) + 1):\n            if i % number == 0:\n                break\n        else:\n            primes.append(i)\n        i += 1\n    yield from primes\n```"}]}
{"dataset": "code_high", "id": "code_high_417", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that returns a list of Prime numbers between 0-50.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_numbers():\n    primes=[]\n    for i in range (1,51):\n        count=0\n        for j in range (2,i):\n            if i%j==0:\n                count+=1\n        if count==0:\n            primes.append(i)\n    return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_418", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a class to represent a vector, with initial vector and a scaler. Include methods to add, subtract and multiply two vectors.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Vector():\n    def __init__(self, vector, scaler):\n        self.vector = vector\n        self.scaler = scaler\n    def add_vector(self, other_vector):\n        result_vector = []\n        for i in range(len(self.vector)):\n            result_vector.append(self.vector[i] + other_vector.vector[i])\n        return Vector(result_vector, self.scaler)\n    \n    def sub_vector(self, other_vector):\n        result_vector = []\n        for i in range(len(self.vector)):\n            result_vector.append(self.vector[i] - other_vector.vector[i])\n        return Vector(result_vector, self.scaler)\n    def mul_vector(self, scaler):\n        result_vector = []\n        for element in self.vector:\n            result_vector.append(element * scaler)\n        return Vector(result_vector, self.scaler)\n```"}]}
{"dataset": "code_high", "id": "code_high_419", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to calculate the Fibonacci series up to n numbers where n is a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_420", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code for an object-oriented Bubble Sort algorithm.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Bubble:\n    def sort(self, list):\n        # iterate over the list\n        for i in range(len(list) - 1):\n            for j in range(len(list) - 1 - i): # loop from the first until the last\n                if list[j] > list[j+1]:  # if order is broken\n                    list[j], list[j+1] = list[j+1], list[j]  # swap the elements\n# Driver Code \nif __name__ == '__main__': \n    list = [ 64, 34, 25, 12, 22, 11, 90 ]\n    bubble = Bubble() \n    bubble.sort(list) \n   \n    print (\"Sorted array :\") \n    for i in range(len(list)): \n        print (\"%d\" %list[i])\n```"}]}
{"dataset": "code_high", "id": "code_high_421", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDebug the following code to print a list of all prime numbers between 1 and 10\n\n### Input:\nfor i in range(1, 10):\n    for x n range 2, i // 2\n    if i % x == 0 \n    print(i)\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(2, 10): \n    is_prime = True\n    for x in range(2, i // 2 + 1): \n        if i % x == 0: \n            is_prime = False\n            break\n    if is_prime: \n        print(i)\n```"}]}
{"dataset": "code_high", "id": "code_high_422", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing binary search, find the index of a given number in an array of length n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(arr, x):\n    low = 0\n    high = len(arr)-1\n    while low<=high:\n        mid = (low+high)//2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_423", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a a code to find all the prime numbers from 0 to 100\n\n### Response:"}, {"role": "assistant", "content": "```python\n# create a list of all the prime numbers\nprime_list = []\n# iterate through 0 to 100\nfor i in range(1,101):\n    if i > 1:\n        # loop through 2 to i/2\n        for j in range(2,i//2):\n            # if i is divisible by j, then it is not a prime number\n            if (i % j) == 0:\n                break\n        else:\n            # add the prime number to the prime list\n            prime_list.append(i)\nprint(prime_list) # prints the list of all prime numbers from 0 to 100.\n```"}]}
{"dataset": "code_high", "id": "code_high_424", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nAn array of integers is given, write a function to print the second largest element of the array.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef secondLargest(arr):\n    first = 0\n    second = 0\n    for i in range(len(arr)):\n        if arr[i] > first:\n            second, first = first, arr[i]\n        elif (arr[i] > second and arr[i] < first):\n            second = arr[i]\n    return second\n```"}]}
{"dataset": "code_high", "id": "code_high_425", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a conditional statement, print a message depending on the day of the week.\n\n### Input:\nday_of_week = \"Thursday\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nif day_of_week == \"Monday\":\n    print(\"It's Monday\")\nelif day_of_week == \"Tuesday\":\n    print(\"It's Tuesday\")\nelif day_of_week == \"Wednesday\":\n    print(\"It's Wednesday\")\nelif day_of_week == \"Thursday\":\n    print(\"It's Thursday\")\nelif day_of_week == \"Friday\":\n    print(\"It's Friday\")\nelif day_of_week == \"Saturday\":\n    print(\"It's Saturday\")\nelif day_of_week == \"Sunday\":\n    print(\"It's Sunday\")\n```"}]}
{"dataset": "code_high", "id": "code_high_426", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm to subtract two strings, represented as a linked list, in the order they appear in and return the result as a linked list.\n\n### Input:\nl1 = [\"1\",\"2\",\"3\"],\nl2 = [\"9\",\"2\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef linkedListSubtract(l1, l2):\n    dummy_node = ListNode(0)\n    current = dummy_node\n \n    carry = 0\n    while l1 or l2:\n        curr_value1 = 0\n        curr_value2 = 0\n        if l1 :\n            curr_value1 += int(l1.val)\n            l1 = l1.next\n        if l2 :\n            curr_value2 += int(l2.val)\n            l2 = l2.next\n        curr_value = curr_value1 - curr_value2 - carry\n        if curr_value < 0 :\n            curr_value += 10\n            carry = 1\n        else :\n            carry = 0\n        current.next = ListNode(str(curr_value))\n        current = current.next\n \n    if carry > 0 :\n        current.next = ListNode(str(carry))\n    return dummy_node.next\n```"}]}
{"dataset": "code_high", "id": "code_high_427", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to print all the paths in a binary tree.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_paths(root): \n    path = [] \n    print_paths_util(root, path, 0) \n  \ndef print_paths_util(root, path, pathLen): \n    if root is None: \n        return\n  \n    if (len(path) > pathLen):  \n        path[pathLen] = root.data\n    else: \n        path.append(root.data) \n  \n    pathLen = pathLen + 1\n  \n    if root.left is None and root.right is None: \n        for i in range(pathLen):\n            print(path[i],end=\" \")\n        print() \n    else: \n        print_paths_util(root.left, path, pathLen) \n        print_paths_util(root.right, path, pathLen)\n```"}]}
{"dataset": "code_high", "id": "code_high_428", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare two given JSON objects and create a merged object.\n\n### Input:\nObject A: {\n\t\"name\": \"John\",\n\t\"age\": 35,\n\t\"interests\": [\"music\"]\n}\nObject B: {\n\t\"name\": \"John\",\n\t\"hobbies\": [\"cycling\"]\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_json(json_a, json_b):\n # Create a new object\n merged = dict()\n # Iterate through the keys in both objects\n for key in json_a.keys() | json_b.keys():\n   # Merge the values of matching keys\n   if key in json_a and key in json_b:\n     if isinstance(json_a[key], list) and isinstance(json_b[key], list):\n       merged[key] = json_a[key] + json_b[key]\n     else:\n       merged[key] = [json_a[key], json_b[key]]\n   # Add keys that only exist in one object\n   elif key in json_a:\n     merged[key] = json_a[key]\n   elif key in json_b:\n     merged[key] = json_b[key]\n # Return the merged object\n return merged\n```"}]}
{"dataset": "code_high", "id": "code_high_429", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you find the maximum 3 elements from a list of numbers?\n\n### Input:\n[20, -50, 15, 55, 0 , 40]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_max_three(nums):\n    max1 = - float('inf')\n    max2 = - float('inf')\n    max3 = - float('inf')\n    for num in nums:\n        if num > max1:\n            max3 = max2\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max3 = max2\n            max2 = num\n        elif num > max3:\n            max3 = num\n            \n    return max1, max2, max3\nprint(find_max_three([20, -50, 15, 55, 0, 40]))\n```"}]}
{"dataset": "code_high", "id": "code_high_430", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to generate the Fibonacci series up to the nth term\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n):  \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_431", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that can generate all permutations of a given string.\n\n### Input:\nstring = \"ABC\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permute(string):\n    if len(string) == 1:\n        return [string] \n    prevList = permute(string[1:]) \n    nextList = [] \n    for i in range(len(prevList)): \n        for j in range(len(string)): \n            newString = prevList[i][:j] + string[0:1] + prevList[i][j:] \n            if newString not in nextList: \n                nextList.append(newString) \n    return nextList\n```"}]}
{"dataset": "code_high", "id": "code_high_432", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function in python that takes two lists and returns the product of their longest common substrings.\n\n### Input:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [2, 3, 5, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_common_substring(list1, list2):\n    longest_substring = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                current_substring = 1\n                k, l = i+1, j+1\n                while k < len(list1) and l < len(list2) and list1[k] == list2[l]:\n                    current_substring += 1\n                    k += 1\n                    l += 1\n                longest_substring = max(longest_substring, current_substring)\n    if longest_substring == 0:\n        return 0\n    else:\n        return list1[0] * list2[0] * longest_substring\n```"}]}
{"dataset": "code_high", "id": "code_high_433", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to sort data in an array in ascending order.\n\n### Input:\narr = [8, 0, 5, 10, 4, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n-1):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1] :\n                arr[j], arr[j+1] = arr[j+1], arr[j]\nbubble_sort(arr)\nprint(arr)\n```"}]}
{"dataset": "code_high", "id": "code_high_434", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to find the longest common prefix among a given set of strings.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nA code to find the longest common prefix among a given set of strings\n\"\"\"\ndef longest_common_prefix(strs): \n  \n    if not strs: \n        return \"\" \n  \n    shortest_str = min(strs,key=len) \n   \n    for i, ch in enumerate(shortest_str): \n        for other in strs: \n            if other[i] != ch: \n                return shortest_str[:i]  \n    return shortest_str \n  \nif __name__ == '__main__': \n    strs = [\"flower\",\"flow\",\"flight\"] \n    print(\"The longest common prefix is: %s\" % longest_common_prefix(strs))\n```"}]}
{"dataset": "code_high", "id": "code_high_435", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that can detect if a word is a palindrome.\n\n### Input:\nWord: racecar\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef isPalindrome(string): \n    left = 0\n    right = len(string) - 1\n  \n    while right >= left:\n        if not string[left] == string[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n# Test program\nisPalindrome(\"racecar\")\n# Output\n# True\n```"}]}
{"dataset": "code_high", "id": "code_high_436", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to return the first n digits of the Fibonacci sequence.\n\n### Input:\nn = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b \nfibonacci(n)\n```"}]}
{"dataset": "code_high", "id": "code_high_437", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that returns the number of prime numbers between the numbers provided in the input.\n\n### Input:\nstart_num = 10\nend_num = 30\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_primes(start_num, end_num):\n    primes_count = 0\n    for num in range(start_num, end_num + 1):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                primes_count += 1\n    return primes_count\n```"}]}
{"dataset": "code_high", "id": "code_high_438", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to convert an integer to its binary representation.\n\n### Input:\nnum = 15\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef int_to_binary(num):\n    '''This function will convert an integer to its binary representation.'''\n    binary = ''\n    while num > 0:\n        binary += str(num % 2)\n        num //= 2\n    return binary[::-1]\nif __name__ == '__main__':\n    num = 15\n    print(int_to_binary(num))\n```"}]}
{"dataset": "code_high", "id": "code_high_439", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm that sorts the following list of integers in ascending order\n\n### Input:\n[15, 5, 8, 0, 42]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_list(lst):\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] > lst[j]:\n                lst[i], lst[j] = lst[j], lst[i]\n    return lst\n```"}]}
{"dataset": "code_high", "id": "code_high_440", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following Python program to sort the numbers in an array in ascending order.\n\n### Input:\nlist = [5, 1, 0, 4, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort(list): \n    for i in range(len(list)-1): \n        for j in range(0, len(list)-i-1): \n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j] \n                \nlist = [5, 1, 0, 4, 7]\nsort(list) \nprint (\"Sorted list is:\") \nprint(list)\n```"}]}
{"dataset": "code_high", "id": "code_high_441", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script to sort an array of numbers from largest to smallest using quick sort.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef partition(array, begin, end):\n    pivot = begin\n    for i in range(begin+1, end+1):\n        if array[i] <= array[begin]:\n            pivot += 1\n            array[i], array[pivot] = array[pivot], array[i]\n    array[pivot], array[begin] = array[begin], array[pivot]\n    return pivot\ndef quick_sort(array, begin=0, end=None):\n    if end is None:\n        end = len(array) - 1\n    \n    def _quick_sort(array, begin, end):\n        if begin >= end:\n            return\n        pivot = partition(array, begin, end)\n        _quick_sort(array, begin, pivot-1)\n        _quick_sort(array, pivot+1, end)\n    return _quick_sort(array, begin, end)\n```"}]}
{"dataset": "code_high", "id": "code_high_442", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to implement a text-based game\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\ndef intro():\n    print(\"Welcome to the game! You are stuck in a dungeon and must find a way out. Type 'help' for instructions.\")\ndef help_command():\n  print(\"Type 'north', 'south', 'west', or 'east' to move in that direction. Type 'check inventory' to view items in your inventory. Type 'quit' to quit.\")\ndef move(direction):\n  if direction == 'north':\n    print(\"You moved north.\")\n  elif direction == 'south':\n    print(\"You moved south.\")\n  elif direction == 'west':\n    print(\"You moved west.\")\n  elif direction == 'east':\n    print(\"You moved east.\")\ndef check_inventory():\n  print(\"You have nothing in your inventory.\")\ndef quit_game():\n  print(\"Thanks for playing!\")\n  return False\nintro()\nplaying = True\nwhile playing:\n  command = input(\"What would you like to do? > \").lower()\n  if command == 'help':\n    help_command()\n  elif command == 'north' or command == 'south' or command == 'west' or command == 'east':\n    move(command)\n  elif command == 'check inventory':\n    check_inventory()\n  elif command == 'quit':\n    playing = quit_game()\n```"}]}
{"dataset": "code_high", "id": "code_high_443", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to generate a list of all possible permutations of a given string.\n\n### Input:\n\"ABC\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_permutations(string):\n    if len(string) == 0:\n        return []\n    if len(string) == 1:\n        return [string]\n \n    permutations = []\n    for i, char in enumerate(string):\n        for permutation in get_permutations(string[:i] + string[i+1:]):\n            permutations.append(char + permutation)\n \n    return permutations\nif __name__ == \"__main__\":\n    print(get_permutations(\"ABC\"))\n```"}]}
{"dataset": "code_high", "id": "code_high_444", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nProduce a function that takes in an array of integers and returns an array with all the prime numbers in it.\n\n### Input:\narr = [2, 11, 9, 5, 4, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef findPrimeNumbers(arr): \n\tprime_list = []\n\tfor number in arr: \n\t\tisPrime = True\n\t\tfor i in range(2, number): \n\t\t\tif number % i == 0: \n\t\t\t\tisPrime = False\n\t\tif isPrime: \n\t\t\tprime_list.append(number)\n\treturn prime_list \narr = [2, 11, 9, 5, 4, 7]\nprint(findPrimeNumbers(arr))\n# Output\n# [2, 11, 5, 7]\n```"}]}
{"dataset": "code_high", "id": "code_high_445", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm that takes in an array and determines if it is a valid BST.\n\n### Input:\n[9, 7, 3, 15, 20]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_valid_bst(arr):\n    if len(arr) == 0:\n        return True\n    if len(arr) == 1:\n        return True\n    root_val = arr[0]\n    left_subtree = [i for i in arr if i < root_val]\n    right_subtree = [i for i in arr if i > root_val]\n    if sorted(left_subtree) == left_subtree and sorted(right_subtree, reverse=True) == right_subtree:\n        return (is_valid_bst(left_subtree) and is_valid_bst(right_subtree))\n    else:\n        return False\nif __name__ == \"__main__\":\n    print(is_valid_bst([9, 7, 3, 15, 20]))\n```"}]}
{"dataset": "code_high", "id": "code_high_446", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that can convert a given number (integer) to binary.\n\n### Input:\nConvert 33 to binary numerals.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef convert_to_binary(n):\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n%2) + binary_num\n        n = n//2\n    return binary_num\n    \nif __name__ == \"__main__\":\n    print(convert_to_binary(33))\n```"}]}
{"dataset": "code_high", "id": "code_high_447", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to create a new string where the first and last occurrence of each character is removed.\n\n### Input:\n'Hello World'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef strip_string(s): \n    new_str = \"\"\n    counts = {}\n    \n    # Create a dictionary to record the number of occurrences of each character\n    for letter in s: \n        if letter not in counts:\n            counts[letter] = 1\n        else: \n            counts[letter] += 1\n    \n    for char in s: \n        if counts[char] > 1: \n            new_str += char\n        counts[char] -= 1\n    return new_str\n```"}]}
{"dataset": "code_high", "id": "code_high_448", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to determine if a String contains a valid US phone number\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef isValidPhoneNumber(s):\n    # strip all the non-numeric characters\n    nums = ''.join(filter(str.isalnum, s))\n    \n    # ensure it is 10 digits long\n    if len(nums) != 10:\n        return False\n    \n    # ensure the last 7 digits are valid\n    if nums[3:10] in set('2', '3', '4', '5', '6', '7', '8', '9'):\n        return False\n    \n    # ensure first 3 digits are valid\n    area_codes = set('201', '202', '203', '205', '206', '207', '208', '209', \n                     '210', '212', '213', '214', '215', '216', '217', '218',\n                     '219', '224', '225', '226', '228', '229', '231', '234',\n                     '239', '240', '242', '244', '245', '248', '250', '251', \n                     '252', '253', '254', '256', '260', '262', '264', '267', \n                     '268', '269', '270', '276', '281', '284', '289', '301', \n                     '302', '303', '304', '305', '306', '307', '308', '309', \n                     '310', '312', '313', '314', '315', '316', '317', '318',\n                     '319', '320', '321', '323', '330', '331', '334', '336',\n                     '337', '339', '340', '347', '351', '352', '360', '362',\n                     '386', '401', '402', '403', '404', '405', '406', '407',\n                     '408', '409', '410', '412', '413', '414', '415', '417',\n                     '418', '419', '423', '424', '425', '430', '431', '432',\n                     '434', '435', '440', '441', '443', '450', '468', '473',\n                     '478', '479', '480', '484', '501', '502', '503', '504', \n                     '505', '506', '507', '508', '509', '510', '512', '513', \n                     '515', '516', '517', '518', '519', '520', '530', '540', \n                     '541', '551', '557', '559', '561', '562', '563', '564', \n                     '567', '570', '571', '573', '574', '580', '585', '586', \n                     '601', '602', '603', '605', '606', '607', '608', '609', \n                     '610', '612', '614', '615', '616', '617', '618', '619', \n                     '620', '623', '626', '628', '630', '631', '636', '641', \n                     '646', '650', '651', '661', '662', '678', '681', '682', \n                     '701', '702', '703', '704', '705', '706', '707', '708', \n                     '712', '713', '714', '715', '716', '717', '718', '719', \n                     '720', '724', '725', '727', '731', '732', '734', '737', \n                     '740', '754', '757', '758', '760', '762', '763', '765', \n                     '769', '770', '772', '773', '774', '775', '778', '780', \n                     '781', '784', '785', '786', '787', '801', '802', '803', \n                     '804', '805', '806', '807', '808', '809', '810', '812', \n                     '813', '814', '815', '816', '817', '818', '828', '830', \n                     '831', '832', '843', '845', '847', '848', '850', '856', \n                     '857', '858', '859', '860', '862', '863', '864', '865', \n                     '870', '872', '878', '901', '903', '904', '906', '907', \n                     '908', '909', '910', '912', '913', '914', '915', '916', \n                     '917', '918', '919', '920', '925', '927', '928', '931',\n                     '936', '937', '940', '941', '947', '949', '951', '952', \n                     '954', '956', '970', '971', '972', '973', '978', '979', \n                     '980', '984', '985', '989')\n    if nums[:3] not in area_codes:\n        return False\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_449", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given a list of numbers. Count how many of them are prime numbers.\n\n### Input:\n[1,2,3,4,5,6,7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_primes(numbers):\n    count = 0\n    for number in numbers:\n        if is_prime(number):\n            count += 1\n    return count\n \ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, number):\n        if number % i == 0:\n            return False\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_450", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nBuild a function to convert an adjacency matrix into an adjacency list.\n\n### Input:\nA = \n[[0, 1, 0, 0], \n [1, 0, 1, 1], \n [0, 1, 0, 0], \n [0, 1, 0, 0]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef adjacency_matrix_to_list(A):\n    \"\"\"\n    Convert an adjacency matrix to an adjacency list\n    \n    Parameters\n    ----------\n    A: 2D list representing an adjacency matrix\n    \n    Returns\n    -------\n    adj_list: Adjacency list\n    \"\"\"\n    n = len(A)\n    adj_list = [[] for i in range(n)]\n        \n    for i in range(n):\n        for j in range(n):\n            if A[i][j] == 1:\n                adj_list[i].append(j)\n                \n    return adj_list\n```"}]}
{"dataset": "code_high", "id": "code_high_451", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the following piece of code to check if a string is a palindrome or not.\n\n### Input:\nString text = \"malayalam\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_palindrome(text): \n    start = 0\n    end = len(text) - 1\n    while start < end:\n        if text[start] != text[end]:\n            return False\n        start += 1\n        end -= 1\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_452", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the following list of numbers in increasing order without using any built-in sorting method.\n\n### Input:\narr = [2, 5, 3, 8, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_increasing(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\narr = [2, 5, 3, 8, 7] \nsorted_arr = sort_increasing(arr)\nprint(*sorted_arr) # Output: 2 3 5 7 8\n```"}]}
{"dataset": "code_high", "id": "code_high_453", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to check if the given string `str1` is a permutation of the string `str2`\n\n### Input:\nstr1 = 'program'\nstr2 = 'gramopr'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_permutation(str1, str2): \n    \"\"\"\n    Function to check if the given string str1 is a permutation of the string str2 \n    \n    Parameters: \n    str1 (str): first string \n    str2 (str): second string \n    \n    Returns: \n    bool: True if str1 is a permutation of str2, False otherwise\n    \"\"\"\n    if (len(str1) != len(str2)): \n        return False\n    else: \n        count = [0] * 128\n        for i in range(len(str1)):\n            count[ord(str1[i])] +=1\n            count[ord(str2[i])] -=1\n        for i in range(128):\n            if count[i] != 0: \n                return False\n        return True\n```"}]}
{"dataset": "code_high", "id": "code_high_454", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a binary search algorithm using Python.\n\n### Input:\nnums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(nums, target): \n    start = 0\n    end = len(nums) - 1\n    while start <= end:\n        mid = start + (end - start)//2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] > target:\n            end = mid - 1\n        else: \n            start = mid + 1\n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_455", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to sort an array of integers using the quicksort algorithm.\n\n### Input:\narray = [2, 4, 5, 1, 9, 0]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quicksort(arr):\n    if len(arr) == 0 or len(arr) == 1:\n        return arr\n    else:\n        pivot = arr[0]\n        arr.remove(arr[0])\n        left_arr = []\n        right_arr = []\n        for element in arr:\n            if element <= pivot:\n                left_arr.append(element)\n            else:\n                right_arr.append(element)\n        left_arr = quicksort(left_arr)\n        right_arr = quicksort(right_arr)\n        sorted_arr = left_arr + [pivot] + right_arr\n        return sorted_arr\nif __name__ == \"__main__\":\n    array = [2, 4, 5, 1, 9, 0]\n    sorted_arr = quicksort(array)\n    print(sorted_arr)\n# Output: [0, 1, 2, 4, 5, 9]\n```"}]}
{"dataset": "code_high", "id": "code_high_456", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRe-write the code in the given input to make it more efficient.\n\n### Input:\ndef fibonacci(n):\n   if n <= 1:\n      return n\n   else:\n      return(fibonacci(n-1) + fibonacci(n-2))\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==1: \n        return 1\n    else: \n        a = 0\n        b = 1\n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_457", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm to check if two strings have the same characters and same frequency of characters.\n\n### Input:\nString A: hello \nString B: ollhe\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_anagram(str1, str2):\n    char_map1 = {}\n    char_map2 = {}\n    for char in str1:\n        if char in char_map1:\n            char_map1[char] += 1\n        else:\n            char_map1[char] = 1\n    \n    for char in str2:\n        if char in char_map2:\n            char_map2[char] += 1\n        else:\n            char_map2[char] = 1\n    \n    return char_map1 == char_map2\n```"}]}
{"dataset": "code_high", "id": "code_high_458", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to find the maximum length of the longest consecutive increasing subsequence in the given array.\n\n### Input:\narr = [2, 3, 1, 10, 5, 6, 8, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_length(arr): \n    ans = 1\n    j = 0\n    for i in range(len(arr)): \n        if (arr[i+1] - arr[i] > 0): \n            j += 1\n            ans = max(ans, j+1)\n        else:  \n            j = 0\n    return ans\nprint(max_length(arr))\n```"}]}
{"dataset": "code_high", "id": "code_high_459", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to generate the Fibonacci series upto 'n' terms.\n\n### Input:\nn = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_460", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement Binary Search in Python\n\n### Input:\n[2, 3, 4, 5, 11, 19, 20]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# function to do binary search\ndef binarySearch(array, x): \n    l, r = 0, len(array)-1 \n    while l <= r: \n  \n        mid = l + (r - l)//2; \n          \n        # Check if x is present at mid \n        if array[mid] == x: \n            return mid \n  \n        # If x is greater, ignore left half \n        elif array[mid] < x: \n            l = mid + 1\n  \n        # If x is smaller, ignore right half \n        else: \n            r = mid - 1\n      \n    # If we reach here, then the element \n    # was not present \n    return -1\n  \narray = [2, 3, 4, 5, 11, 19, 20] \nx = 11\nresult = binarySearch(array, x) \nif result != -1: \n    print (\"Element is present at index\", \n            result) \nelse: \n    print (\"Element is not present in array\")\n```"}]}
{"dataset": "code_high", "id": "code_high_461", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite the code for the following sorting algorithm.\n\n### Input:\nBubble Sort\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(arr): \n  \n    # Traverse through all array elements \n    for i in range(len(arr)): \n  \n        # Last i elements are already in place \n        for j in range(0, len(arr)-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\n```"}]}
{"dataset": "code_high", "id": "code_high_462", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFormat the following list in descending order of number of characters in each string.\n\n### Input:\nlist = ['Hello', 'World', 'Technology']\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_list(list):\n    for i in range(len(list)):\n        for j in range(0, len(list)-i-1):\n            if len(list[j]) < len(list[j+1]):\n                list[j], list[j+1] = list[j+1], list[j]\n    return list\nsort_list([\"Hello\", \"World\", \"Technology\"])\n```"}]}
{"dataset": "code_high", "id": "code_high_463", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to sort a list of numbers without using python's built-in sort function.\n\n### Input:\n[3,5,4,2,1]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Function to sort a list of numbers without using Python's built-in sort function\ndef my_sort(numbers):\n    n = len(numbers)\n    for i in range(n): \n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1] :\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n                \n    return numbers\n# Example list\nlist = [3,5,4,2,1]\nprint(my_sort(list))\n```"}]}
{"dataset": "code_high", "id": "code_high_464", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a simple algorithm to check if a number is prime\n\n### Input:\n11\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(n):\n    # check if n is divisible by any number between 2 and n-1 \n    for i in range (2, n):\n        # if a number is divisible, then return False\n        if (n % i == 0):\n            return False\n    # if n is only divisible by itself, return True\n    return True\nif __name__ == '__main__':\n    n = 11\n    if(is_prime(n)):\n        print(n, \"is a prime number\")\n    else:\n        print(n, \"is not a prime number\")\n```"}]}
{"dataset": "code_high", "id": "code_high_465", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to generate an array of all possible permutations of N numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_permutations(n): \n  \n    if n == 0: \n        return [] \n    \n    if n == 1: \n        return [[1]] \n  \n    permutations = [] \n    for i in range(n): \n        permutations_n_1 = generate_permutations(n - 1) \n  \n        for perm in permutations_n_1: \n            for j in range(n): \n                r = perm.copy() \n                r.insert(j, n) \n                permutations.append(r) \n  \n    return permutations\n```"}]}
{"dataset": "code_high", "id": "code_high_466", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a method to sum up two matrices\n\n### Input:\nMatrix A: [[3, 5, 7],\n           [1, 6, 9]]\nMatrix B: [[4, 8, 2],\n           [3, 5, 7]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef matrix_addition(A, B):\n    if len(A) != len(B) or len(A[0]) != len(B[0]):\n        return 'Matrices cannot be added!'\n    else:\n        result = [[0 for i in range(len(A[0]))] for j in range(len(A))]\n        for i in range(len(A)):\n            for j in range(len(A[0])):\n                result[i][j] = A[i][j] + B[i][j]\n        return result\nA = [[3, 5, 7], [1, 6, 9]]\nB = [[4, 8, 2], [3, 5, 7]]\nprint(matrix_addition(A, B)) # [[7, 13, 9], [4, 11, 16]]\n```"}]}
{"dataset": "code_high", "id": "code_high_467", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function which takes a two-dimensional array of integers as an argument and prints out the elements in spiral order.\n\n### Input:\n[[1,2,3],\n[4,5,6],\n[7,8,9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef printSpiral(arr):\n    # track the current row and columns\n    cur_row = 0\n    cur_col = 0\n    \n    # track the starting and ending columns of the row and rows of the column\n    start_col = 0\n    end_col = len(arr[0]) - 1\n    start_row = 0\n    end_row = len(arr) - 1\n    \n    while start_col <= end_col and start_row <= end_row:\n        # move right\n        for i in range(start_col, end_col + 1):\n            print(arr[cur_row][i])\n        start_row += 1\n        cur_row = start_row\n        \n        # move down\n        for i in range(start_row, end_row + 1):\n            print(arr[i][end_col])\n        end_col -= 1\n        cur_col = end_col\n        \n        # move left\n        for i in range(end_col, start_col - 1, -1):\n            print(arr[end_row][i])\n        end_row -= 1\n        cur_row = end_row\n        \n        # move up\n        for i in range(end_row, start_row - 1, -1):\n            print(arr[i][start_col])\n        start_col += 1\n        cur_col = start_col\n```"}]}
{"dataset": "code_high", "id": "code_high_468", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers and a target, write an algorithm to determine if the list contains a subset that sums up to the target.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef subsetsum(arr, target):\n    n = len(arr)\n    dp = [[False for x in range(target + 1)] for y in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n+1):\n        for j in range(target + 1):\n            dp[i][j] = dp[i-1][j] or (arr[i-1] <= j and dp[i-1][j - arr[i-1]])\n    return dp[n][target]\n```"}]}
{"dataset": "code_high", "id": "code_high_469", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to return all the prime numbers under the nth number.\n\n### Input:\nn = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_primes(n):\n    primes = []\n    for num in range(2, n + 1):\n        for i in range(2, num):\n            if (num % i) == 0:\n                break\n        else:\n            primes.append(num)\n    return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_470", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes a string of characters and returns the minimal number of division/multiplication operations needed to make all characters within the string the same.\n\n### Input:\nacdc\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef operations(string):\n    char_set = set(string)\n    while len(char_set) > 1:\n        char_arr = list(char_set)\n        x = char_arr[0]\n        y = char_arr[1]\n        if x == y:\n            break\n        elif x > y:\n            new_val = x/y\n            for i in range(len(string)):\n                if string[i] == x:\n                    string[i] = new_val\n        else:\n            new_val = y/x\n            for i in range(len(string)):\n                if string[i] == x:\n                    string[i] = new_val\n        char_set = set(string)\n    return len(char_set)-1\n```"}]}
{"dataset": "code_high", "id": "code_high_471", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to implement quicksort.\n\n### Input:\narr = [6, 1, 8, 4, 9, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nImplement quicksort\n\"\"\"\ndef quicksort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\nif __name__ == '__main__':\n    arr = [6, 1, 8, 4, 9, 5]\n    result = quicksort(arr)\n    print(result)\n```"}]}
{"dataset": "code_high", "id": "code_high_472", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the program to support calculating Fibonacci numbers up to the nth number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef FibonacciSeries(n):\n    if n <= 0:\n        return [0]\n    elif n == 1:\n        return [0,1]\n    else:\n        series = [0,1]\n        for i in range(2, n):\n            curr_num = series[i-1] + series[i-2]\n            series.append(curr_num)\n        return series\n```"}]}
{"dataset": "code_high", "id": "code_high_473", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to optimize the parsing of a given sentence using CKY parsing.\n\n### Input:\nSentence: \"The cat chased the dog around the corner of the house.\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Imports\nimport nltk\n# CKY Parsing\ndef cky_parse(sentence):\n  \"\"\"Given a sentence, apply CKY parsing to optimize the parsing of it\"\"\"\n  \n  words = nltk.word_tokenize(sentence)\n  \n  # Create tree structure\n  table = [[None for i in range(len(words))] for j in range(len(words))]\n  for j in range(len(words)):\n    for i in reversed(range(j)):\n      parts_of_speech = nltk.pos_tag(words[i:j+1])\n      part_of_speech = tuple(tag for word,tag in parts_of_speech)\n      if part_of_speech in grammar.productions():\n        table[i][j] = part_of_speech\n        break\n  return table\n```"}]}
{"dataset": "code_high", "id": "code_high_474", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string s and a list of words words, write a program to find all occurrences of words in the string s.\n\n### Input:\ns = 'The quick brown fox jumps over the lazy dog.'\nwords = ['quick', 'fox', 'dog']\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_words(s, words):\n    occurrence_indices = []\n    for word in words:\n        start = 0\n        while True:\n            index = s.find(word, start)\n            if index == -1:\n                break\n            else:\n                occurrence_indices.append(index)\n                start = index + 1\n    return occurrence_indices\n```"}]}
{"dataset": "code_high", "id": "code_high_475", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the following Python program so that it prints out the palindromic substrings.\n\n### Input:\nstring = 'mom'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef palindromicSubstrings(string): \n    for start in range(len(string) + 1):\n        for end in range(start + 1, len(string) + 1):\n            substring = string[start:end]\n            if substring == substring[::-1]:\n                print(substring) \npalindromicSubstrings(string)\n```"}]}
{"dataset": "code_high", "id": "code_high_476", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to evaluate a postfix expression.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Python program to evaluate value of a postfix expression \n  \n# Class to convert the expression \nclass Conversion: \n       \n    # Constructor to initialize the class variables \n    def __init__(self, capacity): \n        self.top = -1\n        self.capacity = capacity \n        # This array is used a stack \n        self.array = [] \n        # Precedence setting \n        self.output = [] \n        self.precedence = {'+':1, '-':1, '*':2, '/':2, '^':3}\n       \n    # check if the stack is empty \n    def isEmpty(self): \n        return True if self.top == -1 else False\n       \n    # Return the value of the top of the stack \n    def peek(self): \n        return self.array[-1] \n       \n    # Pop the element from the stack \n    def pop(self): \n        if not self.isEmpty(): \n            self.top -= 1\n            return self.array.pop() \n        else: \n            return \"$\"\n       \n    # Push the element to the stack \n    def push(self, op): \n        self.top += 1\n        self.array.append(op)  \n   \n    # A utility function to check is the given character \n    # is operand  \n    def isOperand(self, ch): \n        return ch.isalpha() \n   \n    # Check if the precedence of operator is strictly \n    # less than top of stack or not \n    def notGreater(self, i): \n        try: \n            a = self.precedence[i] \n            b = self.precedence[self.peek()] \n            return True if a  <= b else False\n        except KeyError:  \n            return False\n              \n    # The main function that converts given infix expression \n    # to postfix expression  \n    def infixToPostfix(self, exp): \n           \n        # Iterate over the expression for conversion \n        for i in exp: \n            # If the character is an operand,  \n            # add it to output \n            if self.isOperand(i): \n                self.output.append(i) \n              \n            # If the character is an '(', push it to stack \n            elif i  == '(': \n                self.push(i) \n   \n            # If the scanned character is an ')', pop and  \n            # output from the stack until and '(' is found \n            elif i == ')': \n                while( (not self.isEmpty()) and self.peek() != '('): \n                    a = self.pop() \n                    self.output.append(a) \n                if (not self.isEmpty() and self.peek() != '('): \n                    return -1\n                else: \n                    self.pop() \n   \n            # An operator is encountered \n            else: \n                while(not self.isEmpty() and self.notGreater(i)): \n                    self.output.append(self.pop()) \n                self.push(i) \n   \n        # pop all the operator from the stack \n        while not self.isEmpty(): \n            self.output.append(self.pop()) \n   \n        return \"\".join(self.output) \n   \ncount = 0\n# Driver program to test above function \nexp = \"a+b*(c^d-e)^(f+g*h)-i\"\nobj = Conversion(len(exp)) \nans = obj.infixToPostfix(exp) \nprint(ans)\n# This function evaluates value of a postfix expression \ndef evaluatePostfix(exp): \n\t\n\t# Create a stack \n\tstack = [] \n\t\n\t# Scan all characters one by one \n\tfor i in exp: \n\t\t\n\t\t# If the character is a number, push it to the stack \n\t\tif i.isdigit(): \n\t\t\tstack.append(int(i)) \n\t\t# If the character is an operator, pop two \n\t\t# elements from stack apply the operator \n\t\telse: \n\t\t\tval1 = stack.pop() \n\t\t\tval2 = stack.pop() \n\t\t\tif i == '+': \n\t\t\t\tstack.append(val2 + val1) \n\t\t\telif i == '-': \n\t\t\t\tstack.append(val2 - val1) \n\t\t\telif i == '*': \n\t\t\t\tstack.append(val2 * val1) \n\t\t\telse: \n\t\t\t\tstack.append(val2 / val1) \n\treturn stack.pop() \n# Driver Program to test above function \n#exp = \"231*+9-\"\n#exp = ans\n#print(exp)\n#print('postfix evaluation: %d' %(evaluatePostfix(exp) ))\n```"}]}
{"dataset": "code_high", "id": "code_high_477", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the edits between two strings.\n\n### Input:\nstr1 = \"I am eating\"\nstr2 = \"I am eating a sandwich\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef edit_distance(str1, str2):\n    \"\"\"\n    Compute the edit distance between two strings\n    \"\"\"\n    m = len(str1)\n    n = len(str2)\n    distance = [[0 for i in range(n+1)] for j in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            # If first string is empty, only option is to insert all characters of second string\n            if i == 0:\n                distance[i][j] = j\n            # If second string is empty, only option is to remove all characters of first string\n            elif j == 0:\n                distance[i][j] = i\n            # If last characters are same, ignore last char and recur for remaining string\n            elif str1[i-1] == str2[j-1]:\n                distance[i][j] = distance[i-1][j-1]\n            # If last characters are not same, consider all possibilities and find minimum\n            else:\n                replace_cost = distance[i-1][j-1] + 1\n                remove_cost = distance[i-1][j] + 1\n                insert_cost = distance[i][j-1] + 1\n                distance[i][j] = min(replace_cost, remove_cost, insert_cost)\n    return distance[m][n]\nif __name__ == '__main__':\n    str1 = \"I am eating\"\n    str2 = \"I am eating a sandwich\"\n    print(edit_distance(str1, str2))\n```"}]}
{"dataset": "code_high", "id": "code_high_478", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement quick sort on an array.\n\n### Input:\nunsorted_nums = [2, 8, 1, 5, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef partition(arr, low, high): \n    i = (low-1)\n    pivot = arr[high]\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i = i+1\n            arr[i], arr[j] = arr[j], arr[i] \n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return (i+1) \ndef quick_sort(arr, low, high): \n    if low < high:\n        pi = partition(arr, low, high) \n        quick_sort(arr, low, pi-1) \n        quick_sort(arr, pi+1, high)\nquick_sort(unsorted_nums, 0, len(unsorted_nums)-1)\nprint(unsorted_nums)\n```"}]}
{"dataset": "code_high", "id": "code_high_479", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string, write a Python program to find the first non-repeating character in it.\n\n### Input:\ninput_str = \"aaaaabbbbccc\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef first_non_repeating_char(input_str): \n \n    char_count = {}\n \n    for ch in input_str: \n \n        if ch in char_count: \n \n            char_count[ch] += 1\n \n        else: \n \n            char_count[ch] = 1\n \n    for ch in input_str: \n \n        if char_count[ch] == 1: \n            return ch \n \n    return None\nprint(first_non_repeating_char(input_str))\n```"}]}
{"dataset": "code_high", "id": "code_high_480", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function which prints all the permutations of a given list of numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutations(nums):\n    if len(nums) == 1:\n        return [nums]\n    res = []\n    for i in range(len(nums)):\n        for p in permutations(nums[:i] + nums[i+1:]):\n            res.append([nums[i]] + p)\n    return res\nif __name__ == '__main__':\n    nums = [1, 2, 3]\n    print(permutations(nums)) # [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n```"}]}
{"dataset": "code_high", "id": "code_high_481", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple calculator program in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef add(num1, num2): \n  return num1 + num2 \ndef subtract(num1, num2): \n  return num1 - num2 \ndef multiply(num1, num2): \n  return num1 * num2 \ndef divide(num1, num2): \n  return num1 / num2 \n# Infinite loop until user chooses to exit \nwhile True: \n    print(\"Select operation:\") \n    print(\"1. Add\") \n    print(\"2. Subtract\") \n    print(\"3. Multiply\") \n    print(\"4. Divide\")\n    print(\"5. Exit\") \n    choice = input(\"Enter choice (1/2/3/4):\") \n  \n    # Check if choice is one of the four options \n    if choice in ('1', '2', '3', '4', '5'): \n        num1 = float(input(\"Enter first number: \")) \n        num2 = float(input(\"Enter second number: \")) \n  \n        if choice == '1': \n            print(num1, \"+\", num2, \"=\", add(num1, num2)) \n        elif choice == '2': \n            print(num1, \"-\", num2, \"=\", subtract(num1, num2)) \n  \n        elif choice == '3': \n            print(num1, \"*\", num2, \"=\", multiply(num1, num2)) \n        elif choice == '4': \n            print(num1, \"/\", num2, \"=\", divide(num1, num2))\n        elif choice == '5':\n            break\n        else: \n            print(\"Invalid Input\") \n    else: \n        print(\"Invalid Input\")\n```"}]}
{"dataset": "code_high", "id": "code_high_482", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement the Quick Sort algorithm with a list of numbers.\n\n### Input:\n[2, 5, 4, 1, 6, 2, 9, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr)//2]\n    left, right, equal = [], [], []\n    for x in arr:\n        if x < pivot:\n            left.append(x)\n        elif x > pivot:\n            right.append(x)\n        else:\n            equal.append(x)\n    return quicksort(left) + equal + quicksort(right)\n```"}]}
{"dataset": "code_high", "id": "code_high_483", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string, write code to remove all the consecutive characters and output the new string.\n\n### Input:\nstring='AAABBBCCC'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_consecutive_chars(string):\n  # create an empty string\n  new_string = ''\n  # iterate over the characters of the given string\n  for i in range(len(string)-1):\n    if string[i] != string[i+1]:\n      new_string += string[i]\n  \n  # add the last character of the string to the output\n  new_string += string[-1]\n  # return the new string\n  return new_string\nstring='AAABBBCCC'\nresult = remove_consecutive_chars(string)\nprint(\"The new string is:\", result)\n```"}]}
{"dataset": "code_high", "id": "code_high_484", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a TensorFlow 2.0 program that takes a 3D array and normalizes the values by dividing each element by the sum of all elements in the array.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport numpy as np \nimport tensorflow as tf\n# Function to normalize a 3D array  \n# by dividing each element by the sum of all elements \ndef normalize3d(arr): \n   \n    # Shape of the array \n    m, n, o = arr.shape\n   \n    # Calculating sum \n    sum_ = np.sum(arr) \n      \n    # Initializing the output array \n    output = np.empty_like(arr) \n      \n    # calculating the normalized value \n    # and storing in output array \n    for i in range(m): \n        for j in range(n): \n            for k in range(o): \n                    output[i][j][k] = arr[i][j][k]/sum_ \n                      \n    # returning the normalized array \n    return output \n# Initializing the array\narr = np.random.randint(1, 10, (2, 2, 4))\n# Using tensorflow method\noutput = tf.expand_dims(tf.constant(arr, dtype=tf.float32), axis=-1) / tf.math.reduce_sum(tf.constant(arr))\n# Printing the normalized array using both methods\nprint(normalize3d(arr))\nprint(output)\n```"}]}
{"dataset": "code_high", "id": "code_high_485", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to simulate a random walk in two-dimensional space.\n\n### Input:\nx_steps = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Program to simulate a random walk in two-dimensional space\nimport random\nx_steps = 10\n# Initialize starting positions\nx = 0\ny = 0\n# Take a random step on each iteration\nfor _ in range(x_steps):\n  direction = random.randint(0, 3)\n  if direction == 0:\n    x += 1\n  elif direction == 1:\n    x -= 1\n  elif direction == 2:\n    y += 1\n  else:\n    y -= 1\n  \nprint(f'Final position is ({x},{y})')\n```"}]}
{"dataset": "code_high", "id": "code_high_486", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes two strings and determines if the first string is one character away from the second string.\n\n### Input:\nString 1 = \"cat\", String 2 = \"cot\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef oneAway(str1, str2): \n    len1 = len(str1) \n    len2 = len(str2) \n    if abs(len1 - len2) > 1: \n        return False\n    i = 0\n    j = 0 \n    count = 0 \n    while i < len1 and j < len2: \n        if str1[i] != str2[j]: \n            if count == 1: \n                return False\n            count = 1\n            if len1 > len2: \n                i += 1\n            elif len1 < len2: \n                j += 1 \n            else: \n                i +=1\n                j += 1 \n        else: \n            i += 1\n            j += 1\n    if i < len1 or j < len2: \n        count += 1 \n    return count == 1\n```"}]}
{"dataset": "code_high", "id": "code_high_487", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given some HTML code, write a function to strip the tags from it.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef strip_tags(string):\n    stripped_str = ''\n    skip = False\n    for i in range(len(string)):\n        if string[i] == '<' and skip == False:\n            skip = True\n        elif string[i] == '>':\n            skip = False\n        elif skip == False:\n            stripped_str += string[i]\n    return stripped_str\n```"}]}
{"dataset": "code_high", "id": "code_high_488", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a program to calculate the combination of n elements taken k at a time.\n\n### Input:\nn = 8\nk = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef combinations(n, k):\n    if k == 0 or k > n:\n        return []\n    result = []\n    def dfs(start,n,k):\n        if k == 0:\n            result.append(temp[:])\n            return \n        for i in range(start, n):\n            temp.append(i)\n            dfs(i+1, n, k-1)\n            temp.pop()\n            \n    temp = []\n    dfs(0, n, k)\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_489", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a postfix expression to an infix expression\n\n### Input:\n3 4 + 5 *\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef postfix_to_infix(expression):\n    stack = []\n    for c in expression.split():\n        if c in \"+-*/\":\n            operand1 = stack.pop()\n            operand2 = stack.pop()\n            stack.append(\"({} {} {})\".format(operand2, c, operand1))\n        else:\n            stack.append(c)\n    return stack[0]\nif __name__ == '__main__':\n    expression = '3 4 + 5 *'\n    print(postfix_to_infix(expression))\n```"}]}
{"dataset": "code_high", "id": "code_high_490", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to find the first prime number after the given number.\n\n### Input:\nnum = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_next_prime(num):\n    # check for all the numbers starting from num\n    for number in range(num+1, num + 1000):\n        # iterate from 2 to number\n        for factor in range(2, number):\n            # check if the number is prime\n            if number % factor == 0:\n                break\n        else:\n            # return the first prime\n            return number\nif __name__ == \"__main__\":\n    print(find_next_prime(5)) # prints 7\n```"}]}
{"dataset": "code_high", "id": "code_high_491", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to check if a number is a power of 2.\n\n### Input:\nnum = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef isPowerOfTwo(num): \n    if (num == 0): \n        return False\n  \n    while (num != 1): \n        if (num % 2 != 0): \n            return False\n        num = num // 2\n              \n    return True\n  \n# Driver code \nif __name__=='__main__':\n    num = 8\n    if(isPowerOfTwo(num)): \n        print('Yes') \n    else: \n        print('No')\n```"}]}
{"dataset": "code_high", "id": "code_high_492", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following array of dictionaries, write a function in Python to find and return the longest common prefix in the keys of dictionaries.\n\n### Input:\narr_of_dictionaries = [\n    {\n        \"name\": \"John Doe\",\n        \"country\": \"United States\"\n    },\n    {\n        \"name\": \"Jane Doe\",\n        \"state\": \"New York\"\n    }\n]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_common_prefix(arr_of_dictionaries):\n    prefix = ''\n    if len(arr_of_dictionaries) == 0:\n        return prefix\n    first_dict_keys = arr_of_dictionaries[0].keys()\n    for i in range(len(list(first_dict_keys)[0])):\n        char = list(first_dict_keys)[0][i]\n        for dict in arr_of_dictionaries:\n            if list(dict.keys())[0][i] != char:\n                return prefix\n        prefix += char\n    return prefix\n```"}]}
{"dataset": "code_high", "id": "code_high_493", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompose a code to find the mean and median of a given list\n\n### Input:\n[1, 6, 4, 9, 5, 8, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_mean_median(nums):\n    num_count = len(nums) \n    num_sum = 0.0\n    for num in nums: \n        num_sum += num\n  \n    mean = num_sum / num_count \n  \n    nums.sort() \n    if num_count % 2 == 0: \n        median1 = nums[num_count//2] \n        median2 = nums[num_count//2 - 1] \n        median = (median1 + median2)/2\n    else: \n        median = nums[num_count//2] \n  \n    return mean, median\n```"}]}
{"dataset": "code_high", "id": "code_high_494", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a basic encryption function using Caesar Cipher.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef caesar_encrypt(plaintext, key): \n    ciphertext = \"\" \n    for char in plaintext: \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + key-65) % 26 + 65) \n        else: \n            ciphertext += chr((ord(char) + key - 97) % 26 + 97)\n    return ciphertext\n```"}]}
{"dataset": "code_high", "id": "code_high_495", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm in Python that converts a given number from base 10 to binary.\n\n### Input:\n8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef base10_to_binary(n):\n    # Create an empty binary array\n    binary_arr = [0] * (int(math.log2(n)) + 1) \n  \n    # Iterate through binary array\n    for i in range(len(binary_arr) - 1, -1, -1): \n        if n >= pow(2, i): \n            n -= pow(2, i) \n            binary_arr[len(binary_arr) - i - 1] = 1\n  \n    return binary_arr \n  \n# Driver Code \nn = 8\nprint(base10_to_binary(n)) # [1, 0, 0, 0]\n```"}]}
{"dataset": "code_high", "id": "code_high_496", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the previous program to also print the sum of the subarray elements\n\n### Input:\narr = [1, 4, 6, 8, -5, 7], k = 11\n\n### Response:"}, {"role": "assistant", "content": "```python\nmax_sum = 0 \nstart = 0 \nend = 0\n# Loop through each element of the array\nfor i in range(len(arr)): \n    sum = 0\n  \n    # Find maximum sum subarray\n    for j in range(i, len(arr)): \n        sum += arr[j] \n        if (sum > max_sum and sum <= k): \n            max_sum = sum \n            start = i \n            end = j \n  \n# Print maximum subarray and its sum\nprint(\"Maximum sum subarray with sum <=\", k, \"is\") \nprint(\"[\", end=\"\") \nfor i in range(start, end+1): \n    print(arr[i], end=\", \") \nprint(\"]\")\nprint(\"Sum of the subarray elements:\", max_sum)\n```"}]}
{"dataset": "code_high", "id": "code_high_497", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm to order a given array.\n\n### Input:\n[ 2 , 8 , 3 , 10 , 16 ]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_array(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]  # swap\n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_498", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the following input, suggest a python code for computing the Fibonacci number for n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    a = 0\n    b = 1\n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return a \n    elif n==1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n    return b\n```"}]}
{"dataset": "code_high", "id": "code_high_499", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a binary search algorithm in Python for searching for a specific element in a given list of numbers.\n\n### Input:\nlist = [1, 3, 5, 7, 9, 11 ] and target number =7\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(lst, target):\n    \"\"\"\n    Implements a binary search algorithm \n    in Python for searching for a specific \n    element in the given list of numbers.\n    \"\"\"\n    low = 0\n    high = len(lst)-1\n    while low <= high:\n        mid = (low + high)//2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_500", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to find the nth element of a Fibonacci sequence.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_501", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the following code to implement a binary search.\n\n### Input:\ndef binary_search(arr, x):\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(arr, x):\n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_502", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm to apply merge sort to an array of integers.\n\n### Input:\n[1, 10, 2, 5, 8, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Python program for Merge Sort\n# Merges two subarrays of arr[]. \n# First subarray is arr[l..m] \n# Second subarray is arr[m+1..r] \ndef merge(arr, l, m, r): \n\tn1 = m - l + 1\n\tn2 = r- m \n# create temp arrays \n\tL = [0] * (n1) \n\tR = [0] * (n2) \n# Copy data to temp arrays L[] and R[] \n\tfor i in range(0 , n1): \n\t\tL[i] = arr[l + i] \n\tfor j in range(0 , n2): \n\t\tR[j] = arr[m + 1 + j] \n# Merge the temp arrays back into arr[l..r] \n\ti = 0\t # Initial index of first subarray \n\tj = 0\t # Initial index of second subarray \n\tk = l\t # Initial index of merged subarray \n\twhile i < n1 and j < n2 : \n\t\tif L[i] <= R[j]: \n\t\t\tarr[k] = L[i] \n\t\t\ti += 1\n\t\telse: \n\t\t\tarr[k] = R[j] \n\t\t\tj += 1\n\t\tk += 1\n# Copy the remaining elements of L[], if there \n# are any \n\twhile i < n1: \n\t\tarr[k] = L[i] \n\t\ti += 1\n\t\tk += 1\n# Copy the remaining elements of R[], if there \n# are any \n\twhile j < n2: \n\t\tarr[k] = R[j] \n\t\tj += 1\n\t\tk += 1\n# l is for left index and r is right index of the \n# sub-array of arr to be sorted \ndef mergeSort(arr,l,r): \n\tif l < r: \n\t\t\n\t\t# Same as (l+r)//2, but avoids overflow for \n\t\t# large l and h \n\t\tm = (l+(r-1))//2\n\t\t\n\t\t# Sort first and second halves \n\t\tmergeSort(arr, l, m) \n\t\tmergeSort(arr, m+1, r) \n\t\tmerge(arr, l, m, r) \n# Driver code to test above \narr = [1, 10, 2, 5, 8, 7] \nn = len(arr) \nprint (\"Given array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]), \nmergeSort(arr,0,n-1) \nprint (\"\\n\\nSorted array is\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]), \n# This code is contributed by Shreyanshi Arun\n```"}]}
{"dataset": "code_high", "id": "code_high_503", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program in python that sorts a given list.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(arr):\n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\n```"}]}
{"dataset": "code_high", "id": "code_high_504", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script to check if a given number is a palindrome or not.\n\n### Input:\ninputNumber = 121\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Function to check whether the inputNumber is palindrome or not\ndef is_palindrome(inputNumber):\n   # negative numbers are not palindrome\n   if inputNumber < 0:\n       return False\n   # find the number of digits in the inputNumber\n   div = 1\n   while (inputNumber / div >= 10):\n       div *= 10\n   # check if the most significant and least significant digits match\n   while (inputNumber != 0):\n       # compare first and last digits\n       firstdigit = inputNumber // div\n       lastdigit =  inputNumber % 10\n       if firstdigit != lastdigit:\n           return False\n       # remove the most and least significant digit of inputNumber\n       inputNumber = (inputNumber % div) // 10\n       # reduce div by a factor of 2,  since 2 digits\n       # were removed\n       div = div // 100\n   return True\n# Driver code to test above\ninputNumber = 121\nif is_palindrome(inputNumber) :\n  print(\"Yes\")\nelse:\n  print(\"No\")\n```"}]}
{"dataset": "code_high", "id": "code_high_505", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, find the maximum difference between two elements in the array such that the larger element appears after the smaller element in the array.\n\n### Input:\n[5, 2, 4, 7, 15]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef maxDifference(arr):\n  # Initialize max difference\n  max_difference = 0\n  # Traverse the array\n  for i in range(len(arr) - 1):\n    for j in range(i + 1, len(arr)):\n      # Find the difference between two elements\n      diff = arr[j] - arr[i]\n      # Check if the difference is the maximum\n      if diff > max_difference:\n        max_difference = diff\n  return max_difference\n# Output\nmaxDifference([5, 2, 4, 7, 15]) # 13\n```"}]}
{"dataset": "code_high", "id": "code_high_506", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind all substring of a string.\n\n### Input:\nString: \"abcdefg\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n# function to find all the substrings of a given string  \ndef substr(string):  \n    length = len(string) \n  \n    # Weighted Index of the string  \n    w_index = 0\n      \n    list_substr = [] \n  \n    # Run a loop from 0 to n-1 \n    while w_index < length: \n  \n        # Run inner loop from w_index + 1 to n  \n        s_index = w_index + 1\n        while s_index < length + 1: \n            list_substr.append(string[w_index:s_index])\n            s_index += 1\n          \n        w_index += 1\n          \n    return list_substr\n# Test program \ns = \"abcdefg\"\nprint(substr(s)) \n# Output\n# ['a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef', 'abcdefg', 'b', 'bc', 'bcd', 'bcde', 'bcdef', 'bcdefg', 'c', 'cd', 'cde', 'cdef', 'cdefg', 'd', 'de', 'def', 'defg', 'e', 'ef', 'efg', 'f', 'fg', 'g']\n```"}]}
{"dataset": "code_high", "id": "code_high_507", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings s1 and s2, write a program to edit s1 to s2 by removing, inserting or replacing one character in s1.\n\n### Input:\ns1 = \u201ccat\u201d\ns2 = \u201chat\u201d\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef edit_strings(s1, s2):\n    s1_arr = list(s1)\n    s2_arr = list(s2)\n    i = 0\n    while i < len(s1):\n        if s1[i] == s2[i]:\n            i += 1\n        else:\n            # remove character\n            del s1_arr[i]\n            if s1_arr == s2_arr:\n                return 'removal'\n            # insert character\n            s1_arr.insert(i, s2[i])\n            if s1_arr == s2_arr:\n                return 'insertion'\n            # replace character\n            s1_arr[i] = s2[i]\n            if s1_arr == s2_arr:\n                return 'replacement'\n            break\n    return None\n```"}]}
{"dataset": "code_high", "id": "code_high_508", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct an algorithm to solve this coding problem\n\n### Input:\nGiven two sorted linked lists, print a list with all the integers of the two lists as a single sorted list.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_sorted_list(list1, list2): \n    result = [] \n    while list1 and list2: \n        if list1.value > list2.value: \n            result.append(list2.value) \n            list2 = list2.next \n        else: \n            result.append(list1.value) \n            list1 = list1.next \n    if list1: \n        result.extend(list1) \n    if list2: \n        result.extend(list2) \n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_509", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a Bubble Sort algorithm.\n\n### Input:\nlist = [10, 5, 9, 25, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(list): \n    n = len(list) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if list[j] > list[j+1] : \n                list[j], list[j+1] = list[j+1], list[j] \n  \n# Driver code to test above \nlist = [10, 5, 9, 25, 1]\nbubbleSort(list) \nprint (\"Sorted array :\") \nprint(list)\n```"}]}
{"dataset": "code_high", "id": "code_high_510", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to get the value of pi (to 6 decimal places) using mathematical methods.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCalculate the value of pi using mathematical methods\n\"\"\"\ndef calculate_pi():\n    pi = 0  \n    n = 1000\n    for n in range(n):\n        pi += ((-1)**n)/(2*n+1)\n    pi = pi*4\n    return round(pi, 6)\nif __name__ == '__main__':\n    print(calculate_pi())\n# Output\n# 3.141593\n```"}]}
{"dataset": "code_high", "id": "code_high_511", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the length of the longest common subsequence in the following two strings: \"ABCBDAB\" and \"BDCABA\".\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_common_subsequence(str1, str2):\n  n = len(str1)\n  m = len(str2)\n  \n  dp = [[0] * (m+1) for _ in range(n+1)]\n  for i in range(1, n+1):\n    for j in range(1, m+1):\n      if str1[i-1] == str2[j-1]:\n        dp[i][j] = 1 + dp[i-1][j-1]\n      else:\n        dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n  \n  return dp[n][m]\n```"}]}
{"dataset": "code_high", "id": "code_high_512", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes a string and returns the letter which appears most frequently.\n\n### Input:\ns = \"apple\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_frequent_letter(s):\n    # get the letter frequency\n    letter_frequency = {}\n    for ch in s:\n        if ch in letter_frequency:\n            letter_frequency[ch] += 1\n        else:\n            letter_frequency[ch] = 1\n    # find the letter with the max frequency\n    max_frequency = 0\n    max_frequency_letter = ''\n    for letter, frequency in letter_frequency.items():\n        if frequency > max_frequency:\n            max_frequency = frequency\n            max_frequency_letter = letter\n    return max_frequency_letter\nprint(most_frequent_letter(\"apple\")) # 'p'\n```"}]}
{"dataset": "code_high", "id": "code_high_513", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to calculate median of array elements\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_median(arr):\n    sorted_arr = sorted(arr)\n    length = len(sorted_arr)\n    if length % 2 == 0:\n        median1 = sorted_arr[int(length/2) - 1]\n        median2 = sorted_arr[int(length/2)]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_arr[int((length-1)/2)]\n    return median\n```"}]}
{"dataset": "code_high", "id": "code_high_514", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string, rearrange the characters in the string such that no two consecutive characters are the same.\n\n### Input:\nmy_str = \"ababab\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef rearrange_string(my_str):\n    arr = list(my_str)\n    i, j = 0, 1\n    while i < len(arr):\n        if i+1 < len(arr) and arr[i] == arr[i+1]:\n            while j < len(arr):\n                if arr[j] != arr[i]:\n                    arr[i+1], arr[j] = arr[j], arr[i+1]\n                    break\n                j += 1\n        i += 1\n    return \"\".join(arr)\n```"}]}
{"dataset": "code_high", "id": "code_high_515", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a better algorithm for finding a prime number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(n): \n    \"\"\" \n    A better algorithm for determining if a number is prime \n    :param n: The number to determine whether is prime \n    :return: a boolean if the number is prime\n    \"\"\"\n    if (n <= 1): \n        return False\n    if (n <= 3): \n        return True\n    if (n % 2 == 0 or n % 3 == 0): \n        return False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_516", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the following list using a bubble sort algorithm.\n\n### Input:\n[36, 71, 16, 21, 73]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Bubble sort function\ndef bubble_sort(my_list):\n    # Do n times\n    for i in range(0, len(my_list) - 1):\n        # Do n - i - 1 times\n        for j in range(0, len(my_list) - 1 - i):\n            if my_list[j] > my_list[j+1]:\n                my_list[j], my_list[j+1] = my_list[j+1], my_list[j]\n    return my_list\n# Test data\nmy_list = [36, 71, 16, 21, 73]\n# Call the function\nsorted_list = bubble_sort(my_list)\nprint(sorted_list) # prints [16, 21, 36, 71, 73]\n```"}]}
{"dataset": "code_high", "id": "code_high_517", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to check if the parentheses in given expression are balanced or not.\n\n### Input:\nexpression = \"((A+B)-C)*D+((E-F)*G\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_balanced(expression):\n\topen_paratheses = 0\n\tfor char in expression:\n\t\tif char == '(':\n\t\t\topen_paratheses += 1\n\t\telif char == ')':\n\t\t\topen_paratheses -= 1\n\t\tif open_paratheses < 0:\n\t\t\treturn False\n\treturn open_paratheses == 0\nexpression = \"((A+B)-C)*D+((E-F)*G\"\n```"}]}
{"dataset": "code_high", "id": "code_high_518", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code for sorting the given array of numbers in ascending order.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_array(numbers):\n    # Bubble sort algorithm \n    for i in range(len(numbers)): \n      for j in range(0, len(numbers)-i-1): \n        if numbers[j] > numbers[j+1]: \n          numbers[j], numbers[j+1] = numbers[j+1], numbers[j] \n    return numbers\n```"}]}
{"dataset": "code_high", "id": "code_high_519", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a text-based game in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nprint(\"Welcome to the Text-Based Adventure Game!\") \n    \nplayer_name = input(\"What is your name? \") \n    \nprint(\"Hello \" + player_name + \", let's begin!\") \n    \nprint(\"You are walking through a dark forest, it is very quiet and there is a strange feeling of unease\") \nwhile True: \n    print(\"What do you want to do? (Enter 'help' for a list of commands)\") \n    player_action = input() \n    if player_action == 'help': \n        print(\"Here are the commands you can use: move, search, look, take, inventory\") \n    elif player_action == 'move': \n        print(\"Which direction do you want to move? Enter 'north', 'south', 'east' or 'west'\") \n    elif player_action == 'search':\n        print(\"You search the area and find a mysterious-looking object\") \n    elif player_action == 'look': \n        print(\"You look around and see nothing special\") \n    elif player_action == 'take': \n        print(\"You take the item and add it to your inventory\") \n    elif player_action == 'inventory': \n        print(\"You check your inventory and see the mysterious-looking object\") \n    else: \n        print(\"That command does not exist. Please enter 'help' for a list of commands\")\n```"}]}
{"dataset": "code_high", "id": "code_high_520", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python function to return an array of adjacent (horizontal and vertical) numbers of a given two-dimensional array.\n\n### Input:\n[[1, 2, 3],\n[4, 5, 6],\n[7, 8, 9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef adjacent_numbers(array):\n    # Create a set of all possible adjacent numbers\n    # and add each array element to the set\n    adjacent_set = set()\n    for sublist in array:\n        for element in sublist:\n            adjacent_set.add(element)\n \n    # Iterate over each array element and its neighbours\n    for i in range(len(array)):\n        for j in range(len(array[0])):\n            # Check if the neighbour (left, right, top, bottom) exists\n            if i+1 < len(array):\n                adjacent_set.add(array[i+1][j])\n            if i-1 >= 0:\n                adjacent_set.add(array[i-1][j])\n            if j+1 < len(array[0]):\n                adjacent_set.add(array[i][j+1])\n            if j-1 >= 0:\n                adjacent_set.add(array[i][j-1])\n \n    # Remove the original elements from the set\n    for elem in array:\n        for a in elem:\n            adjacent_set.remove(a)\n \n    return list(adjacent_set)\n```"}]}
{"dataset": "code_high", "id": "code_high_521", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following code to generate the Fibonacci sequence up to the nth term\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_522", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to remove the elements that occur only once from a given array.\n\n### Input:\n[1, 2, 2, 3, 3, 3, 4, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef remove_once(arr): \n    freq_table  = {} \n    for num in arr: \n        if num in freq_table.keys(): \n            freq_table[num] += 1\n        else: \n            freq_table[num] = 1\n    filtered_array = [] \n    for num, freq in freq_table.items(): \n        if freq > 1: \n            filtered_array.append(num) \n    return filtered_array\nremove_once([1, 2, 2, 3, 3, 3, 4, 4])\n#Output: [2, 3, 4]\n```"}]}
{"dataset": "code_high", "id": "code_high_523", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGive an example of the binary search algorithm\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(arr, target): \n    low = 0\n    high = len(arr) - 1\n  \n    while low <= high: \n  \n        mid = (low+high) // 2\n  \n        # Check if target is present at mid \n        if arr[mid] == target: \n            return mid \n  \n        # If target is greater than mid, ignore left half \n        elif arr[mid] < target: \n            low = mid + 1\n  \n        # If target is smaller than mid, ignore right half \n        else: \n            high = mid - 1\n  \n    # If we reach here, then the element was not present \n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_524", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit this code to make the function take an integer n as an argument and print the fibonacci series till nth term.\n\n### Input:\nn = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n):\n    \"\"\"Prints the fibonacci series till the nth term\"\"\"\n    # set initial values\n    a = 0\n    b = 1\n    # check for valid input\n    if n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        print('0')\n    elif n == 1:\n        print('0, 1')\n    else:\n        # print first two terms\n        print('0, 1', end=', ')\n        for i in range(2,n):\n            c = a + b\n            print(c, end=', ')\n            # update values\n            a = b\n            b = c\nn = 10\nfibonacci(n) # 0, 1, 1, 2, 3, 5, 8, 13, 21, 34\n```"}]}
{"dataset": "code_high", "id": "code_high_525", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes in a positive integer up to 1000 and prints out its prime factorization.\n\n### Input:\nnum = 17\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_factorization(num):\n    '''This function takes in a positive integer and prints out its prime factorization.'''\n    factors = []\n    dividend = num\n    divisor = 2\n    while divisor <= dividend:\n        if dividend % divisor == 0:\n            factors.append(divisor)\n            dividend //= divisor\n        else:\n            divisor += 1\n    return factors\n```"}]}
{"dataset": "code_high", "id": "code_high_526", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class for representing a triangle with its 3 sides\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Triangle:\n    def __init__(self, side1, side2, side3):\n        self.side1 = side1\n        self.side2 = side2\n        self.side3 = side3\n    def area(self):\n        semi = (self.side1 + self.side2 + self.side3) / 2.0\n        return (semi*(semi-self.side1)*(semi-self.side2)*(semi-self.side3)) ** 0.5\n```"}]}
{"dataset": "code_high", "id": "code_high_527", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a solution to print the prime factorization of a number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_factors(num):\n    factors = []\n    i = 2\n    while num > 1:\n        if num % i == 0:\n            factors.append(i)\n            num = num // i\n        else:\n            i += 1\n    return factors\n```"}]}
{"dataset": "code_high", "id": "code_high_528", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nNeed to write a function to encrypt a message using the caesar cipher, which takes the key as an argument.\n\n### Input:\nmessage = \"Hello World\"\nkey = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef encrypt_caesar_cipher(message, key):\n    encrypted_message = \"\"\n    for char in message: \n        if not char.isalpha():\n            encrypted_message += char\n        else:\n            encrypted_char = chr((ord(char) + key - 97) % 26 + 97)\n            encrypted_message += encrypted_char\n    return encrypted_message\nprint(encrypt_caesar_cipher(message, key))\n```"}]}
{"dataset": "code_high", "id": "code_high_529", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFor a given array of numbers, find the length of the longest increasing subsequence\n\n### Input:\n[1, 5, 4, 3, 8, 10, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_increasing_subsequence(arr):\n    n = len(arr)\n    lis = [1] * n \n  \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n  \n    maximum = 0\n    for i in range(n): \n        maximum = max(maximum , lis[i]) \n  \n    return maximum\n```"}]}
{"dataset": "code_high", "id": "code_high_530", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a web scraper using Python\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\nfrom bs4 import BeautifulSoup\n \n# Function to scrape for the specified HTML elements\ndef scrape(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    # Use the .find, .find_all, .select and .select_one methods to scrape website\n    titles = soup.find_all(\"title\")\n    content = soup.find_all(\"p\")\n    headings = soup.find_all(\"h1\")\n    links = soup.find_all(\"a\")\n \n    # Extract text from each element and store in variables\n    title = titles[0].text\n    content_p = [p.text for p in content]\n    headings_h1 = [h1.text for h1 in headings]\n    link_urls = [a.get(\"href\") for a in links]\n \n    # Print out each element\n    print(title)\n    print(\"\\n\")\n    print(\"Content paragraphs:\")\n    for paragraph in content_p:\n        print(paragraph)\n    print(\"\\n\")\n    print(\"Headings:\")\n    for heading in headings_h1:\n        print(heading)\n    print(\"\\n\")\n    print(\"Links and URLs:\")\n    for link in link_urls:\n        print(link)\n# Scrape the website below\nscrape('https://en.wikipedia.org/wiki/Python_(programming_language)')\n```"}]}
{"dataset": "code_high", "id": "code_high_531", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that returns the longest substring of the string given.\n\n### Input:\nstring = \"Hello world!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_substring(string):\n    curr_len = 1\n    max_len = 1\n    prev_index = 0\n    n = len(string)\n    visited = [-1] * 256\n    visited[ord(string[0])] = 0\n    for i in range(1,n):\n        prev_index = visited[ord(string[i])]\n        if prev_index == -1 or (i - curr_len > prev_index):\n            curr_len+=1\n        else:\n            if curr_len > max_len:\n                max_len = curr_len\n            curr_len = i - prev_index\n        visited[ord(string[i])] = i\n    if curr_len > max_len:\n        max_len = curr_len\n    return max_len\n```"}]}
{"dataset": "code_high", "id": "code_high_532", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of words, write a Python program to find all pairs of distinct indices (i, j) in the given list, so that the concatenation of the two words, i.e. words[i] + words[j] is a palindrome.\n\n### Input:\nwords = [\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_palindrome_pairs(words): \n    res = [] \n    for i in range(len(words)): \n  \n        for j in range(len(words)): \n            if i != j: \n                word = words[i] + words[j] \n                if word == word[::-1]: \n                    res.append((i, j)) \n    return res \nprint(find_palindrome_pairs(words))\n```"}]}
{"dataset": "code_high", "id": "code_high_533", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to generate a list of all prime numbers in a given range.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_nums(n): \n    prime_list = [] \n    for i in range(2, n + 1): \n        for j in range(2,i): \n            if (i % j) == 0: \n                break\n        else: \n            prime_list.append(i)\n    return prime_list\n```"}]}
{"dataset": "code_high", "id": "code_high_534", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that finds all the prime numbers from 1 to n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef find_primes(n):\n    primes = []\n    for i in range(2, n+1):\n        if is_prime(i):\n            primes.append(i)\n    return primes\nfind_primes(10) # Returns [2, 3, 5, 7]\n```"}]}
{"dataset": "code_high", "id": "code_high_535", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following given program to print all prime number between 1 and n\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef check_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef print_prime_numbers(n):\n    for num in range(1, n + 1):\n        if check_prime(num):\n            print(num)\n```"}]}
{"dataset": "code_high", "id": "code_high_536", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that takes the input of two strings, and returns the longest common substring in them.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nA code that takes the input of two strings, and returns the longest common substring in them\n\"\"\"\ndef longest_common_substring(s1, s2):\n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))]\n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)):\n        for y in range(1, 1 + len(s2)):\n            if s1[x - 1] == s2[y - 1]:\n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else:\n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\nif __name__ == '__main__': \n    s1 = \"Hello World\"\n    s2 = \"Hey World\"\n    print(\"The longest common substring is: %s\" % longest_common_substring(s1, s2))\n```"}]}
{"dataset": "code_high", "id": "code_high_537", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a list of integers in ascending order using selection sort.\n\n### Input:\n[ 9, 5, 2, 0, 7, 4, 1, 8, 6, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef selection_sort(list): \n    for i in range(len(list)): \n  \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j\n        list[i], list[min_idx] = list[min_idx], list[i]\nlist = [9, 5, 2, 0, 7, 4, 1, 8, 6, 3]\nselection_sort(list) \nprint (\"Sorted array:\", list)\n```"}]}
{"dataset": "code_high", "id": "code_high_538", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of integers, write a program to check if there exist any pairs of numbers that sum to a given number.\n\n### Input:\nv = [2, 3, 4, 9], sum = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef findSumPairs(v, sum):  \n    v.sort()\n    l = 0\n    r = len(v) - 1\n    while l < r: \n        if v[l] + v[r] == sum:\n            return True\n        elif v[l] + v[r] > sum:\n            r -= 1\n        else:\n            l += 1\n    return False\n  \nv = [2, 3, 4, 9]\nsum = 8\nprint(findSumPairs(v, sum))\n```"}]}
{"dataset": "code_high", "id": "code_high_539", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a version of your own version of quicksort in Python\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[0]\n    left = []\n    right = []\n    for num in arr[1:]:\n        if num < pivot:\n            left.append(num)\n        else:\n            right.append(num)\n    return quicksort(left) + [pivot] + quicksort(right)\nif __name__ == '__main__':\n    arr = [7, 3, 1, 9, 0]\n    print(quicksort(arr))\n```"}]}
{"dataset": "code_high", "id": "code_high_540", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to find the longest substring with no repeating characters in a given string.\n\n### Input:\n\"abcabcbb\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_no_repeat(s):\n    max_length = 0\n    length = 0\n    seen = dict() \n    \n    for i in range(len(s)):\n        if s[i] not in seen:\n            length += 1\n            seen[s[i]] = i \n        else:\n            if length > max_length:\n                max_length = length\n            length = i - seen[s[i]]\n            for j in seen:\n                if seen[j] < seen[s[i]]:\n                    del seen[j]\n            seen[s[i]] = i\n  \n    if length > max_length:\n        max_length = length\n  \n    return max_length\nif __name__ == '__main__':\n    s = \"abcabcbb\"\n    print(longest_no_repeat(s))\n```"}]}
{"dataset": "code_high", "id": "code_high_541", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, write a program to find the longest consecutive sequence.\n\n### Input:\n[1, 9, 3, 10, 4, 20, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_consecutive(numbers):\n    longest_sequence = 0\n    numbers_set = set(numbers)\n \n    for num in numbers:\n        if num - 1 not in numbers_set:\n            current_number = num\n            current_sequence = 1\n \n            while current_number + 1 in numbers_set:\n                current_sequence += 1\n                current_number += 1\n \n            longest_sequence = max(longest_sequence, current_sequence)\n \n    return longest_sequence\n```"}]}
{"dataset": "code_high", "id": "code_high_542", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a 2D array, print out all the elements in a spiral order.\n\n### Input:\n[\n    [1,  2,  3,  4,  5],\n    [6,  7,  8,  9,  10],\n    [11, 12, 13, 14, 15],\n    [16, 17, 18, 19, 20],\n]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_in_spiral_order(arr):\n    row_start = 0\n    row_stop = len(arr) - 1\n    col_start = 0 \n    col_stop = len(arr[0]) - 1\n    while row_start <= row_stop and col_start <= col_stop:\n        for i in range(col_start, col_stop + 1):\n            print(arr[row_start][i], end=' ')\n        row_start += 1\n        for i in range(row_start, row_stop + 1):\n            print(arr[i][col_stop], end=' ')\n        col_stop -= 1\n        if row_start <= row_stop:\n            for i in range(col_stop, col_start - 1, -1):\n                print(arr[row_stop][i], end=' ')\n        row_stop -= 1\n        if col_start <= col_stop:\n            for i in range(row_stop, row_start - 1, -1):\n                print(arr[i][col_start], end=' ')\n        col_start += 1\n```"}]}
{"dataset": "code_high", "id": "code_high_543", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to take two input strings and return the longest common substring.\n\n### Input:\nInput 1: ababcd\nInput 2: abxyz\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_common_substring(str1, str2):\n    # keep track of the longest substring\n    longest_substring = \"\"\n    \n    # iterate over each character in the first string\n    for i in range(len(str1)):\n        # iterate over each sub sequence of the first string\n        for j in range(i+1, len(str1)+1):\n            # compare the substring to each substring in the second string\n            for k in range(len(str2)-(j-i)+1):\n                # update longest_substring if we have a longer common substring\n                if str1[i:j] == str2[k:k+(j-i)] and len(str1[i:j]) > len(longest_substring):\n                    longest_substring = str1[i:j]\n    return longest_substring\n```"}]}
{"dataset": "code_high", "id": "code_high_544", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to call a web API\n\n### Input:\nCall openweathermap.org's API with a given city name.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests \n  \napi_key = \"YOURAPIKEY\"\n  \n# base_url variable to store url \nbase_url = \"http://api.openweathermap.org/data/2.5/weather?\"\n  \n# Give city name \ncity_name = input(\"Enter city name : \") \n  \n# complete_url variable to store \n# complete url address \ncomplete_url = base_url + \"appid=\" + api_key + \"&q=\" + city_name \n# get method of requests module \n# return response object \nresponse = requests.get(complete_url) \n  \n# json method of response object  \n# convert json format data into \n# python format data \nx = response.json() \n  \n# Now x contains list of nested dictionaries \n# Check the value of \"cod\" key is equal to \n# \"404\", means city is found otherwise, \n# city is not found \nif x[\"cod\"] != \"404\": \n  \n    # store the value of \"main\" \n    # key in variable y \n    y = x[\"main\"] \n  \n    # store the value corresponding \n    # to the \"temp\" key of y \n    current_temperature = y[\"temp\"] \n  \n    # store the value corresponding \n    # to the \"pressure\" key of y \n    current_pressure = y[\"pressure\"] \n  \n    # store the value corresponding \n    # to the \"humidity\" key of y \n    current_humidiy = y[\"humidity\"] \n  \n    # store the value of \"weather\" \n    # key in variable z \n    z = x[\"weather\"] \n  \n    # store the value corresponding  \n    # to the \"description\" key at  \n    # the 0th index of z \n    weather_description = z[0][\"description\"] \n  \n    # print following values \n    print(\" Temperature (in kelvin unit) = \" +\n                    str(current_temperature) + \n          \"\\n atmospheric pressure (in hPa unit) = \" +\n                    str(current_pressure) +\n          \"\\n humidity (in percentage) = \" +\n                    str(current_humidiy) +\n          \"\\n description = \" +\n                    str(weather_description)) \n  \nelse: \n    print(\" City Not Found \")\n```"}]}
{"dataset": "code_high", "id": "code_high_545", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm that sorts a given array of integers in ascending order.\n\n### Input:\n[5, 4, 2, 6, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_array(arr):\n  n = len(arr)\n  for i in range(n):\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n  return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_546", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the two adjacent elements in the array with the largest sum.\n\n### Input:\nArray: [3, 6, 8, -10, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_adjacent(arr):\n  max_sum = -1\n  for i in range(len(arr)-1):\n    if arr[i] + arr[i+1] > max_sum:\n      max_sum = arr[i] + arr[i+1]\n  return max_sum\n```"}]}
{"dataset": "code_high", "id": "code_high_547", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm that takes in two sorted arrays and merges them together.\n\n### Input:\narr1 = [1,3,5,7,9]\narr2 = [2,4,6,8,10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_arrays(arr1, arr2):\n    merged = []\n    i, j = 0, 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    while i < len(arr1):\n        merged.append(arr1[i])\n        i += 1\n    while j < len(arr2):\n        merged.append(arr2[j])\n        j += 1\n    return merged\n```"}]}
{"dataset": "code_high", "id": "code_high_548", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to generate a random password consisting of 8 characters with atleast one lowercase letter, one uppercase letter and one number.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport string\nimport random \ndef generate_password():\n    password_characters = string.ascii_letters + string.digits\n    password = ''.join(random.choice(password_characters) for i in range(8))\n    if not any(char.islower() for char in password):\n        password = password[:7] + random.choice(string.ascii_lowercase)\n    if not any(char.isupper() for char in password):\n        password = password[:7] + random.choice(string.ascii_uppercase)\n    if not any(char.isdigit() for char in password):\n        password = password[:7] + random.choice(string.digits)\n    return password\n```"}]}
{"dataset": "code_high", "id": "code_high_549", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm that prints all the permutations of a given string.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_permutations(string):\n    if len(string) == 1:\n        return [string]\n \n    all_perms = []\n    for i, c in enumerate(string):\n        other_chars = string[:i] + string[i+1:]\n        other_perms = generate_permutations(other_chars)\n        for perm in other_perms:\n            all_perms.append(c + perm)\n    return all_perms\n```"}]}
{"dataset": "code_high", "id": "code_high_550", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code snippet to display the Fibonacci sequence up to 50 numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n\ta = 0\n\tb = 1\n\tif n < 0: \n\t\tprint(\"Incorrect input\") \n\telif n == 0: \n\t\treturn a \n\telif n == 1: \n\t\treturn b \n\telse: \n\t\tfor i in range(2,n): \n\t\t\tc = a + b \n\t\t\ta = b \n\t\t\tb = c \n\t\treturn b \n  \n# Driver Code \nprint(\"Fibonacci Sequence:\")\nfor i in range(50):\n\tprint(Fibonacci(i), end = ' ')\n```"}]}
{"dataset": "code_high", "id": "code_high_551", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to find the longest common substring from two given strings.\n\n### Input:\nString1: 'Hello World', String2: 'Hey World'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_common_substring(s1, s2): \n    m = [[0] * (1 + len(s2)) for i in range(1 + len(s1))] \n    longest, x_longest = 0, 0\n    for x in range(1, 1 + len(s1)): \n        for y in range(1, 1 + len(s2)): \n            if s1[x - 1] == s2[y - 1]: \n                m[x][y] = m[x - 1][y - 1] + 1\n                if m[x][y] > longest:\n                    longest = m[x][y]\n                    x_longest = x\n            else: \n                m[x][y] = 0\n    return s1[x_longest - longest: x_longest]\nprint(longest_common_substring('Hello World', 'Hey World'))  # Result: 'ello Wo'\n```"}]}
{"dataset": "code_high", "id": "code_high_552", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python to merge two sorted arrays.\n\n### Input:\narr1 = [1, 5, 9]\narr2 = [2, 3, 6, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_sorted_arrays(arr1, arr2):\n    n1, n2 = len(arr1), len(arr2)\n    i, j, k = 0, 0, 0\n    arr3 = [0] * (n1 + n2)\n    while i < n1 and j < n2:\n        if arr1[i] < arr2[j]:\n            arr3[k] = arr1[i]\n            i += 1\n        else:\n            arr3[k] = arr2[j]\n            j += 1\n        k += 1\n    # Copy remaining elements \n    while i < n1:\n        arr3[k] = arr1[i]\n        i += 1\n        k += 1\n    while j < n2:\n        arr3[k] = arr2[j]\n        j += 1\n        k += 1\n    return arr3\n```"}]}
{"dataset": "code_high", "id": "code_high_553", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a data structure to store all of the prime numbers up to 1 million.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a data structure to store all of the prime numbers up to 1 million.\n\"\"\"\nimport math\ndef sieveOfEratosthenes(n):\n    prime_numbers = [True]*(n+1) \n    prime_numbers[0] = False\n    prime_numbers[1] = False\n      \n    for i in range(2, int(math.sqrt(n)+1)): \n        if (prime_numbers[i]): \n            for j in range(i*i, n+1, i): \n                prime_numbers[j] = False\n      \n    prime_numbers_list = []\n    for k in range(n+1): \n        if prime_numbers[k]: \n            prime_numbers_list.append(k)\n      \n    return prime_numbers_list\nif __name__ == '__main__':\n    n = 1000000\n    prime_numbers_list = sieveOfEratosthenes(n)\n    print(prime_numbers_list)\n```"}]}
{"dataset": "code_high", "id": "code_high_554", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of numbers, find the maximum product of any three numbers in the array.\n\n### Input:\narr = [2, 5, 6, 9, -2, -7, -1]\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = [2, 5, 6, 9, -2, -7, -1]\n# create an empty list to store the products of all triplets\ntriplets = []\n# loop through the array\nfor i in range(len(arr)):\n    for j in range(i+1,len(arr)):\n        for k in range(j+1,len(arr)):\n            # calculate and append the product of each triplet to the list\n            triplets.append(arr[i]*arr[j]*arr[k])\n# get the maximum product from the list\nmax_product = max(triplets)\nprint(\"The maximum product of any three numbers in the array is:\", max_product)\n```"}]}
{"dataset": "code_high", "id": "code_high_555", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python class to represent a Triangle and its properties, such as area, perimeter, and angles.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Triangle:\n    def __init__(self, side_a, side_b, side_c):\n        self.side_a = side_a\n        self.side_b = side_b\n        self.side_c = side_c\n    def get_area(self):\n        s = (self.side_a+self.side_b+self.side_c)/2\n        return (s*(s-self.side_a)*(s-self.side_b)*(s-self.side_c)) ** 0.5\n    def get_perimeter(self):\n        return self.side_a + self.side_b + self.side_c\n    def get_angles(self):\n        a = (self.side_b**2 + self.side_c**2 - self.side_a**2)/(2*self.side_b*self.side_c)\n        b = (self.side_a**2 + self.side_c**2 - self.side_b**2)/(2*self.side_a*self.side_c)\n        c = (self.side_b**2 + self.side_a**2 - self.side_c**2)/(2*self.side_b*self.side_a)\n        return [a, b, c]\n```"}]}
{"dataset": "code_high", "id": "code_high_556", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCorrect this function so that it returns a correct multiplication table.\n\n### Input:\ndef multiplication_table(number):\n    for row in range(1, number + 1):\n        output = ''\n        for column in range(1, number + 1):\n            output = output + '%d*%d=%d\\t' % (row, column, row * row)\n        print(output)\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef multiplication_table(number):\n    for row in range(1, number + 1):\n        output = ''\n        for column in range(1, number + 1):\n            output = output + '%d*%d=%d\\t' % (row, column, row * column)\n        print(output)\n```"}]}
{"dataset": "code_high", "id": "code_high_557", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a recursive function that takes two parameters, a number and a base and returns the result as a string.\n\n### Input:\n14, 16\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef convert_to_base(num, base): \n    \"\"\" \n    Function to convert num to a given base \n    \"\"\"\n    converted_string = \"\" \n    # Base Case \n    if num < base: \n        if num < 10: \n            return str(num) \n        else: \n            return chr(num - 10 + ord('A')) \n    rem = num % base \n    if rem < 10: \n        converted_string = str(rem) + converted_string \n    else: \n        converted_string = chr(rem - 10 + ord('A')) + converted_string \n    num = num // base \n    return convert_to_base(num, base) + converted_string\n```"}]}
{"dataset": "code_high", "id": "code_high_558", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a binary search on the given array.\n\n### Input:\nArray = [1, 4, 5, 6, 7, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nImplement a binary search on a given array\n\"\"\"\ndef binary_search(arr, element):\n    start = 0\n    end = len(arr) - 1\n    while start <= end:\n        mid = (start + end)//2\n        if arr[mid] == element:\n            return True\n        elif arr[mid] < element:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return False\nif __name__ == '__main__':\n    arr = [1, 4, 5, 6, 7, 9]\n    element = 7\n    result = binary_search(arr, element)\n    print(result)\n# Output\n# True\n```"}]}
{"dataset": "code_high", "id": "code_high_559", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform an insertion sort on the given list.\n\n### Input:\nList: [9, 5, 4, 8, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertionSort(arr):\n   # Traverse through 1 to len(arr) \n   for i in range(1, len(arr)): \n  \n     key = arr[i] \n  \n     # Move elements of arr[0..i-1], that are \n     # greater than key, to one position ahead \n     # of their current position\n     j = i-1\n     while j >= 0 and key < arr[j] : \n             arr[j + 1] = arr[j] \n             j -= 1\n     arr[j + 1] = key \n  \n  \n# Driver code\narr = [9, 5, 4, 8, 6]\ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"% d\" % arr[i])\n# Output: Sorted array is: 4 5 6 8 9\n```"}]}
{"dataset": "code_high", "id": "code_high_560", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a bubblesort algorithm in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(array): \n\tn = len(array) \n\tfor i in range (n): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif array[j] > array[j+1] : \n\t\t\t\tarray[j], array[j+1] = array[j+1], array[j] \narr = [64, 34, 25, 12, 22, 11, 90] \nbubbleSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(n): \n\tprint (\"%d\" %arr[i]),\n```"}]}
{"dataset": "code_high", "id": "code_high_561", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the index of the element that occurs only once in the array.\n\n### Input:\narr = [1, 1, 5, 5, 6, 8];\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_unique_element(arr):\n index = -1\n for i in range(len(arr)):\n  freq = 0\n  for j in range(len(arr)):\n   if arr[i] == arr[j]:\n    freq += 1\n if freq == 1:\n  index = i\n  break\n return index\n# Testing\narr = [1, 1, 5, 5, 6, 8]\nindex = find_unique_element(arr)\nprint(\"Index of the unique element is: \", index)\n```"}]}
{"dataset": "code_high", "id": "code_high_562", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a 2D matrix of integers, retrive the maximum sum submatrix.\n\n### Input:\n[[2,-2,3,4],[-4,-3,1,1],[-1,5,5,-3]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_sum_submatrix(matrix):\n    rows, columns = len(matrix), len(matrix[0])\n    dp = [[0] * columns for _ in range(rows)]\n    for i in range(rows):\n        for j in range(columns):\n            dp[i][j] = matrix[i][j]\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n            if i > 0 and j > 0:\n                dp[i][j] -= dp[i-1][j-1]\n                \n    max_sum = float('-inf')\n    for r1 in range(rows):\n        for r2 in range(r1, rows):\n            for c1 in range(columns):\n                for c2 in range(c1, columns):\n                    current_sum = dp[r2][c2]\n                    if r1 > 0:\n                        current_sum -= dp[r1-1][c2]\n                    \n                    if c1 > 0:\n                        current_sum -= dp[r2][c1-1]\n                    \n                    if r1 > 0 and c1 > 0:\n                        current_sum += dp[r1-1][c1-1]\n                    \n                    max_sum = max(max_sum, current_sum)\n    return max_sum\n```"}]}
{"dataset": "code_high", "id": "code_high_563", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python algorithm to find the most common value in an array.\n\n### Input:\narr = [1, 2, 3, 3, 3, 3, 4, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_common(arr):\n    freq = {}\n    \n    # Count the frequency of each element\n    for el in arr:\n        if el not in freq:\n            freq[el] = 1\n        else:\n            freq[el] += 1\n            \n    # Find the maximum frequency\n    max_freq = -1\n    for el, freq in freq.items():\n        max_freq = max(max_freq, freq)\n    \n    # Find the element with maximum frequency\n    most_common_el = None\n    for el, freq in freq.items():\n        if freq == max_freq:\n            most_common_el = el\n    \n    return most_common_el\n```"}]}
{"dataset": "code_high", "id": "code_high_564", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array, find the 2 elements which have the largest sum.\n\n### Input:\narr = [2, 8, 3, 5, 10, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_largest_sum(arr):\n  max_sum = 0\n  first_ele = arr[0]\n  sec_ele = arr[1]\n  for i in range(0, len(arr)):\n    for j in range(i+1, len(arr)):\n      curr_sum = arr[i] + arr[j]\n      if curr_sum > max_sum:\n        max_sum = curr_sum\n        first_ele = arr[i]\n        sec_ele = arr[j]\n  return [first_ele, sec_ele]\nprint(find_largest_sum(arr)) # outputs [10, 8]\n```"}]}
{"dataset": "code_high", "id": "code_high_565", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a binary tree, write a function to determine whether it is a valid binary search tree.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_valid_bst(root):\n    def helper(node, lower_limit, upper_limit):\n        # base case\n        if not node:\n            return True\n        \n        val = node.val\n        if val <= lower_limit or val >= upper_limit:\n            return False\n        if not helper(node.right, val, upper_limit):\n            return False\n        if not helper(node.left, lower_limit, val):\n            return False\n        return True\n    \n    return helper(root, float('-inf'), float('inf'))\nif __name__ == '__main__':\n    # Assume a binary tree is defined\n    root = Node().root\n    result = is_valid_bst(root)\n    print(result)\n```"}]}
{"dataset": "code_high", "id": "code_high_566", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate multiple Fibonacci numbers in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n  a = 0\n  b = 1\n  if n < 0:\n    print(\"Incorrect input\") \n  elif n == 0:\n    return a\n  elif n == 1:\n    return b\n  else:\n    for i in range(2,n):\n      c = a + b\n      a = b\n      b = c\n  return b\nfor i in range(10):\n  print(Fibonacci(i))\n```"}]}
{"dataset": "code_high", "id": "code_high_567", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a loop to find the largest sub-array in a given array with contiguous elements and its sum.\n\n### Input:\nArray: [-2, 6, -3, 5, -2, 3, 4, -2]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nGenerate a loop to find the largest sub-array in a given array with contiguous elements and its sum.\n\"\"\"\ndef largest_subarray_sum(array):\n    best_sum = 0\n    current_sum = 0\n    current_start_index = 0\n    best_start_index = -1\n    best_end_index = -1\n    for i in range(len(array)):\n        current_sum += array[i]\n        if current_sum > best_sum:\n            best_sum = current_sum\n            best_start_index = current_start_index\n            best_end_index = i\n        if current_sum < 0:\n            current_sum = 0\n            current_start_index = i + 1\n    return (best_sum, best_start_index, best_end_index)\nif __name__ == '__main__':\n    array = [-2, 6, -3, 5, -2, 3, 4, -2]\n    print(largest_subarray_sum(array))\n```"}]}
{"dataset": "code_high", "id": "code_high_568", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to search an element in a BST.\n\n### Input:\nroot:\n        5\n      /   \\\n     3     8\n    / \\   / \\\n   2   4  6   9\n\nkey: 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search_BST(root, key): \n  \n    # Base Condition \n    if root is None or root.val == key: \n        return root \n  \n    # If key is greater than root's key \n    if root.val < key: \n        return search_BST(root.right, key) \n  \n    # If key is smaller than root's key \n    return search_BST(root.left, key) \n  \n# Driver Code \nroot = Node(5)\nroot.left = Node(3) \nroot.right = Node(8)\nroot.left.left = Node(2) \nroot.left.right = Node(4) \nroot.right.left = Node(6) \nroot.right.right = Node(9) \n  \nkey = 3\nnode = search_BST(root, key) \nif node:\n    print(\"Found\") \nelse: \n    print(\"Not Found\")\n```"}]}
{"dataset": "code_high", "id": "code_high_569", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to print out all possible permutations of a list of numbers.\n\n### Input:\nlist = [1, 2, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutations(list): \n    if len(list) == 0: \n        return [] \n    if len(list) == 1: \n        return [list]\n    l = [] #empty list \n  \n    for i in range(len(list)): \n        m = list[i] \n        remList = list[:i] + list[i+1:] \n        for p in permutations(remList): \n            l.append([m] + p) \n    return l\n```"}]}
{"dataset": "code_high", "id": "code_high_570", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a quick-sort algorithm in Python to sort a given array in ascending order.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quick_sort(left) + middle + quick_sort(right)\n```"}]}
{"dataset": "code_high", "id": "code_high_571", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two sorted lists of numbers, write a code to merge them.\n\n### Input:\nlist1 = [1, 2, 3, 4]\nlist2 = [3, 4, 5, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_lists(list1, list2):\n    merged_list = []\n \n    i, j = 0, 0 \n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n \n    if i == len(list1):\n        merged_list.extend(list2[j:])\n    else:\n        merged_list.extend(list1[i:])\n \n    return merged_list\nmerged_list = merge_lists(list1, list2)\nprint(merged_list)\n```"}]}
{"dataset": "code_high", "id": "code_high_572", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that returns the nth Fibonacci number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_573", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to find all the perfect squares between 1 and n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef perfect_squares(n):\n    result = []\n    for i in range(1, n+1):\n        if is_perfect_square(i):\n            result.append(i)\n    return result\ndef is_perfect_square(n):\n    sqrt = int(n**.5)\n    return sqrt**2 == n\nif __name__ == '__main__':\n    n = 25\n    result = perfect_squares(n)\n    print(result)\n```"}]}
{"dataset": "code_high", "id": "code_high_574", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to generate random English sentences.\n\n### Input:\n<noinputn>\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport random\nimport nltk\ndef generate_sentences(num_sentences):\n    sentences = []\n    for _ in range(num_sentences):\n        sentence = []\n        while True:\n            word = random.choice(nltk.corpus.words.words())\n            sentence.append(word)\n            if word[-1] == '.':\n                break\n        sentences.append(' '.join(sentence))\n    return sentences\n```"}]}
{"dataset": "code_high", "id": "code_high_575", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes two arguments, a number and a list, and returns the indices in the list that add up the number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef two_sum(num, lst):\n    indices = []\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] + lst[j] == num:\n                indices.append([i,j])\n    return indices\n```"}]}
{"dataset": "code_high", "id": "code_high_576", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite Python code to print the most frequent characters in a given string.\n\n### Input:\nString: I love apples\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_frequent_char(s):\n    count = [0] * 256\n    max_count = 0\n    max_id = 0\n    for i in range(len(s)):\n        count[ord(s[i])] += 1\n        if count[ord(s[i])] > max_count:\n            max_count = count[ord(s[i])]\n            max_id = i\n    \n    return s[max_id]\n```"}]}
{"dataset": "code_high", "id": "code_high_577", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that sorts an array of integers in ascending order.\n\n### Input:\narr = [5, 9, 1, 4, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a program that sorts an array of integers in ascending order.\n\"\"\"\ndef sort(arr): \n    for i in range(len(arr)-1): \n        min_index = i \n        for j in range(i+1, len(arr)): \n            if arr[min_index] > arr[j]: \n                min_index = j       \n        arr[i], arr[min_index] = arr[min_index], arr[i]\nsort(arr)\nprint(arr) # [1, 3, 4, 5, 9]\n```"}]}
{"dataset": "code_high", "id": "code_high_578", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm to produce a binary tree from given inorder and preorder traversals.\n\n### Input:\ninorder: [4,2,5,1,3,6]\npreorder: [1,2,4,5,3,6]\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Node: \n    # A constructor to create a  \n    # new linked node  \n    def __init__(self, data):  \n        self.data = data  \n        self.left = None\n        self.right = None\ndef binary_tree_from_inorder_preorder(inorder, preorder): \n    if len(inorder) in [0, 1]: \n        return Node(inorder[0]) if inorder else None\n              \n    root_val = preorder[0]\n    root = Node(root_val) \n  \n    i_index = inorder.index(root_val) \n  \n    root.left = binary_tree_from_inorder_preorder(inorder[:i_index],\n                                      preorder[1:i_index + 1]) \n  \n    root.right = binary_tree_from_inorder_preorder(inorder[i_index + 1:],  \n                                       preorder[i_index + 1:]) \n  \n    return root\nif __name__ == \"__main__\":\n    inorder=[4,2,5,1,3,6]\n    preorder=[1,2,4,5,3,6]\n    root = binary_tree_from_inorder_preorder(inorder, preorder)\n```"}]}
{"dataset": "code_high", "id": "code_high_579", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python code to sort an array of numbers\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n```"}]}
{"dataset": "code_high", "id": "code_high_580", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python function to calculate a Fibonacci number based on a given index.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n        \n    elif n==1: \n        return 0\n    \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_581", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow would you write a program to find the number of prime numbers between 0 and 100?\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_prime_num(x, y): \n  \n    prime_count = 0\n  \n    for num in range(x, y + 1): \n       \n       if num > 1: \n           for i in range(2, num): \n               if (num % i) == 0: \n                   break\n           else: \n               prime_count += 1\n  \n    return prime_count \nprint(count_prime_num(0, 100))\n```"}]}
{"dataset": "code_high", "id": "code_high_582", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou are given an array of integers and an integer k. Output one of the maximum sums of k consecutive elements in the array.\n\n### Input:\narray = [1, -3, 4, 5, 7, 8, -2, 9, -1]\nk=3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_sum_k_elements(array, k):\n    max_sum = array[0]\n    for i in range(len(array)-k+1):\n        sum_temp = 0\n        for j in range(k):\n            sum_temp += array[i+j]\n        if sum_temp > max_sum:\n            max_sum = sum_temp\n    return max_sum\nmax_sum_k_elements(array, k)\n```"}]}
{"dataset": "code_high", "id": "code_high_583", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort an array of integers in ascending order without using the built-in sort() function.\n\n### Input:\nmy_array = [1, 6, 9, 5, 8, 10, 4, 2, 7, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_ascending(my_array):\n    '''This function sorts an array of integers in ascending order without using the built-in sort() function.'''\n    n = len(my_array)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if my_array[j] > my_array[j+1]:\n                my_array[j], my_array[j+1] = my_array[j+1], my_array[j]\n    return my_array\n```"}]}
{"dataset": "code_high", "id": "code_high_584", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a python program that takes a string as input and prints the length of the longest substring without repeatingcharacters.\n\n### Input:\n\"abcabcbb\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_longest_substring(s):\n  max_length = 0\n  start = 0\n  usedChar = {}\n  for i in range(len(s)):\n    if s[i] in usedChar and start <= usedChar[s[i]]:\n        start = usedChar[s[i]] + 1\n    else:\n        max_length = max(max_length, i - start + 1)\n    usedChar[s[i]] = i\n  return max_length\ninput_string = \"abcabcbb\"\nprint(\"The length of longest substring without repeating characters is: {}\".format(find_longest_substring(input_string)))\n```"}]}
{"dataset": "code_high", "id": "code_high_585", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a vector class in Python that allows for basic vector operations such as vector addition, subtraction and scalar multiplication.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Vector(object):\n \n  def __init__(self, components):\n    self.components = components\n \n  def add(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x + y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def sub(self, vector):\n    if len(self.components) != len(vector.components):\n      return None\n    components = [x - y for x, y in zip(self.components, vector.components)]\n    return Vector(components)\n \n  def scalar_mul(self, scalar):\n    components = [x * scalar for x in self.components]\n    return Vector(components)\n```"}]}
{"dataset": "code_high", "id": "code_high_586", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a string, find the longest palindrome within it.\n\n### Input:\nstring = \"ananabay\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_palindrome(string):\n  \"\"\"\n  Find the longest palindrome within a given string\n  \"\"\"\n  start, end, max_len = 0, 0, 0\n  for i in range(len(string)):\n      # Odd length of palindrome\n      left, right = i, i\n      while left >= 0 and right < len(string) and string[left] == string[right]:\n          length = right - left + 1\n          if max_len < length:\n              max_len = length\n              start = left\n              end = right\n          left -= 1\n          right += 1\n      # Even length of palindrome\n      left, right = i, i+1\n      while left >= 0 and right < len(string) and string[left] == string[right]:\n          length = right - left + 1\n          if max_len < length:\n              max_len = length\n              start = left\n              end = right\n          left -= 1\n          right += 1\n  return string[start:end+1]\n```"}]}
{"dataset": "code_high", "id": "code_high_587", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following code to turn it into an Insertion Sort algorithm.\n\n### Input:\ndef sort_numbers(arr):\n    pass\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertion_sort(arr): \n    for i in range(1, len(arr)):\n        x = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > x:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = x\n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_588", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a class to implement a Huffman coding algorithm.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass HuffmanCoding:\n \n    def __init__(self, inp_string):\n        self.inp_string = inp_string\n        self.string_length = len(inp_string)\n        self.frequency_table = self.get_frequency_table(inp_string)\n        self.huff_tree = self.build_huffman_tree(self.frequency_table)\n \n    def get_frequency_table(self, inp_string):\n        # Create dictionary to store frequencies\n        freq_table = {}\n        # Count frequency of characters in the string\n        for char in inp_string:\n            if char in freq_table:\n                freq_table[char] += 1\n            else:\n                freq_table[char] = 1\n        # Return the frequency table\n        return freq_table\n \n    def build_huffman_tree(self, frequency_table):\n        # Create a priority queue to store the trees \n        pq = PriorityQueue()\n        # Create a tree for each value\n        for value in frequency_table:\n            pq.put((frequency_table[value], Node(value)))\n        # Start the loop with two trees\n        while pq.qsize() > 1:\n            left_node = pq.get()\n            right_node = pq.get()\n            combined_freq = left_node[0] + right_node[0]\n            new_node = Node(left=left_node[1], right=right_node[1])\n            pq.put((combined_freq, new_node))\n        # Return the tree\n        return pq.get()[1]\n```"}]}
{"dataset": "code_high", "id": "code_high_589", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the Levenshtein distance between two strings\n\n### Input:\nstr1 = \"geeks\", str2 = \"geek\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef lev_dist(str1, str2):\n    if len(str1) < len(str2):\n        return lev_dist(str2, str1)\n    \n    if len(str2) == 0:\n        return len(str1)\n \n    previous_row = range(len(str2) + 1)\n    for i, c1 in enumerate(str1):\n        current_row = [i + 1]\n        for j, c2 in enumerate(str2):\n            insertions = previous_row[j + 1] + 1\n            deletions = current_row[j] + 1\n            substitutions = previous_row[j] + (c1 != c2)\n            current_row.append(min(insertions, deletions, substitutions))\n        previous_row = current_row\n    \n    return previous_row[-1]\n```"}]}
{"dataset": "code_high", "id": "code_high_590", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an recursive algorithm in Python to find the nth number in Fibonacci sequence.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==0: \n        return 0\n    elif n==1: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_591", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement quicksort in Python\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quicksort(array):\n    if len(array) < 2:\n        return array\n    else:\n        pivot = array[0]\n        less = [i for i in array[1:] if i <= pivot]\n        greater = [i for i in array[1:] if i > pivot]\n        return quicksort(less) + [pivot] + quicksort(greater)\n```"}]}
{"dataset": "code_high", "id": "code_high_592", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to edit the given code for sorting. Make the array sort in descending order.\n\n### Input:\narr = [3, 5, 8, 9, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quick_sort(arr): \n    if len(arr) <= 1:\n        return arr\n  \n    pivot = arr[-1]\n    lesser_elements = [i for i in arr[:-1] if i <= pivot]\n    greater_elements = [i for i in arr[:-1] if i > pivot]\n    return quick_sort(greater_elements) + [pivot] + quick_sort(lesser_elements)\n```"}]}
{"dataset": "code_high", "id": "code_high_593", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWe have a list of numbers and a given sum. Write a program to determine if any two numbers from the list sum up to the given sum.\n\n### Input:\n[1,2,3,4], 6\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef two_sum(nums, target):\n    for i in range(len(nums) - 1):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return (i, j)\n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_594", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a script that prints out the first 100 prime numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Python program to print first n prime numbers\n  \nnum = 100\n# prime numbers are greater than 1\nif num > 1:\n   # check for factors\n   for i in range(2,num):\n       if (num % i) == 0:\n           print(num,\"is not a prime number\")\n           break\n   else:\n       print(num,\"is a prime number\")\n  \nelse:\n   print(num,\"is not a prime number\")\n# Program to print the first N prime numbers\n# Taking input from the user\nN = 100\n# Initializing a list to store prime numbers\nprime_list = []\n# Initializing a variable to store each prime number\nnum = 2\n# Iterating over the range of numbers\nwhile len(prime_list) < N:\n    # Initializing a flag to determine if the number is prime or not\n    flag = True\n    # Iterating over the already identified prime numbers and dividing the number by each\n    for prime_num in prime_list:\n        # Checking the remainder\n        if num % prime_num == 0:\n            flag = False\n            break\n    # Checking if the number is prime\n    if flag:\n        prime_list.append(num)\n    # Incrementing the number\n    num += 1\n# Printing the first N prime numbers\nprint(\"First\", N , \"prime numbers are:\")\nfor prime_num in prime_list:\n    print(prime_num, end=\" \")\n```"}]}
{"dataset": "code_high", "id": "code_high_595", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCode an algorithm to implement merge sort\n\n### Input:\n[5, 2, 4, 6, 1, 7, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_sort(arr):\n    if len(arr) >1:\n        mid = len(arr) // 2 \n        left_half = arr[:mid]  \n        right_half = arr[mid:] \n        merge_sort(left_half) \n        merge_sort(right_half) \n        i = 0\n        j = 0\n        k = 0\n  \n        while i < len(left_half) and j < len(right_half):  \n            if left_half[i] < right_half[j]:  \n                arr[k] = left_half[i]  \n                i += 1\n            else:  \n                arr[k] = right_half[j]  \n                j += 1\n            k += 1\n      \n        while i < len(left_half):  \n            arr[k] = left_half[i]  \n            i += 1\n            k += 1\n          \n        while j < len(right_half):  \n            arr[k] = right_half[j]  \n            j += 1\n            k += 1\nif __name__ == '__main__':\n\tarr = [5, 2, 4, 6, 1, 7, 8]\n\tmerge_sort(arr)\n\tprint(arr)\n```"}]}
{"dataset": "code_high", "id": "code_high_596", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a sorted list of numbers in an array using insertion sort?\n\n### Input:\narr = [5, 8, 1, 7, 2, 10, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertion_sort(arr):\n    for i in range(len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and arr[j] > key:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_597", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to fetch the last ten news headlines from HackerNews using their API.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nFetch the last ten news headlines from HackerNews using their API\n\"\"\"\nimport requests\ndef get_headlines():\n    url = \"https://hacker-news.firebaseio.com/v0/topstories.json\"\n    ids = requests.get(url).json()\n    headlines = []\n    for id in ids[:10]:\n        item = requests.get(f\"https://hacker-news.firebaseio.com/v0/item/{id}.json\").json()\n        headlines.append(item['title'])\n    return headlines\nif __name__ == '__main__':\n    headlines = get_headlines()\n    for headline in headlines:\n        print(headline)\n```"}]}
{"dataset": "code_high", "id": "code_high_598", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a data structure to find the first and last occurrence of a number in an array.\n\n### Input:\narray = [1, 5, 7, 8, 8, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass FindFirstLastOccurrence:\n    def __init__(self, arr):\n        self.arr = arr\n        self.first_occurrence = -1\n        self.last_occurrence = -1\n    \n    def findFirstLastOccurrence(self, k):\n        #Find the first occurrence\n        left = 0\n        right = len(self.arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if self.arr[mid] == k and (mid == 0 or self.arr[mid-1] < k):\n                self.first_occurrence = mid\n                break\n            elif self.arr[mid] < k:\n                left = mid+1\n            else:\n                right = mid-1\n        #Find the last occurrence\n        left = 0\n        right = len(self.arr) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if self.arr[mid] == k and (mid == len(self.arr)-1 or self.arr[mid+1] > k):\n                self.last_occurrence = mid\n                break\n            elif self.arr[mid] > k:\n                right = mid-1\n            else:\n                left = mid+1\n        \n        return self.first_occurrence, self.last_occurrence\nif __name__ == \"__main__\":\n    finder = FindFirstLastOccurrence([1, 5, 7, 8, 8, 10])\n    print(finder.findFirstLastOccurrence(8)) # (3,4)\n```"}]}
{"dataset": "code_high", "id": "code_high_599", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script to count the number of alphabets, digits and special characters in a string.\n\n### Input:\nString = \"Hello World 123$%^&\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nstring = \"Hello World 123$%^&\"\nalphabets = 0\ndigits = 0\nspecial_characters = 0\n \nfor i in range(0, len(string)): \n    if ((string[i] >= 'a' and string[i] <= 'z') or (string[i] >= 'A' and string[i] <= 'Z')): \n        alphabets = alphabets + 1\n    elif (string[i] >= '0' and string[i] <= '9'): \n        digits = digits + 1\n    else: \n        special_characters = special_characters + 1\n \nprint(\"Alphabets:\", alphabets) \nprint(\"Digits:\", digits) \nprint(\"Special Characters:\", special_characters)\n```"}]}
{"dataset": "code_high", "id": "code_high_600", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the following code so that it returns the lowest common multiple of two given numbers?\n\n### Input:\ndef lowest_common_multiple(x, y):\n    pass\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef lowest_common_multiple(x, y): \n    if x > y:\n        greater = x\n    else:\n        greater = y\n    while(True): \n        if((greater % x == 0) and (greater % y == 0)): \n            lcm = greater \n            break\n        greater += 1\n    return lcm\n```"}]}
{"dataset": "code_high", "id": "code_high_601", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python to find the subsequence of a given sequence.\n\n### Input:\nsequence = [1, 6, 2, 4, 3, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef findSubsequence(sequence): \n    subSeq = [] \n    maxLen = 1\n  \n    # looping through the sequence \n    for i in range(len(sequence)): \n        j = i + 1\n        while j < len(sequence): \n            # checking for non decreasing sequence \n            if sequence[j] >= sequence[i]: \n                subSeq.append(sequence[j]) \n                i = j \n                j += 1\n  \n            # checking for the subsequence with the max length \n            if len(subSeq) > maxLen: \n                maxLen = len(subSeq) \n  \n            # reset subSeq for the next subsequence if current element is starting of new subsequence \n            else: \n                subSeq = [] \n  \n    # return-1 when there is no subsequence  \n    if maxLen == 1: \n        return -1\n    else: \n        return maxLen \n  \n# Driver Code \nsequence = [1, 6, 2, 4, 3, 7] \nprint(\"LCS is \", findSubsequence(sequence))\n```"}]}
{"dataset": "code_high", "id": "code_high_602", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a python program to search for a substring in a string.\n\n### Input:\nString = \"This is a sample string\"\nSubstring = \"sample\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef search_substring(string, substring):\n    start = 0\n    index = -1\n    while start < len(string):\n        i = string.find(substring, start)\n        if i == -1:\n            break\n        else:\n            index = i\n            start = i + 1\n    return index\n```"}]}
{"dataset": "code_high", "id": "code_high_603", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that prints all unique permutations of the given string.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutations(string):\n    result = []\n    if len(string) == 1:\n        result=[string]\n    else:\n        for i, letter in enumerate(string):\n            for perm in permutations(string[:i] + string[i+1:]):\n                result.append(letter + perm)\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_604", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an efficient sorting algorithm in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort(arr): \n    if len(arr) == 0: \n        return [] \n    else: \n        pivot = arr[0] \n        lesser = sort([x for x in arr[1:] if x < pivot])\n        greater = sort([x for x in arr[1:] if x >= pivot])\n        return lesser + [pivot] + greater\n```"}]}
{"dataset": "code_high", "id": "code_high_605", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a Python program\n\n### Input:\nCreate a program to validate an ISBN number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_valid_isbn(isbn):\n    isbn_length = len(isbn)\n    if isbn_length != 10:\n        return False\n   \n    # Calculate the check digit\n    sum = 0\n    for i in range(9):\n        sum += (i+1) * int(isbn[i])\n    check_digit = sum % 11\n   \n    # Check if the check digit matches the last character of the ISBN.\n    if check_digit == 10 and isbn[-1].upper() != 'X':\n        return False\n    elif check_digit < 10 and int(isbn[-1]) != check_digit:\n        return False\n    else:\n        return True\n```"}]}
{"dataset": "code_high", "id": "code_high_606", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a linked list, write a function to find the nth to last node.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef nth_to_last_node(head, n):\n    left_ptr = head\n    right_ptr = head\n    for _ in range(n-1):\n        if not right_ptr.nextnode:\n            raise LookupError('Error: n is larger than the linked list')\n        right_ptr = right_ptr.nextnode \n    while right_ptr.nextnode:\n        left_ptr = left_ptr.nextnode\n        right_ptr = right_ptr.nextnode\n    return left_ptr\nif __name__ == '__main__':\n    ll = LinkedList() # Assume LinkedList with nodes is defined\n    head = ll.head\n    result = nth_to_last_node(head, 3)\n    print(result.value)\n```"}]}
{"dataset": "code_high", "id": "code_high_607", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a matrix multiplication program that takes an arbitrary number of matrices as input.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef matrix_multiplication(*matrices):\n    res = [[0 for _ in range(len(matrices[0][0]))]\n        for _ in range(len(matrices[0]))]\n    for y in range(len(matrices[0])):\n        for x in range(len(matrices[0][0])):\n            for m in range(len(matrices)):\n                res[y][x] += matrices[m][y][x]\n    return res\n```"}]}
{"dataset": "code_high", "id": "code_high_608", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers, find the longest subarray with total sum less than the given sum.\n\n### Input:\narr = [1, -2, 2, 4, 3], sum = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\narr = [1, -2, 2, 4, 3]\nsum = 3\n# create an empty list to store the longest subarray\nlongest = []\n# loop through the array\nfor i in range(len(arr)):\n    # set the sum of current subarray to 0 \n    curr_sum = 0\n    # another loop to check if any subarray of the array\n    # has a sum less than the given sum\n    for j in range(i, len(arr)):\n        curr_sum += arr[j]\n        # if any subarray is found update the longest list\n        if curr_sum < sum:\n            longest = arr[i: j + 1]\nprint(\"The longest subarray with total sum less than the given sum is:\", longest)\n```"}]}
{"dataset": "code_high", "id": "code_high_609", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the given information, write a function to calculate a 5-digit ISBN number.\n\n### Input:\nAuthor name: Bob Smith\nTitle of Book: Learn Programming\nPublisher: Aztec Publishing\nYear Published: 2020\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_isbn(authorname, title, publisher, yearpublished):\n    authorname_string = authorname.replace(' ', '')\n    title_string = title.replace(' ', '')\n    publisher_string = publisher.replace(' ', '')\n    isbn_total = 0\n    for letter in authorname_string:\n        isbn_total += ord(letter)\n    for letter in title_string:\n        isbn_total += ord(letter)\n    for letter in publisher_string:\n        isbn_total += ord(letter) \n    isbn_total += yearpublished\n    while isbn_total > 9999:\n        isbn_total = isbn_total % 10000\n    isbn_string = str(isbn_total).zfill(5)\n    return isbn_string\n```"}]}
{"dataset": "code_high", "id": "code_high_610", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing any programming language, write a program which takes a number as an input and outputs the first two prime numbers after it.\n\n### Input:\n7\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_next_prime_numbers(num):\n    \"\"\"This function takes a number as an input\n    and returns the first two prime numbers after it\"\"\"\n    prime_numbers = []\n    # Increment num to the first prime number\n    while not is_prime(num):\n        num += 1\n    # Append num to prime_numbers (first prime after input)\n    prime_numbers.append(num)\n    # Increment num to the second prime number\n    num += 1\n    while not is_prime(num):\n        num += 1\n    # Append num to prime_numbers (second prime after input)\n    prime_numbers.append(num)\n    # Return the list of prime numbers\n    return prime_numbers\ndef is_prime(num): \n    \"\"\"Returns True if number is prime\"\"\"\n    if num <= 1: \n        return False\n    for i in range(2, num): \n        if num % i == 0: \n            return False  \n    return True\nprint(find_next_prime_numbers(7)) # Output: [11, 13]\n```"}]}
{"dataset": "code_high", "id": "code_high_611", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to find the longest substring of given string with length greater than or equal to 2 without repeating letters.\n\n### Input:\nstring = \"abcdexyeffgghh\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Function to find the longest substring of given string with length greater than or equal to 2 without repeating letters\ndef find_longest_substring(string):\n    # Variable to store the starting index of the substring\n    start_index = 0\n    \n    # Hashset to store characters in string\n    visited = set()\n    \n    # Variables to store the length and the result substring\n    length = 0\n    result = \"\"\n    \n    # Iterate over the string\n    for i in range(len(string)):\n        # If the character is already in the hashset, then remove characters until this character from the hashset \n        if string[i] in visited:\n            visited.remove(string[start_index])\n            start_index += 1\n            \n        # Add the current character to the hashset\n        visited.add(string[i])\n        \n        # Update length and result if length is greater than before\n        if length < i - start_index + 1:\n            length = i - start_index + 1\n            result = string[start_index:i+1]\n        \n    # Return the result substring\n    return result\n# Test the function\nprint(find_longest_substring(string))\n```"}]}
{"dataset": "code_high", "id": "code_high_612", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a codde fragment to print out the most frequent element in an array.\n\n### Input:\narr = [1, 2, 2, 3, 4, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\nfreq = {}\nfor el in arr:\n    if el in freq:\n        freq[el] += 1\n    else:\n        freq[el] = 1\n        \nmax_el, max_freq = None, 0\nfor el, freq in freq.items():\n    if freq > max_freq:\n        max_el = el\n        max_freq = freq\n        \nprint(max_el, max_freq)  # Output: 2 2\n```"}]}
{"dataset": "code_high", "id": "code_high_613", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the sum of all the prime numbers between a given range.\n\n### Input:\n15 and 20\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_of_primes(start, end): \n    sum = 0\n    for i in range(start, end + 1):\n        if isPrime(i): \n            sum = sum + i \n    return sum\n    \ndef isPrime(num): \n    if num > 1: \n        for i in range(2, num): \n            if (num % i) == 0: \n                return False\n        return True\n    else: \n        return False\n```"}]}
{"dataset": "code_high", "id": "code_high_614", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate discrete buckets in a given array using the following algorithm.\n\n### Input:\n[2, 3, 6, 7, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef create_buckets(arr):\n    buckets = []\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] != x + 1:\n            buckets.append(arr[i-1])\n            x = arr[i]\n    buckets.append(arr[-1])\n    return buckets\ncreate_buckets([2, 3, 6, 7, 8])\n# Output: [2, 3, 6, 8]\n```"}]}
{"dataset": "code_high", "id": "code_high_615", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class to convert a given string to Morse code and store it as a list.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass MorseCodeConverter:\n    def __init__(self, string):\n        self.string = string\n        self.alphabet = {\n            'a': '.-',\n            'b': '-...',\n            'c': '-.-.',\n            'd': '-..',\n            'e': '.',\n            'f': '..-.',\n            'g': '--.',\n            'h': '....',\n            'i': '..',\n            'j': '.---',\n            'k': '-.-',\n            'l': '.-..',\n            'm': '--',\n            'n': '-.',\n            'o': '---',\n            'p': '.--.',\n            'q': '--.-',\n            'r': '.-.',\n            's': '...',\n            't': '-',\n            'u': '..-',\n            'v': '...-',\n            'w': '.--',\n            'x': '-..-',\n            'y': '-.--',\n            'z': '--..',\n            '1': '.----',\n            '2': '..---',\n            '3': '...--',\n            '4': '....-',\n            '5': '.....',\n            '6': '-....',\n            '7': '--...',\n            '8': '---..',\n            '9': '----.',\n            '0': '-----'\n        }\n    \n    def convert(self):\n        morse_code = []\n        for char in self.string:\n            if char in self.alphabet:\n                morse_code.append(self.alphabet[char])\n        return morse_code\n```"}]}
{"dataset": "code_high", "id": "code_high_616", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the sum of two matrices of size m x n.\n\n### Input:\nA = [[1, 2], \n     [4, 5]]\nB = [[3, 6], \n     [7, 8]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef matrix_sum(A, B): \n    m = len(A) \n    n = len(A[0]) \n    C = [[0 for i in range(n)] for j in range(m)] \n    for i in range(m):\n        for j in range(n):\n            C[i][j] = A[i][j] + B[i][j]\n    return C\nA = [[1, 2], \n     [4, 5]]\nB = [[3, 6], \n     [7, 8]]\nres = matrix_sum(A, B)\nprint(res)\n```"}]}
{"dataset": "code_high", "id": "code_high_617", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to find the longest substring with unique characters\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_substring(string): \n    n = len(string) \n  \n    ''' Initialization of stings, \n    a and b ''' \n    a = \"\" \n    b = \"\"  \n  \n    ''' Initialization of maximum length substring \n    having distinct characters ''' \n    maxlen = 0  \n  \n    ''' 1. Pick starting point \n    2. intialise substrng \"a\"\n    3. Find the longest such \n    substring by comparing \n    current and previous  \n    substring ''' \n    for i in range(n):\n        a += string[i] \n        b = \"\" \n        for j in range(i + 1, n): \n            if string[j] not in a:              \n                b += string[j] \n            else: \n                break\n        if len(a) > maxlen: \n            maxlen = len(a) \n        a += b\n    return maxlen\n```"}]}
{"dataset": "code_high", "id": "code_high_618", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of numbers, find the longest increasing sequence in the array.\n\n### Input:\nArray = [2, 3, 5, 4, 7, 9, 6, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_increasing_sequence(arr):\n    lengths = [1]*len(arr)\n    \n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lengths[i] = max(lengths[i], lengths[j] + 1)\n    \n    max_length_index = 0\n    for i in range(len(lengths)):\n        if lengths[i] > lengths[max_length_index]:\n            max_length_index = i\n    \n    current_index = max_length_index\n    sequence = [arr[max_length_index]]\n    for i in range(max_length_index-1, -1, -1):\n        if lengths[i] == lengths[current_index] - 1 and arr[i] < arr[current_index]:\n            sequence.append(arr[i])\n            current_index = i\n    sequence.reverse()\n    return sequence\n```"}]}
{"dataset": "code_high", "id": "code_high_619", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a for loop to write a program to print the first 5 prime numbers\n\n### Response:"}, {"role": "assistant", "content": "```python\ncount = 0 # to count the number of prime numbers\nfor num in range(1,100):  \n   # all prime numbers are greater than 1\n   if num > 1:\n       for i in range(2,num):\n           if (num % i) == 0:\n               break\n       else:\n           print(num)\n           count += 1\n       if count == 5:\n           break\n```"}]}
{"dataset": "code_high", "id": "code_high_620", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to check for balanced parentheses in a given string.\n\n### Input:\nString: (((())()))\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_balanced(s): \n    stack = [] \n    for letter in s: \n        if letter in [\"(\", \"[\", \"{\"]: \n            stack.append(letter) \n        else: \n            if len(stack) == 0: \n                return False\n            top = stack.pop(-1) \n            if top == '(': \n                if letter == ')':             \n                    continue\n                else: \n                    return False\n            elif top == '[': \n                if letter == ']': \n                    continue\n                else: \n                    return False\n            elif top == '{': \n                if letter == '}': \n                    continue\n                else: \n                    return False\n    if len(stack) == 0: \n        return True \n    return False \n# Driver code\nprint(is_balanced('(((())()))')) # True\nprint(is_balanced('(((()))')) # False\n```"}]}
{"dataset": "code_high", "id": "code_high_621", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that encodes a message into a Vigenere cipher\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef vigenere_encode(message, key):\n    encoded_message = \"\"\n    key_index = 0\n    for character in message:\n        if character.isalpha():\n            shift_amount = ord(key[key_index]) % 26\n            key_index += 1\n            if key_index == len(key):\n                key_index = 0  \n            shifted_char_code = ord(character) + shift_amount\n            if shifted_char_code > ord('z'):\n                shifted_char_code -= 26\n            encoded_message += chr(shifted_char_code)\n        else:\n            encoded_message += character\n    return encoded_message\n```"}]}
{"dataset": "code_high", "id": "code_high_622", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function in Python to toggle whether a given HTML tag has a given class.\n\n### Input:\n<div class=\"myClass\">Hello world</div>\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef toggle_class(html_string, tag, tag_class):\n    soup = BeautifulSoup(html_string, 'html.parser')\n    tag_html = soup.find(tag)\n    if tag_html:\n        classes = tag_html.get('class')\n        if classes and tag_class in classes:\n            classes.remove(tag_class)\n        else:\n            classes.append(tag_class)\n        tag_html['class'] = classes\n    return soup.decode()\n# Usage\nhtml_string = '<div class=\"myClass\">Hello world</div>'\ntag = 'div'\ntag_class = 'myClass'\nnew_html_string = toggle_class(html_string, tag, tag_class)\nprint(new_html_string)\n# Output: <div>Hello world</div>\n```"}]}
{"dataset": "code_high", "id": "code_high_623", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a linked list with the following elements: 5, 6, 7, 8.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Node: \n    def __init__(self, data): \n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):  \n        self.head = None\n    def append(self, data):\n        new_node = Node(data)\n        if self.head == None:\n            self.head = new_node\n        else:\n            curr = self.head\n            while curr.next != None:\n                curr = curr.next\n            curr.next = new_node\nlist = LinkedList() \nlist.append(5) \nlist.append(6) \nlist.append(7) \nlist.append(8)\n```"}]}
{"dataset": "code_high", "id": "code_high_624", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a correct implementation of the following algorithm\n\n### Input:\nBinary search for an element x in a sorted array\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(arr, x): \n    low = 0\n    high = len(arr) - 1\n    while low <= high: \n        mid = (high+low)//2\n        if arr[mid] < x: \n            low = mid + 1\n        elif arr[mid] > x: \n            high = mid - 1\n        else: \n            return mid \n  \n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_625", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nComplete the following function so that all strings in the list have a length of 5 characters.\n\n### Input:\nlst = [\"aaa\", \"bb\", \"ccccc\", \"dddddd\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef make_length_five(lst):\n    '''This function will ensure that all strings in the list have a length of 5 characters.'''\n    for i in range(len(lst)):\n        if len(lst[i]) < 5:\n            lst[i] = lst[i] + ' ' * (5 - len(lst[i]))\n        elif len(lst[i]) > 5:\n            lst[i] = lst[i][:5]\n    return lst\n```"}]}
{"dataset": "code_high", "id": "code_high_626", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to generate the first n Fibonacci numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_fibonacci_numbers(n):\n   if n==1:\n       return [0]\n   elif n==2:\n       return [0,1]\n   else:\n       fib_list = [0,1]\n       for i in range(2,n):\n           fib_list.append(fib_list[i-1]+fib_list[i-2])\n       return fib_list\n```"}]}
{"dataset": "code_high", "id": "code_high_627", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to compress a string by removing consecutive duplicate characters.\n\n### Input:\nstring = \"aabcccccaaa\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compress_string(string):\n    current_char = string[0]\n    compressed_string = current_char\n    count = 1\n    for char in string[1:]:\n        if char == current_char: \n            count += 1\n        else: \n            compressed_string = compressed_string + str(count) + char\n            current_char = char \n            count = 1\n    compressed_string = compressed_string + str(count)\n    return compressed_string\nprint(compress_string(string))\n# Output: a2b1c5a3\n```"}]}
{"dataset": "code_high", "id": "code_high_628", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array with n numbers, write a function to find if there exists three elements in the array whose sum is equal to a given number.\n\n### Input:\narray = [5, 3, 1, 8], number = 14\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sum_three_elements(array, number):\n    \"\"\"Given an array with n numbers, find if there exists three elements in the array whose sum is equal to a given number.\"\"\"\n    array.sort()\n    for i in range(len(array) - 2):\n        left = i + 1\n        right = len(array) - 1\n        while left < right:\n            temp = array[i] + array[left] + array[right]\n            if temp == number:\n                return True\n            elif temp < number:\n                left += 1\n            else:\n                right -= 1\n    return False\nif __name__ == '__main__':\n    a = [5, 3, 1, 8]\n    number = 14\n    print(sum_three_elements(a, number))\n```"}]}
{"dataset": "code_high", "id": "code_high_629", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm in python to find the second largest number of an unsorted list\n\n### Input:\narr = [1, 3, 4, 5, 9, 10, 11]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_sec_largest(arr):\n  max1 = max(arr[0], arr[1])\n  max2 = min(arr[0], arr[1])\n#Iterate over the array to find max2 and max1\nfor i in range(2, len(arr)):\n  if arr[i] > max1:\n    max2 = max1\n    max1 = arr[i]\n  elif arr[i] > max2 and arr[i]!=max1:\n    max2 = arr[i]\n  else:\n    continue\n# else return the second max\nreturn max2\n```"}]}
{"dataset": "code_high", "id": "code_high_630", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to query a database table 'trips' and return a list of all trips made over the past three months.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef query_trips():\n    start_date = datetime.datetime.now() - datetime.timedelta(days=90)\n    end_date = datetime.datetime.now()\n    sql = 'SELECT * FROM trips WHERE date_of_trip >= %s AND date_of_trip <= %s'\n    \n    try:\n        conn = connect_to_database()\n        cur = conn.cursor()\n        cur.execute(sql, (start_date, end_date))\n        trips = cur.fetchall()\n        cur.close()\n        conn.close()\n        return trips\n    except Exception as e:\n        raise e\n```"}]}
{"dataset": "code_high", "id": "code_high_631", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program for sorting a given array in O(n) time complexity.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_array(arr):\n    n = len(arr) \n    for i in range(n): \n        min_idx = i \n        for j in range(i+1, n): \n            if arr[min_idx] > arr[j]: \n                min_idx = j \n        arr[i], arr[min_idx] = arr[min_idx], arr[i] \n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_632", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a REST API call to get the latest version of Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport requests\ndef get_latest_python_version():\n    url = 'https://www.python.org/ftp/python/'\n    response = requests.get(url)\n    \n    if response.status_code == 200:\n        html = response.text\n        start_index = html.find('<a href=\"')\n        \n        if start_index != -1:\n            end_index = html.find('/\">', start_index + 1)\n            if end_index != -1:\n                version = html[start_index + 9:end_index]\n                return version\n    return None\n```"}]}
{"dataset": "code_high", "id": "code_high_633", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a game of rock-paper-scissors using functions and conditionals.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef play_game():\n    \"\"\"\n    This function is a game of rock-paper-scissors.\n    \"\"\"\n    import random\n    player_input = input(\"Choose rock(r), paper(p) or scissors(s): \")\n    computer_choice = random.choice([\"r\", \"p\", \"s\"])\n    if player_input == computer_choice:\n        return \"It is a draw\"\n    elif player_input == \"r\":\n        if computer_choice == \"p\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    elif player_input == \"p\":\n        if computer_choice == \"s\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    elif player_input == \"s\":\n        if computer_choice == \"r\":\n            return \"Computer Wins!\"\n        else:\n            return \"Player Wins!\"\n    else:\n        return \"Invalid input\"\nprint(play_game())\n```"}]}
{"dataset": "code_high", "id": "code_high_634", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm that returns the word with the most vowels in the sentence.\n\n### Input:\nThe quick brown fox jumps over the lazy dog.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_vowels(sentence):\n    # Split sentence into words\n    words = sentence.split(\" \")\n    # Keep track of our highest vowel count and the associated word\n    highest_count = 0\n    most_vowels_word = \"\"\n    # Count the number of vowels in each word\n    for word in words:\n        num_vowels = 0\n        for c in word:\n            if c.lower() in [\"a\", \"e\", \"i\", \"o\", \"u\"]:\n                num_vowels += 1\n        # Store word if it has the highest vowel count\n        if num_vowels > highest_count:\n            highest_count = num_vowels\n            most_vowels_word = word\n    return most_vowels_word\nif __name__ == \"__main__\":\n    print(most_vowels(\"The quick brown fox jumps over the lazy dog.\")) # prints brown\n```"}]}
{"dataset": "code_high", "id": "code_high_635", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to create a list with all the prime numbers in the range of 0 to 100.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef create_prime_list(upper_limit):\n    prime_list = []\n    for num in range(2,upper_limit+1):\n        flag=0\n        for i in range(2,num):\n            if num % i == 0:\n                flag=1\n        if flag==0:\n            prime_list.append(num)\n    return prime_list\n```"}]}
{"dataset": "code_high", "id": "code_high_636", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCode an algorithm to reverse an array of integers.\n\n### Input:\n[1, 3, 4, 6, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef reverse_array(arr):\n    left_index = 0\n    right_index = len(arr) - 1\n    while left_index < right_index:\n        arr[left_index], arr[right_index] = arr[right_index], arr[left_index]\n        left_index += 1\n        right_index -= 1\n    return arr\nif __name__ == \"__main__\":\n    print(reverse_array([1, 3, 4, 6, 8]))\n```"}]}
{"dataset": "code_high", "id": "code_high_637", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to print all possible combinations of balanced parentheses.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generateParenthesis(N): \n    string = \"\" \n    result = [] \n  \n    # dfs on the result \n    def generate(left, right, string): \n        if (left == 0 and right == 0): \n            result.append(string) \n            return\n  \n        if left > 0: \n            generate(left - 1, right, string + \"(\") \n  \n        if left < right: \n            generate(left, right - 1, string + \")\") \n  \n    # calling the function \n    if N > 0: \n        generate(N, N, string) \n    return result \n  \n# Driver function \nprint(generateParenthesis(3))\n```"}]}
{"dataset": "code_high", "id": "code_high_638", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCode an algorithm to find the closest pair of elements in a given array with respect to a given target number.\n\n### Input:\narr = [10, 22, 28, 29, 30, 40], target = 44\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef closest_pair(arr, target): \n    min_difference = 999999\n    min_pair = (-1, -1)\n      \n    # Iterate through all elements \n    for i in range(len(arr)): \n          \n        # Loop through rest of elements \n        for j in range(i + 1, len(arr)): \n            diff = abs(arr[i] + arr[j] - target) \n          \n            # Check for maximum difference \n            if diff < min_difference: \n                min_difference = diff \n                min_pair = (i, j) \n      \n    return min_pair\n```"}]}
{"dataset": "code_high", "id": "code_high_639", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to create a simple calculator for addition, subtraction, multiplication and division.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef simple_calculator(action, a, b):\n    if action == \"add\":\n        return a + b\n    elif action == \"subtract\":\n        return a - b\n    elif action == \"multiply\":\n        return a * b\n    elif action == \"divide\":\n        return a / b\n    else:\n        return 0\n```"}]}
{"dataset": "code_high", "id": "code_high_640", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to add two matrices of any size.\n\n### Input:\n[[1, 2, 3],\n [4, 5, 6]]\n+\n[[7, 8, 9],\n [10, 11, 12]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef matrix_addition(mat1, mat2):\n    # check whether two matrices are of same size\n    if(len(mat1) != len(mat2)):\n        return 'Not possible to add matrices'\n    else: \n        # adding elements of mat1 and mat2\n        result = [[0 for col in range(len(mat1[0]))] for row in range(len(mat1))]\n        for i in range(len(mat1)):\n            for j in range(len(mat1[0])):\n                result[i][j] = mat1[i][j] + mat2[i][j]\n    return result\n# initializing two matrices\nmat1 = [[1, 2, 3], [4, 5, 6]]\nmat2 = [[7, 8, 9], [10, 11, 12]]\nprint(matrix_addition(mat1, mat2))\n```"}]}
{"dataset": "code_high", "id": "code_high_641", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to convert a given English sentence into Pig Latin.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nWrite a code to convert a given English sentence into Pig Latin.\n\"\"\"\ndef pig_latin(sentence):\n    vowel = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    words = sentence.split(\" \")\n    pig_latin_words = []\n    for word in words:\n        if word[0] in vowel:\n            pig_latin_words.append(word + \"way\")\n        else:\n            pig_latin_words.append(word[1:] + word[0] + \"ay\")\n    \n    return \" \".join(pig_latin_words)\nif __name__ == \"__main__\":\n    sentence = \"This is a sample sentence\"\n    print(pig_latin(sentence))\n```"}]}
{"dataset": "code_high", "id": "code_high_642", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings, develop a function to calculate edit distance between them.\n\n### Input:\nStrings: \"kitten\" and \"sitting\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef edit_distance(str1, str2): \n    n1 = len(str1) \n    n2 = len(str2) \n    dp = [[0 for x in range(n2 + 1)] for x in range(n1 + 1)] \n    for i in range(n1 + 1): \n        for j in range(n2 + 1): \n            if i == 0: \n                dp[i][j] = j\n            elif j == 0: \n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]: \n                dp[i][j] = dp[i - 1][j - 1] \n            else: \n                dp[i][j] = 1 + min(dp[i][j - 1],\n                                   dp[i - 1][j],\n                                   dp[i - 1][j - 1]) \n  \n    return dp[n1][n2] \nedit_distance(\"kitten\", \"sitting\")\n```"}]}
{"dataset": "code_high", "id": "code_high_643", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort a given array using quicksort algorithm.\n\n### Input:\narr = [3, 2, 9, 10, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  \n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)\nprint(quicksort(arr))\n```"}]}
{"dataset": "code_high", "id": "code_high_644", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a computer program to print all primes in an inputted range.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_primes(start, end):\n    for num in range(start, end + 1):\n        # all prime numbers are greater than 1\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                print(num)\n```"}]}
{"dataset": "code_high", "id": "code_high_645", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web application that allows users to search for movies and save their favorites.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a web application that allows users to search for movies and save their favorites\n\"\"\"\n# Import libraries\nimport flask\nimport sqlalchemy\n# Create Flask application\napp = flask.Flask(__name__)\n# Connect to database\nengine = sqlalchemy.create_engine('sqlite:///movies.db')\n# Define routes\n@app.route(\"/\")\ndef index():\n    # Return homepage\n    return flask.render_template(\"index.html\")\n@app.route(\"/search\")\ndef search():\n    # Get search terms from query string\n    terms = flask.request.args.get(\"terms\")\n    \n    # Query database\n    conn = engine.connect()\n    query = f\"SELECT * FROM movies WHERE title LIKE '%{terms}%'\"\n    results = conn.execute(query).fetchall()\n    conn.close()\n    \n    # Render results\n    return flask.render_template(\"search.html\", results=results)\n    \n@app.route(\"/save\")\ndef save():\n    # Get the movie id from query string\n    movie_id = flask.request.args.get(\"id\")\n    \n    # Save the movie to the database\n    conn = engine.connect()\n    query = f\"INSERT INTO favorites (movie_id) VALUES ({movie_id})\"\n    conn.execute(query)\n    conn.close()\n    \n    # Redirect to homepage\n    return flask.redirect(\"/\")\nif __name__ == '__main__':\n    app.run(debug=True)\n```"}]}
{"dataset": "code_high", "id": "code_high_646", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that sorts its arguments in descending order.\n\n### Input:\nnums = [4, 8, 10, 3, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_descending(*args):\n    args = list(args)\n    for i in range(len(args)-1):\n        for j in range(i+1, len(args)):\n            if args[i] < args[j]:\n                args[i], args[j] = args[j], args[i]\n    return args\n```"}]}
{"dataset": "code_high", "id": "code_high_647", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nExtend the following code to ensure that the array of numbers is sorted using insertion sort.\n\n### Input:\narr = [9, 5, 7, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertionSort(arr): \n    for i in range(1, len(arr)): \n        temp = arr[i] \n        j = i - 1\n        while j >= 0 and temp < arr[j]: \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = temp\n```"}]}
{"dataset": "code_high", "id": "code_high_648", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm for sorting data in ascending order using selection sort.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef selection_sort(arr):\n    for i in range(len(arr)):\n        min_index = i\n        for j in range(i+1, len(arr)):\n            if arr[min_index] > arr[j]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n```"}]}
{"dataset": "code_high", "id": "code_high_649", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a tree, write a function that finds the deepest node in the tree.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef findDeepestNode(root):\n    if root is None:\n        return None\n    queue = []\n    queue.append(root)\n    while len(queue) > 0:\n        res = queue[0]\n        queue.pop()\n        if res.left is not None:\n            queue.append(res.left)\n        if res.right is not None:\n            queue.append(res.right)\n    return res\n```"}]}
{"dataset": "code_high", "id": "code_high_650", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a gradient descent algorithm to optimize a cost function.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef gradient_descent(cost_function, theta, eta, tolerance):\n    cost = cost_function(theta)\n    diff = tolerance + 1\n    while diff > tolerance:\n        theta_updated = theta\n        for i in range(len(theta)):\n            theta[i] = theta[i] - eta * cost_function.gradient_wrt_theta(theta, i)\n            diff = sum((theta_updated[i] - theta[i])**2 for i in range(len(theta)))\n    return theta\n```"}]}
{"dataset": "code_high", "id": "code_high_651", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUpdate the given code to generate the correct output\n\n### Input:\ndef func(x, n):\n    s = 0\n    for i in range (n):\n        s += (x**i)\n    return s\n\nOutput: The sum of series x^1 + x^2 + x^3 + ... + x^n is\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef func(x, n):\n    s = 0\n    for i in range (n):\n        s += (x**i)\n    return s\ndef generateSumString(x, n):\n    result = \"The sum of series \"\n    for i in range(1, n+1):\n        result += x + \"^\" + str(i)\n        if(i != n):\n            result += \" + \"\n        else:\n            result += \" is\"\n    return result\ndef main():\n   x = 4\n   n = 5 \n   print(generateSumString(x, n), func(x,n))\nmain()\n```"}]}
{"dataset": "code_high", "id": "code_high_652", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code to print out the nth Fibonacci number.\n\n### Input:\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n==1: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2) \nprint(Fibonacci(n))\n```"}]}
{"dataset": "code_high", "id": "code_high_653", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm in Python to determine whether two strings are anagrams.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_anagram(string1, string2):\n    # Create a dictionaries for strings\n    string1_dict = {}\n    string2_dict = {}\n  \n    # Add the chars from each string to the dictionaries\n    for char in string1:\n        if char not in string1_dict:\n            string1_dict[char] = 1\n        else:\n            string1_dict[char] += 1\n    \n    for char in string2:\n        if char not in string2_dict:\n            string2_dict[char] = 1\n        else:\n            string2_dict[char] += 1\n    \n    # Check if the dictionaries have the same entries\n    for key in string1_dict:\n        if key not in string2_dict:\n            return False\n        elif string1_dict[key] != string2_dict[key]:\n            return False\n    \n    return True\n  \n# Test the algorithm\nstring1 = \"listen\"\nstring2 = \"silent\"\nif(is_anagram(string1, string2)):\n    print(\"The strings are anagrams\")\nelse:\n    print(\"The strings are not anagrams\")\n```"}]}
{"dataset": "code_high", "id": "code_high_654", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to convert a Roman numeral to an integer.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef roman_to_integer(numeral):\n  romans = {\"I\": 1,\n            \"V\": 5,\n            \"X\": 10,\n            \"L\": 50,\n            \"C\": 100,\n            \"D\": 500,\n            \"M\": 1000\n            }\n  num = 0\n  i = 0\n  while i < len(numeral):\n    if i+1 < len(numeral):\n      if romans[numeral[i]] >= romans[numeral[i+1]]:\n        num = num + romans[numeral[i]]\n      else :\n        num = num + romans[numeral[i+1]] - romans[numeral[i]]\n        i+=1\n    else:\n      num = num + romans[numeral[i]]\n    i+=1\n  return num\n```"}]}
{"dataset": "code_high", "id": "code_high_655", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the product of two matrices.\n\n### Input:\nA [[2, 4], [3, 7]]\nB [[9, 2], [7, 1]]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Python Program to calculate the product of two matrices \nA = [[2, 4], [3, 7]] \nB = [[9, 2], [7, 1]] \n  \n# function to calculate the product of two matrices \ndef multiplyMatrix(A, B): \n  \n    rowsA = len(A) \n    colsA = len(A[0]) \n    rowsB = len(B) \n    colsB = len(B[0]) \n  \n    if colsA != rowsB: \n        print(\"Cannot multiply the two matrices. Incorrect dimensions.\") \n        return\n  \n    # Create an empty product matrix C[rowA][colB] \n    C = [[0 for row in range(colsB)] for col in range(rowsA)] \n  \n    # Multiply and fill in the product matrix \n    for i in range(rowsA): \n        for j in range(colsB): \n            for k in range(colsA): \n                  C[i][j] += A[i][k] * B[k][j] \n  \n    return C \n  \n  \n# Print the product \nresult = multiplyMatrix(A, B) \nfor r in result: \n    print(r)\n```"}]}
{"dataset": "code_high", "id": "code_high_656", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to format a given phone number \u201c(123) 456-7890\u201d and output a string with canonical format of \u201c+11234567890\u201d.\n\n### Input:\nPhone number: (123) 456-7890\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef format_phone_number(number):\n    parts = number.split('-')\n    digits = []\n    for part in parts:\n        for char in part:\n            if char.isdigit():\n                digits.append(char)\n    return '+1' + ''.join(digits)\nif __name__ == '__main__':\n    number = '(123) 456-7890'\n    canon_number = format_phone_number(number)\n    print(canon_number)\n```"}]}
{"dataset": "code_high", "id": "code_high_657", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCode a script that prints out the first n elements of the Fibonacci sequence.\n\n### Input:\nn = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    fibList = [0, 1] \n    \n    if n <= 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        print(fibList[0]) \n    elif n == 2: \n        print(fibList) \n    else: \n        temp = fibList[0] + fibList[1] \n        while len(fibList) < n: \n            fibList.append(temp) \n            temp = fibList[len(fibList)-1] +   fibList[len(fibList)-2] \n      \n    return fibList \n  \nprint(Fibonacci(8))\n```"}]}
{"dataset": "code_high", "id": "code_high_658", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the previous code so that it is now optimized for time complexity?\n\n### Input:\ndef quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        less = [i for i in arr[1:] if i <= pivot]\n        greater = [i for i in arr[1:] if i > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quick_sort(arr):\n    if len(arr) < 2:\n        return arr\n    else:\n        pivot = arr[0]\n        i = 1\n        for j in range(1, len(arr)):\n            if arr[j] < pivot:\n                arr[i], arr[j] = arr[j], arr[i]\n                i = i + 1\n        arr[0], arr[i-1] = arr[i-1], arr[0]\n        left = quick_sort(arr[:i-1])\n        right = quick_sort(arr[i:])\n        return left + [arr[i-1]] + right\n```"}]}
{"dataset": "code_high", "id": "code_high_659", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method to find all valid IP addresses that can be formed using a given string.\n\n### Input:\nstring = \"25525511135\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_all_valid_ip_addresses(string):\n    valid_ips = []\n    for i in range(1,4):\n        for j in range(1,4):\n            for k in range(1,4):\n                if i+j+k == len(string):\n                    ip_string = string[:i]+\".\"+string[i:i+j]+\".\"+string[i+j:i+j+k]+\".\"+string[i+j+k:]\n                    if is_valid_ip_address(ip_string):\n                        valid_ips.append(ip_string)\n    return valid_ips\ndef is_valid_ip_address(ip_string):\n    nums = ip_string.split(\".\")\n    for num in nums:\n        if (int(num) < 0 or int(num) > 255):\n            return False\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_660", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program that prints all the prime numbers between 0 and n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_numbers(n): \n    primes = [] \n    for num in range(2, n+1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n        if is_prime: \n            primes.append(num) \n    return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_661", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to find the longest continuous increasing subarray.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longestIncreasingSubarray(arr):\n    n = len(arr)\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n): \n     \n        #if current element is greater than its previous element \n        if (arr[i] > arr[i-1]):\n            curr_len += 1\n        else:\n            if (curr_len > max_len):\n                max_len = curr_len\n            curr_len = 1\n    #Compare the length of the last \n    #subarray with max_len and \n    #update max_len if needed \n    if (curr_len > max_len):\n        max_len = curr_len \n    \n    return max_len\n```"}]}
{"dataset": "code_high", "id": "code_high_662", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a binary search tree and a target value, write a python function to search for the closest node value to the target.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef closestInBST(root, target):\n  res = root.val\n  while root:\n    if root.val == target:\n      return root.val\n    if abs(root.val-target) < abs(res-target):\n      res = root.val\n    if target < root.val:\n      root = root.left\n    else:\n      root = root.right\n  return res\n```"}]}
{"dataset": "code_high", "id": "code_high_663", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to move all zeros in an array to the end.\n\n### Input:\n[1, 2, 0, 3, 4, 0, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef moveZeroes(nums):\n    zeros = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeros += 1\n        else:\n            nums[i-zeros] = nums[i]\n    nums[len(nums)-zeros:] = [0] * zeros\n```"}]}
{"dataset": "code_high", "id": "code_high_664", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digits. Add the two numbers and return the sum as a linked list.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Solution:\n    def addTwoNumbers(self, l1, l2):\n        # Initialize current, previous and \n        # next pointers \n        curr1 = l1\n        curr2 = l2\n        head = None\n        prev = None\n        \n        carry = 0\n        while curr1 != None or curr2 != None or carry != 0:\n            val1 = 0\n            if curr1 != None:\n                val1 = curr1.val\n                curr1 = curr1.next\n            \n            val2 = 0\n            if curr2 != None:\n                val2 = curr2.val\n                curr2 = curr2.next\n                \n            val = val1 + val2 + carry\n            carry = val // 10\n            temp = ListNode(val%10)\n            if prev == None:\n                head = temp\n            else:\n                prev.next = temp\n            \n            prev = temp\n        return head\n```"}]}
{"dataset": "code_high", "id": "code_high_665", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a program to compare two sorted lists and returning list with the common elements.\n\n### Input:\nlist_one=[5, 10, 15, 20, 25]\nlist_two=[15, 17, 20, 22, 25, 27]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compare_list(list_one, list_two):\n    common_list = []\n    i, j = 0, 0\n    while (i < len(list_one) and j < len(list_two)):\n        if list_one[i] == list_two[j]:\n            common_list.append(list_one[i])\n            i += 1\n            j += 1\n        elif list_one[i] < list_two[j]:\n            i += 1\n        else:\n            j += 1\n    return common_list\n```"}]}
{"dataset": "code_high", "id": "code_high_666", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm for a given array in Python.\n\n### Input:\n[3, 2, 1, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\nsorted_array = [1, 2, 3, 4]\ndef SortArray(array):\n    for i in range(len(array)):\n        for j in range(len(array) - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n    return array\nsorted_array = SortArray(array)\n```"}]}
{"dataset": "code_high", "id": "code_high_667", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a code to sort a list in ascending or descending order.\n\n### Input:\ngivenList: [5, -3, 2, 4, 0], sortOrder: \"ascending\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_list(givenList, sortOrder): \n    for i in range(len(givenList)): \n        for j in range(i + 1, len(givenList)):\n            if sortOrder == \"ascending\":    \n                if givenList[i] > givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i] \n            elif sortOrder == \"descending\":    \n                if givenList[i] < givenList[j]:\n                    givenList[i], givenList[j] = givenList[j], givenList[i]\n    return givenList\n```"}]}
{"dataset": "code_high", "id": "code_high_668", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find all the prime numbers below a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_primes(n): \n  primes = [] \n  for num in range(2, n+1): \n    is_prime = True     \n    for div in range(2, n): \n      if (num % div == 0): \n        is_prime = False      \n    if is_prime: \n      primes.append(num) \n  return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_669", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nNow write a function to generate all the factorial numbers from 1 to n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_factorials(n):\n    factorials = [1]\n    for num in range(1,n+1):\n        if num == 1:\n            factorials.append(1)\n        else:\n            factorials.append(factorials[-1]*num)\n    return factorials\n```"}]}
{"dataset": "code_high", "id": "code_high_670", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a Python script that takes an array of integers and finds the median.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_median(arr): \n\tarr.sort() \n\tif len(arr) % 2 != 0: \n\t\treturn arr[len(arr)//2] \n\treturn (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2\n```"}]}
{"dataset": "code_high", "id": "code_high_671", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate code that, given a string, returns the longest permutation of the same character\n\n### Input:\nstr = \"abcccdef\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_consecutive_character(str):\n\t# Store character, length of longest permutation, and current length\n    max_char = str[0]\n    max_length = 1\n    cur_length = 1\n    \n    # Iterate over the string\n    for i in range(1, len(str)):\n        # If the characters are the same\n        if str[i] == str[i-1]:\n            cur_length += 1\n            \n            # Check if the current permutation is longest\n            if cur_length > max_length:\n                max_char = str[i]\n                max_length = cur_length\n        # Reset count if character changes\n        else: \n            cur_length = 1\n    \n    return max_char, max_length\n```"}]}
{"dataset": "code_high", "id": "code_high_672", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that returns an array of the three most common elements in an array.\n\n### Input:\nlst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef three_most_common(lst):\n    \"\"\"This function takes in an array and returns an array of the three most common elements.\"\"\"\n    lst_len = len(lst)\n    lst_dic = dict()\n \n    for n in lst:\n        if n in lst_dic:\n            lst_dic[n] += 1\n        else:\n            lst_dic[n] = 1\n \n    max_val = 0\n    max_key = 0\n    sec_key = 0\n    last_key = 0\n \n    for key, val in lst_dic.items():\n        if val > max_val:\n            max_val = val\n            last_key = sec_key\n            sec_key = max_key\n            max_key = key\n        elif val > sec_key:\n            last_key = sec_key\n            sec_key = key\n        elif val > last_key:\n            last_key = key\n    return [max_key, sec_key, last_key]\n```"}]}
{"dataset": "code_high", "id": "code_high_673", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings, find the minimum number of operations required to convert one string to the other.\n\n### Input:\nString 1 = \"horse\"\nString 2 = \"ros\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_edit_distance(str1, str2):\n    len_str1 = len(str1)\n    len_str2 = len(str2)\n    matrix = [[0] * (len_str2+1) for _ in range(len_str1+1)]\n    for i in range(len_str1+1):\n        matrix[i][0] = i\n    for j in range(len_str2+1):\n        matrix[0][j] = j\n    for i in range(1, len_str1+1):\n        for j in range(1, len_str2+1):\n            if str1[i-1] == str2[j-1]:\n                matrix[i][j] = matrix[i-1][j-1]\n            else:\n                matrix[i][j] = min(matrix[i-1][j]+1, matrix[i][j-1]+1, matrix[i-1][j-1]+1)\n    return matrix[len_str1][len_str2]\n```"}]}
{"dataset": "code_high", "id": "code_high_674", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the linear regression line for the following data.\n\n### Input:\nX: [1, 2, 3, 4, 5]\nY: [6, 8, 10, 11, 12]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCalculate the linear regression line for the given data\n\"\"\"\nimport numpy as np\ndef linear_regression_line(X, Y):\n    mean_x = np.mean(X)\n    mean_y = np.mean(Y) \n    stdev_x = np.std(X)\n    stdev_y = np.std(Y)\n    numerator = 0\n    for x, y in zip(X, Y):\n        numerator += (x - mean_x) * (y - mean_y) \n    beta_1 = numerator/ (stdev_x * stdev_y)\n    beta_0 = mean_y - (beta_1 * mean_x)\n    \n    return (beta_1, beta_0)\nif __name__ == \"__main__\":\n   X = [1, 2, 3, 4, 5]\n   Y = [6, 8, 10, 11, 12]\n   print(\"Linear Regression Line: {}\".format(linear_regression_line(X, Y)))\n```"}]}
{"dataset": "code_high", "id": "code_high_675", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to implement Bubble Sort.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(arr): \n    n = len(arr) \n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Last i elements are already in place \n        for j in range(0, n-i-1): \n  \n            # traverse the array from 0 to n-i-1 \n            # Swap if the element found is greater \n            # than the next element \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j] \n  \n# Driver code to test above \narr = [64, 34, 25, 12, 22, 11, 90] \n  \nbubbleSort(arr) \n  \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i]),\n```"}]}
{"dataset": "code_high", "id": "code_high_676", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to create a list of all prime numbers between 2 and 100.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_primes(n): \n    prime_list = [2] \n    for number in range(2, n + 1): \n        is_prime = True\n        for k in range(2, number): \n            if number % k == 0: \n                is_prime = False \n        if is_prime: \n            prime_list.append(number) \n    return prime_list\n```"}]}
{"dataset": "code_high", "id": "code_high_677", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a permutation of characters in a string.\n\n### Input:\nstr = \"CAT\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutation(str):\n    if len(str) == 0: \n        return [''] \n    prev_list = permutation(str[1:len(str)]) \n    next_list = [] \n    for i in range(0,len(prev_list)): \n        for j in range(0,len(str)): \n            new_str = prev_list[i][0: j]+str[0]+prev_list[i][j: len(str)-1] \n            if new_str not in next_list: \n                next_list.append(new_str) \n    return next_list\n# Test\nstr = 'CAT'\nperm = permutation(str)\n# Output\nprint(perm)\n# ['CAT', 'CTA', 'ACT', 'ATC', 'TCA', 'TAC']\n```"}]}
{"dataset": "code_high", "id": "code_high_678", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to determine the most common element in an array\n\n### Input:\n[2, 3, 5, 3, 7, 2, 8, 1, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_common(arr):\n    counts = {}\n    for i in arr:\n        if i in counts:\n            counts[i] += 1\n        else:\n            counts[i] = 1\n    \n    max_count = 0\n    max_item = None\n    for item, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item\n```"}]}
{"dataset": "code_high", "id": "code_high_679", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompress a string using Huffman coding in Python.\n\n### Input:\nString: \"aaabbcc\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_freq_list(s): \n      \n    # dictionaries are efficient for such a task \n    freq_list = {} \n  \n    for char in s: \n        if char in freq_list.keys(): \n            freq_list[char] += 1\n        else: \n            freq_list[char] = 1\n  \n    return freq_list \n  \ndef create_huffman_tree(freq_list): \n  \n    # create a priority queue \n    # to pop two minimum element each time \n    priority_queue = [] \n    for key in freq_list.keys(): \n        node = Node(key, freq_list[key]) \n        heapq.heappush(priority_queue, node) \n  \n    while len(priority_queue) > 1: \n        left_node = heapq.heappop(priority_queue) \n        right_node = heapq.heappop(priority_queue) \n  \n        new_node = Node(None, \n              left_node.freq + right_node.freq, \n              left_node, \n              right_node) \n        heapq.heappush(priority_queue, new_node) \n  \n    huffman_tree = heapq.heappop(priority_queue) \n    return huffman_tree \n    \ndef compress_string(huffman_tree, symbols): \n  \n    # create a character-code dict\n    code_dict = {} \n    _generate_codes(huffman_tree, '', code_dict) \n  \n    # encode the string \n    encoded_str = '' \n    for char in symbols: \n        encoded_str += code_dict[char] \n  \n    return encoded_str\n```"}]}
{"dataset": "code_high", "id": "code_high_680", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the code provided so it prints the first 10 prime numbers.\n\n### Input:\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_prime(n): \n    if n == 1: \n        return False\n    for i in range(2, n): \n        if n % i == 0: \n            return False\n    return True\ndef print_primes():\n    count = 0\n    number = 2\n    while(count != 10):\n        if is_prime(number):\n            print(number)\n            count += 1\n        number += 1\nprint_primes()\n```"}]}
{"dataset": "code_high", "id": "code_high_681", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to return the element that appears most frequently in a list.\n\n### Input:\n[5,5,5,5,6,6,7,7,7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_most_frequent_element(arr):\n    d = {}\n    for num in arr:\n        if num in d: \n            d[num] += 1\n        else:\n            d[num] = 1\n    \n    max_freq = 0\n    most_frequent_element = None\n    for num in d:\n        if d[num] > max_freq:\n            max_freq = d[num]\n            most_frequent_element = num\n    return most_frequent_element\n```"}]}
{"dataset": "code_high", "id": "code_high_682", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of English words, find any word which is an anagram of another word in the same array.\n\n### Input:\n[\"listen\", \"pot\", \"part\", \"opt\", \"trap\", \"silent\", \"top\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nGiven an array of English words, find any word which is an anagram of another word in the same array.\n\"\"\"\ndef find_anagrams(words):\n    anagrams = [] \n    for i in range(len(words)): \n        for j in range(i+1, len(words)): \n            if (sorted(words[i]) == sorted(words[j])): \n                anagrams.append((words[i],words[j])) \n    return anagrams\nif __name__ == '__main__':\n    words = [\"listen\", \"pot\", \"part\", \"opt\", \"trap\", \"silent\", \"top\"]\n    print(find_anagrams(words))\n```"}]}
{"dataset": "code_high", "id": "code_high_683", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a web scraper in Python to fetch all the URLs from a given website.\n\n### Input:\nThe website URL is https://www.example.com\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\nimport requests\nurls = set()\n \ndef get_urls(url):\n    website = requests.get(url)\n    content = website.text\n    links = re.findall(r'<a .*?href=[\\'\"](.*?)[\\'\"].*?>', content)\n \n    for i in links:\n        if i.startswith(\"/\"):\n            base_url = url\n            i = base_url + i\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n        elif url in i:\n            if i in urls:\n                continue\n            urls.add(i)\n            get_urls(i)\n \nif __name__ == \"__main__\":\n    get_urls(\"https://www.example.com\")\n    for i in urls:\n        print(i)\n```"}]}
{"dataset": "code_high", "id": "code_high_684", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the input, write a function that prints out the Nth Fibonacci number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    # First Fibonacci number is 0 \n    elif n == 0: \n        return 0\n    # Second Fibonacci number is 1 \n    elif n == 1: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_685", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to find the median of a given list of numbers.\n\n### Input:\n[2, 5, 7, 4, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_median(list_of_numbers):\n    sorted_list = sorted(list_of_numbers)\n    length = len(sorted_list)\n    if length % 2 == 0:\n        median1 = sorted_list[length // 2]\n        median2 = sorted_list[(length // 2) - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = sorted_list[length // 2]\n    return median\n```"}]}
{"dataset": "code_high", "id": "code_high_686", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find all pairs of numbers in the given list whose sum is equal to the given number.\n\n### Input:\nnums = [1, 2, 3, 4, 5], sum = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_pairs(nums, sum):\n  result = []\n  for i in range(len(nums)):\n    for j in range(i+1, len(nums)):\n      if nums[i] + nums[j] == sum:\n        result.append((nums[i], nums[j]))\n  return result\nres = find_pairs(nums, sum)\nprint(res)\n# Output: [(2, 6), (3, 5)]\n```"}]}
{"dataset": "code_high", "id": "code_high_687", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a list of numbers, write a program to check if there exists a triplet in the list whose sum is equal to the given number.\n\n### Input:\nnums = [2, 7, 11, 15], target = 24\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef triplet_sum(nums, target):\n for i in range(len(nums) - 2):\n  for j in range(i+1, len(nums) - 1):\n   for k in range(j+1, len(nums)):\n    if nums[i] + nums[j] + nums[k] == target:\n     return True\n return False\n \nprint(triplet_sum(nums, target))\n```"}]}
{"dataset": "code_high", "id": "code_high_688", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code that prints out the following patterns:\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Pattern 1\nfor i in range(1, 10):\n    for j in range(1, i + 1):\n        print(\"*\", end=\" \")\n    print(\" \")\n# Pattern 2\nfor i in range(10, 0, -1):\n    for j in range(i, 0, -1):\n        print(\"*\", end=\" \")\n    print(\" \")\n```"}]}
{"dataset": "code_high", "id": "code_high_689", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to calculate the exponent of a given number x raised to power y.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef exponent(x,y): \n    if(y == 0): \n        return 1\n    elif (int(y % 2) == 0): \n        y = int(y / 2) \n        return exponent(x, y) * exponent(x, y) \n    else: \n        return (x * exponent(x, int(y / 2)) * exponent(x, int(y / 2))) \nexponent(5,3) # Output: 125\n```"}]}
{"dataset": "code_high", "id": "code_high_690", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate an algorithm that creates a Fibonacci sequence\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci_sequence(length): \n    fib_seq = [0, 1]\n    if length == 1:\n        return [0]\n    elif length == 2:\n        return fib_seq\n    else:\n        for i in range(2, length):\n            fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n        return fib_seq\nif __name__ == '__main__':\n    length = 7\n    print(Fibonacci_sequence(length))\n```"}]}
{"dataset": "code_high", "id": "code_high_691", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method to convert a given number to Roman numeral format.\n\n### Input:\nnum = 2020\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef int_to_roman(num):\n  roman_numerals = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n    1000: 'M'\n  }\n  result = ''\n  for n in sorted(roman_numerals.keys(), reverse=True):\n    count = num // n\n    result += roman_numerals[n] * count\n    num %= n\n  return result\nif __name__ == '__main__':\n  num = 2020\n  print(int_to_roman(num))\n```"}]}
{"dataset": "code_high", "id": "code_high_692", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\n### Input:\nA = 5 \nB = 7\nX = 31\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nFunction max_money: Computes the maximum amount of money X which can be obtained using two given coins of denomination A and B.\n\"\"\"\ndef max_money(A, B, X):\n    max_A = X // A # maximum coins A can be used\n    max_B = X // B # maximum coins B can be used\n    \n    # Try all possible combinations between coins of A and B\n    max_money = 0\n    for a in range(max_A + 1):\n        for b in range(max_B + 1):\n            money = a * A + b * B\n            if money <= X:\n                max_money = max(max_money, money)\n  \n    return max_money\nif __name__ == '__main__':\n    A = 5\n    B = 7\n    X = 31\n    print(max_money(A, B, X))\n```"}]}
{"dataset": "code_high", "id": "code_high_693", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm that takes two integers and returns the smallest common multiple of the two numbers.\n\n### Input:\nx = 12\ny = 24\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef smallest_common_multiple(x, y):\n  for i in range(1, y+1):\n    if (i % x == 0) and (i % y == 0):\n      return i\nif __name__ == '__main__':\n  x = 12\n  y = 24\n  print(smallest_common_multiple(x, y))\n```"}]}
{"dataset": "code_high", "id": "code_high_694", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate code that given two linked lists, determine if they intersect\n\n### Input:\nTwo linked lists: list1 = [3, 7, 8, 10] and list2 = [99, 1, 8, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef are_lists_intersect(list1, list2): \n  \n    # Set pointer to head node \n    temp1 = list1 \n    temp2 = list2 \n  \n    # Get lengths \n    list1_length = 0\n    list2_length = 0\n  \n    # Count length for each list \n    while (temp1): \n        list1_length += 1\n        temp1 = temp1.next\n  \n    while (temp2): \n        list2_length += 1\n        temp2 = temp2.next\n  \n    # Store longer list in tem1 \n    if list1_length > list2_length: \n        temp1 = list1 \n        temp2 = list2 \n    else: \n        temp1 = list2 \n        temp2 = list1 \n  \n    # Take difference to get number of nodes to \n    # traverse for longer list \n    diff = abs(list1_length - list2_length) \n  \n    # Move pointer for longer list to  \n    # difference node to get same position \n    # node in both list \n    for i in range(diff): \n        temp1 = temp1.next\n  \n    # Move all pointer together till they meet \n    while(temp1 and temp2): \n        if (temp1 == temp2): \n            return True\n  \n        temp1 = temp1.next\n        temp2 = temp2.next\n  \n    # Return false if no common node found \n    return False\n```"}]}
{"dataset": "code_high", "id": "code_high_695", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a computer algorithm to determine the validity of a sudoku puzzle\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_valid_sudoku(puzzle): \n  size = len(puzzle) \n  for row in range(len(puzzle)): \n    seen = set() \n    for col in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  for col in range(3): \n    seen = set() \n    for row in range(size): \n      number = puzzle[row][col] \n      if number != 0: \n        if number in seen: \n          return False \n        seen.add(number) \n  # and so on \n  return True\n```"}]}
{"dataset": "code_high", "id": "code_high_696", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to multiply two matrices, assuming the two matrices can be multiplied.\n\n### Input:\nA = [[1, 2], [3, 4]] \nB = [[5, 6], [7, 8]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef multiply_matrices(A, B):\n    if len(A[0]) != len(B):\n        raise ValueError(\"Matrices cannot be multiplied\")\n    rows_A = len(A)\n    columns_A = len(A[0])\n    rows_B = len(B)\n    columns_B = len(B[0])\n    result = [[0 for column in range(columns_B)] for row in range(rows_A)]\n    for row in range(rows_A):\n        for column in range(columns_B):\n            for k in range(columns_A):\n                result[row][column] += A[row][k] * B[k][column]\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_697", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nParse a given expression tree to evaluate the result\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef evaluate(root):\n    # empty tree\n    if root is None:\n        return 0\n    # leaf node\n    if root.left is None and root.right is None:\n        return int(root.data)\n    # evaluate left tree\n    left_sum = evaluate(root.left)\n \n    # evaluate right tree\n    right_sum = evaluate(root.right)\n \n    # check which operation to apply\n    if root.data == '+':\n        return left_sum + right_sum\n \n    elif root.data == '-':\n        return left_sum - right_sum\n \n    elif root.data == '*':\n        return left_sum * right_sum\n \n    else:\n        return left_sum / right_sum\n```"}]}
{"dataset": "code_high", "id": "code_high_698", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a backtracking algorithm to solve a sudoku puzzle.\n\n### Input:\n[\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\n    [0, 4, 9, 2, 0, 6, 0, 0, 7]\n]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef solve(bo):\n    find = find_empty(bo)\n    if not find:\n        return True\n    else:\n        row, col = find\n    for i in range(1,10):\n        if valid(bo, i, (row, col)):\n            bo[row][col] = i\n            if solve(bo):\n                return True\n            bo[row][col] = 0\n    return False\ndef valid(bo, num, pos):\n    # Check row\n    for i in range(len(bo[0])):\n        if bo[pos[0]][i] == num and pos[1] != i:\n            return False\n    # Check column\n    for i in range(len(bo)):\n        if bo[i][pos[1]] == num and pos[0] != i:\n            return False\n    # Check box\n    box_x = pos[1] // 3\n    box_y = pos[0] // 3\n    for i in range(box_y*3, box_y*3 + 3):\n        for j in range(box_x * 3, box_x*3 + 3):\n            if bo[i][j] == num and (i,j) != pos:\n                return False\n    return True\ndef find_empty(bo):\n    for i in range(len(bo)):\n        for j in range(len(bo[0])):\n            if bo[i][j] == 0:\n                return (i, j)  # row, col\nprint(solve([\n    [7, 8, 0, 4, 0, 0, 1, 2, 0],\n    [6, 0, 0, 0, 7, 5, 0, 0, 9],\n    [0, 0, 0, 6, 0, 1, 0, 7, 8],\n    [0, 0, 7, 0, 4, 0, 2, 6, 0],\n    [0, 0, 1, 0, 5, 0, 9, 3, 0],\n    [9, 0, 4, 0, 6, 0, 0, 0, 5],\n    [0, 7, 0, 3, 0, 0, 0, 1, 2],\n    [1, 2, 0, 0, 0, 7, 4, 0, 0],\n    [0, 4, 9, 2, 0, 6, 0, 0, 7]\n]))\n```"}]}
{"dataset": "code_high", "id": "code_high_699", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function that takes two strings and checks whether they are anagrams.\n\n### Input:\nstr1 = \"cinema\"\nstr2 = \"iceman\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef anagram_checker(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    else:\n        char_list1 = [0] * 26\n        for char in str1:\n            char_list1[ord(char)-97] += 1\n        for char in str2:\n            if char_list1[ord(char)-97] == 0:\n                return False\n            char_list1[ord(char)-97] -= 1\n        return True\n```"}]}
{"dataset": "code_high", "id": "code_high_700", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to find the largest common factor in two numbers.\n\n### Input:\n24 and 48\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef hcf(x, y): \n  \n    if x > y: \n        smaller = y \n    else: \n        smaller = x \n    \n    for i in range(1, smaller+1): \n        if((x % i == 0) and (y % i == 0)): \n            hcf = i \n            \n    return hcf \nx = 24\ny = 48\nprint (\"The H.C.F. of 24 and 48 is\", hcf(x, y))\n```"}]}
{"dataset": "code_high", "id": "code_high_701", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform a binary search on the following list of integers: [0, 1, 2, 3, 4, 5, 6, 7, 8].\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(nums, target):\n  low = 0\n  high = len(nums) - 1\n  while low <= high:\n    mid = (low + high) // 2\n    if target == nums[mid]:\n      return mid\n    elif target < nums[mid]:\n      high = mid - 1\n    else:\n      low = mid + 1\n  \n  return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_702", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to calculate prime numbers between 0 to 50.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Program to calculate prime numbers between 0 to 50\n# list of prime numbers\nprime_list = []\nfor num in range(0,51):  \n   # prime numbers are greater than 1  \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_list.append(num)\nprint(prime_list)\n```"}]}
{"dataset": "code_high", "id": "code_high_703", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRewrite the above function in Python to use binary search algorithm instead of linear search.\n\n### Input:\ndata = [7, 13, 11, 9, 12]\nsearch_num = 9\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(data, search_num):\n low = 0\n high = len(data) - 1\n while low <= high:\n  mid = (low + high)//2\n  if data[mid] == search_num:\n   return mid\n  elif data[mid] < search_num:\n   low = mid + 1\n  else:\n   high = mid - 1\n return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_704", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a sorting algorithm for the given list of numbers.\n\n### Input:\nsort_me = [10, 4, 1, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sorting_algorithm(sort_me):\n    len_sortme = len(sort_me)\n    for i in range(len_sortme):\n        for j in range(0, len_sortme-i-1):\n            if sort_me[j] > sort_me[j+1]:\n                sort_me[j], sort_me[j+1] = sort_me[j+1], sort_me[j]\n    return sort_me\n```"}]}
{"dataset": "code_high", "id": "code_high_705", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort an array of integers in ascending order by implementing a Bubble Sort algorithm.\n\n### Input:\nunsorted_list = [8, 5, 3, 1, 9, 6, 0, 7, 4, 2, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubble_sort(nums): \n  # Traverse through all array elements \n  for i in range(len(nums)): \n    # Last i elements are already in place \n    for j in range(0, len(nums)-i-1): \n      # traverse the array from 0 to n-i-1 \n      # Swap if the element found is greater \n      # than the next element \n      if nums[j] > nums[j+1] : \n        nums[j], nums[j+1] = nums[j+1], nums[j]\n# Print the sorted array \nif __name__ == '__main__': \n    bubble_sort(unsorted_list) \n    print (\"Sorted array is:\") \n    print(unsorted_list)\n```"}]}
{"dataset": "code_high", "id": "code_high_706", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to implement an LRU (Least Recently Used) cache.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.cache = {}\n        self.lru = list()\n           \n    # get an item from the cache and update its timestamp\n    def get(self, key):\n        if key in self.cache:\n            self.lru.remove(key)\n            self.lru.append(key)\n            return self.cache[key]\n        else:\n            return -1\n             \n    # add a new item to the cache, discard the least recently used item if cache is full \n    def put(self, key, value):\n        if len(self.cache) >= self.capacity:\n            self.cache.pop(self.lru[0])\n            self.lru.pop(0)\n        if key in self.cache: \n            self.lru.remove(key)\n        self.cache[key] = value\n        self.lru.append(key)\n```"}]}
{"dataset": "code_high", "id": "code_high_707", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing the array, sort it using insertion sort.\n\n### Input:\narr = [4, 2, 6, 7, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \narr = [4, 2, 6, 7, 1] \ninsertionSort(arr) \nprint (\"Sorted array is:\") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])\n```"}]}
{"dataset": "code_high", "id": "code_high_708", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to find all distinct permutations of a given list\n\n### Input:\n[1,2,3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permute(nums):\n    # base case when only one element in the list\n    if len(nums) == 1:\n        return [nums] \n  \n    permutations = []\n    for i in range(len(nums)): \n        m = nums[i] \n \n        # extract remaining list \n        remain = nums[:i] + nums[i+1:] \n  \n        # Iterate over remaining list and \n        # generate all permutations \n        for p in permute(remain): \n            permutations.append([m] + p) \n  \n    return permutations\n```"}]}
{"dataset": "code_high", "id": "code_high_709", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a matrix, write a program to traverse it spirally.\n\n### Input:\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef spiral_traverse(arr):\n res = []\n top_row, bottom_row = 0, len(arr) - 1\n left_col, right_col = 0, len(arr[0]) - 1\n \n while top_row <= bottom_row and left_col <= right_col:\n  for i in range(left_col, right_col + 1):\n   res.append(arr[top_row][i])\n  top_row += 1\n \n  for i in range(top_row, bottom_row + 1):\n   res.append(arr[i][right_col])\n  right_col -= 1\n \n  for i in range(right_col, left_col - 1, -1):\n   res.append(arr[bottom_row][i])\n  bottom_row -= 1\n \n  for i in range(bottom_row, top_row - 1, -1):\n   res.append(arr[i][left_col])\n  left_col += 1\n \n return res\nprint(spiral_traverse(matrix))\n```"}]}
{"dataset": "code_high", "id": "code_high_710", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function which detects overlapping dates from a given list.\n\n### Input:\ndates_list = [\n  (2018,1,1,2018,3,1),\n  (2018,12,1,2018,9,30),\n  (2018,2,15,2018,5,10)\n]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef detect_overlapping_dates(dates_list): \n  overlaps = set()\n  for i in range(len(dates_list)-1):\n    for j in range(i+1, len(dates_list)):\n      date1_start_year, date1_start_month, date1_start_day, date1_end_year, date1_end_month, date1_end_day = dates_list[i]\n      date2_start_year, date2_start_month, date2_start_day, date2_end_year, date2_end_month, date2_end_day = dates_list[j]\n      # check if the two dates overlap\n      if (date1_start_year <= date2_end_year and date2_start_year <= date1_end_year) and (date1_start_month <= date2_end_month and date2_start_month <= date1_end_month) and (date1_start_day <= date2_end_day and date2_start_day <= date1_end_day):\n        # if the two dates overlap, add to the overlapping set\n        overlaps.add(dates_list[i])\n        overlaps.add(dates_list[j])\n  \n  return list(overlaps)\n \ndates_list = [\n  (2018,1,1,2018,3,1),\n  (2018,12,1,2018,9,30),\n  (2018,2,15,2018,5,10)\n]\nprint(detect_overlapping_dates(dates_list))\n```"}]}
{"dataset": "code_high", "id": "code_high_711", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code to implement the Binary Search algorithm in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(arr, target):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = low + (high - low)//2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1  # not found\n```"}]}
{"dataset": "code_high", "id": "code_high_712", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program that reads a list of words and prints the most frequently used one.\n\n### Input:\n['apple', 'banana', 'orange', 'apple']\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nProgram to read a list of words and print the most frequently used one\nInput: List of words\nOutput: Most frequently used word\n\"\"\"\ndef most_freq_word(words): \n    # Create an empty dictionary \n    freq = {} \n  \n    # Iterate over the list of words \n    for word in words: \n        # Check if word is already present in the freq dictionary \n        if (word in freq): \n            #Increment the count of word \n            freq[word] += 1\n        else: \n            # Add it to the dictionary with a count of one \n            freq[word] = 1\n  \n    # Get the count of most frequent word \n    max_count = max(freq.values()) \n  \n    # Loop over words and return the most frequent one \n    for key, value in freq.items(): \n        if value == max_count: \n            return key \nif __name__ == '__main__': \n    # Input\n    words = ['apple', 'banana', 'orange', 'apple']\n    # Result\n    print(most_freq_word(words))\n```"}]}
{"dataset": "code_high", "id": "code_high_713", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a breadth-first search algorithm to find the shortest path between two nodes.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef BFS(graph, start, end):\n\t# Create an empty queue \n    queue = []\n    # Create a set to store visited nodes\n    visited = set()\n    # Enqueue the starting node\n    queue.append([start])\n    while queue:\n        # Get the first path and process it\n        path = queue.pop()\n        # Get the last node from the path\n        node = path[-1]\n        \n        if node == end:\n            return path\n        elif node not in visited:\n            # Create a list of neighbours\n            neighbours = graph[node]\n            # Go through all neighbours\n            for neighbour in neighbours:\n                # Create a new path with the neighbour\n                new_path = list(path)\n                new_path.append(neighbour)\n                # Add the new path to the queue\n                queue.append(new_path)\n            # Mark the node as visited\n            visited.add(node)\n    return None\n```"}]}
{"dataset": "code_high", "id": "code_high_714", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to find the most frequently occurring item in the list.\n\n### Input:\n[17, 25, 6, 30, 14, 28, 6, 20, 13, 25]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_frequent(data):\n    freq = {}\n    for x in data:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    max_freq = 0\n    for x in freq.values():\n        if x > max_freq:\n            max_freq = x\n    most_frequent_item = []\n    for x in freq.keys():\n        if freq[x] == max_freq:\n            most_frequent_item.append(x)\n    return most_frequent_item\ndata = [17, 25, 6, 30, 14, 28, 6, 20, 13, 25]\nprint(most_frequent(data))\n```"}]}
{"dataset": "code_high", "id": "code_high_715", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to perform insertion sorting\n\n### Input:\nlist = [5, 3, 8, 7, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertion_sort(list):\n    for i in range(1, len(list)):\n        key = list[i]\n        j = i -1\n        while j >=0 and list[j] > key:\n            list[j+1] = list[j]\n            j -= 1\n        list[j+1] = key\n    return list\n```"}]}
{"dataset": "code_high", "id": "code_high_716", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDecompose the following code into two different functions.\n\n### Input:\ndef calculateMinimumDifference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, abs(nums[x] - nums[x-1]))\n    return min_diff\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_diff(arr):\n    return abs(arr[0] - arr[1])\ndef calculate_minimum_difference(nums):\n    if len(nums) <= 1: return 0\n    min_diff = float('inf')\n    for x in range(1, len(nums)):\n        min_diff = min(min_diff, calculate_diff(nums[x-1:x+1]))\n    return min_diff\n```"}]}
{"dataset": "code_high", "id": "code_high_717", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to calculate the nth Fibonacci number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_718", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes in a number and returns all the prime factors.\n\n### Input:\nnum = 30\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_factorize(num):\n    '''This function takes in a number and returns all the prime factors.'''\n    primes = []\n    i = 2\n    while i * i <= num:\n        while num % i == 0:\n            primes.append(i)\n            num //= i\n        i += 1\n    if num > 1:\n        primes.append(num)\n    return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_719", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a code to find the longest sub-string in a string.\n\n### Input:\nstring = \"The quick brown fox jump over lazy dog\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_longest_substring(string):\n    # get the length of the string\n    length = len(string)\n     \n    # variable to store the longest substring length\n    longest_substring_length = 0\n     \n    # variable to store the longest substring\n    longest_substring = ''\n     \n    # loop through the string\n    for i in range(length):\n      tmp_str = ''\n      for j in range(i, length):\n        if string[j] not in tmp_str:\n          tmp_str += string[j]\n        else:\n            break\n      if len(tmp_str) > longest_substring_length:\n        longest_substring_length = len(tmp_str)\n        longest_substring = tmp_str\n    return longest_substring\nprint(find_longest_substring(string)) # 'brownfoxjump'\n```"}]}
{"dataset": "code_high", "id": "code_high_720", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nChange the following code to implement the Observer Design Pattern in Python.\n\n### Input:\nclass Publisher: \n    def __init__(self): \n        self.observers = [] \n  \n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            observer.notify(self, *args, **kwargs)\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Publisher: \n    def __init__(self): \n        self.observers = [] \n        self.state = None\n    \n    def getState(self): \n        return self.state \n    def setState(self, state): \n        self.state = state \n        self.notifyAll() \n    def add(self, observer): \n        if observer not in self.observers: \n            self.observers.append(observer) \n        else: \n            print('Failed to add: {}'.format(observer)) \n  \n    def remove(self): \n        self.observers.remove(observer) \n  \n    def notifyAll(self, *args, **kwargs): \n        for observer in self.observers: \n            if args and kwargs: \n                observer.notify(self, *args, **kwargs) \n            else: \n                observer.notify(self)\n```"}]}
{"dataset": "code_high", "id": "code_high_721", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a class in python to find the reverse of a number.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass ReverseNumber(): \n    def __init__(self): \n        pass\n    \n    def reverse_number(self, num): \n      \n        reverse = 0\n  \n        # Iterate over the given number \n        while(num > 0): \n            reminder = num % 10\n  \n            # Constructing the reverse number\n            reverse = (reverse * 10) + reminder \n  \n            # Floor division\n            num = num // 10\n  \n        return reverse \n  \n# Driver Code \nif __name__ == '__main__': \n    rev = ReverseNumber()\n    print(rev.reverse_number(123))\n```"}]}
{"dataset": "code_high", "id": "code_high_722", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to determine if two strings are anagrams of each other\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef are_anagrams(str1, str2):\n    if len(str1) != len(str2):\n        return False\n    freq1 = {}\n    freq2 = {}\n    for char in str1:\n        if char not in freq1:\n            freq1[char] = 1\n        else:\n            freq1[char] += 1\n    for char in str2:\n        if char not in freq2:\n            freq2[char] = 1\n        else:\n            freq2[char] += 1\n    for key in freq1:\n        if key not in freq2 or freq2[key] != freq1[key]:\n            return False\n    \n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_723", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCompress a given string by counting the occurrences of each character.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef compress_string(s):\n    l = len(s) \n    \n    # If operations length is 0 \n    if l == 0: \n        return \"\" \n  \n    # Erroneous characters in the  \n    #original string are ignored. \n    if l == 1 or s[0] == s[1]: \n        return s[0] + str(1) \n    \n    # Initialize the variable \n    count = 1\n    s1 = \"\" \n     \n    # Here i is the indexing variable \n    i = 1\n    while i < l: \n            # If the current character matches with the next one \n            if (s[i] == s[i - 1]): \n                count += 1\n            else: \n                s1 = s1 + s[i - 1] + str(count) \n                count = 1\n            i += 1\n    s1 = s1 + s[i - 1] + str(count)\n    \n    return s1 \n  \ns = \"geeksforgeeks\"\nprint(compress_string(s))\nOutput: g1e2k2s2f1o1r1g1e1e1k1s1\n```"}]}
{"dataset": "code_high", "id": "code_high_724", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompare two strings and count the number of characters that are different.\n\n### Input:\nstr1 = 'hello'\nstr2 = 'hallo'\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef countTextDifference(str1, str2):  \n    # store length of both strings  \n    len1 = len(str1)   \n    len2 = len(str2)   \n  \n    # store the number of characters  \n    # which are different  \n    count = 0 \n  \n    # compare and count the number  \n    # of characters which are different \n    for i in range(0, len1):      \n        if (i >= len2): \n            count += (len1 - len2) \n            break\n        if (str1[i] == str2[i]):  \n            continue\n        else:      \n            count += 1\n    \n    # return different character count \n    return count\n```"}]}
{"dataset": "code_high", "id": "code_high_725", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the code to produce the output of the following matrix multiplication\n\n### Input:\nX = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]\n\n### Response:"}, {"role": "assistant", "content": "```python\nX = [[2, 3, 9],\n     [8, 7, 6],\n     [1, 6, 4]]\nY = [[9, 4, 5],\n     [7, 3, 3],\n     [2, 1, 5]]\ndef mat_mult(X, Y):\n    result = [[0, 0, 0],\n              [0, 0, 0],\n              [0, 0, 0]]\n    for i in range(len(X)):\n        for j in range(len(Y[0])):\n            for k in range(len(Y)):\n                result[i][j] += X[i][k] * Y[k][j]\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_726", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the longest substring of a string without repeating characters\n\n### Input:\nstring=\"abcabcbb\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longestSubstring(string): \n    start_index = max_length = 0\n    visited = {} \n  \n    # traverse through the string  \n    for i in range(len(string)):  \n        if string[i] in visited and start_index <= visited[string[i]]: \n            start_index = visited[string[i]] + 1\n        else: \n            max_length = max(max_length, i - start_index + 1) \n  \n        visited[string[i]] = i \n  \n    return max_length\n```"}]}
{"dataset": "code_high", "id": "code_high_727", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a tree structure using the provided Python dictionary.\n\n### Input:\ndict = {\n  1: {\n    'parent': 0,\n    'children': [2, 3, 4]\n  },\n  2: {\n    'parent': 1,\n    'children': []\n  },\n  3: {\n    'parent': 1,\n    'children': [5, 6]\n  },\n  4: {\n    'parent': 1,\n    'children': [7]\n  },\n  5: {\n    'parent': 3,\n    'children': []\n  },\n  6: {\n    'parent': 3,\n    'children': []\n  }\n  7: {\n    'parent': 4,\n    'children': []\n  }\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a tree structure using the Python dictionary provided\n\"\"\"\nclass TreeNode:\n    def __init__(self, value=None, parent=None, children=None):\n        self.value = value\n        self.parent = parent\n        self.children = children if children is not None else []\n    \n    def __repr__(self):\n        return f\"TreeNode({self.value}, {self.parent.value}, {[c.value for c in self.children]})\"\n    \n    def __str__(self):\n        return self.__repr__()\ndef create_tree_structure(data):\n    tree = dict()\n    for k, v in data.items():\n        parent = v[\"parent\"]\n        tree[k] = TreeNode(value=k, parent=tree.get(parent), children=list())\n        if parent in tree:\n            tree[parent].children.append(tree[k])\n    return tree\nif __name__ == \"__main__\":\n    dict = {\n        1: {\n            'parent': 0,\n            'children': [2, 3, 4]\n        },\n        2: {\n            'parent': 1,\n            'children': []\n        },\n        3: {\n            'parent': 1,\n            'children': [5, 6]\n        },\n        4: {\n            'parent': 1,\n            'children': [7]\n        },\n        5: {\n            'parent': 3,\n            'children': []\n        },\n        6: {\n            'parent': 3,\n            'children': []\n        },\n        7: {\n            'parent': 4,\n            'children': []\n        }\n    }\n    tree = create_tree_structure(dict)\n    print(tree)\n```"}]}
{"dataset": "code_high", "id": "code_high_728", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of integers and an integer, return true if any two integers in the array add up to the given integer.\n\n### Input:\narr = [1, 2, 3, 4]\nsum = 7\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef test_sum(arr, sum): \n    for i in range(len(arr)-1): \n        for j in range(i+1, len(arr)): \n            if arr[i] + arr[j] == sum: \n                return True \n    return False\nif __name__ == '__main__':\n    arr = [1, 2, 3, 4] \n    sum = 7\n    result = test_sum(arr, sum) \n    if result: \n        print(\"Array has two elements with the given sum\") \n    else: \n        print(\"Array doesn't have two elements with the given sum\")\n```"}]}
{"dataset": "code_high", "id": "code_high_729", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the cosine similarity of two vectors.\n\n### Input:\nVectors: [2, 3] and [4, -5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef cosine_similarity(v1, v2):\n    dot = 0\n    mag1 = 0\n    mag2 = 0\n    for a, b in zip(v1, v2):\n        dot += a*b\n        mag1 += a**2\n        mag2 += b**2\n    return dot/(mag1**0.5 * mag2**0.5)\nv1 = [2, 3]\nv2 = [4, -5]\ncosine_sim = cosine_similarity(v1, v2)\nprint(cosine_sim)\n```"}]}
{"dataset": "code_high", "id": "code_high_730", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to identify all palindromes in the given string.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_palindromes(string):\n    result = []\n    for i in range(len(string)):\n        for j in range(i+2,len(string)+1):\n            if string[i:j] == string[j-1:i-1:-1]:\n                result.append(string[i:j])\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_731", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a set of points and an origin point, calculate the distance between the origin point and each point in the set.\n\n### Input:\n[(1,1),(4,4),(3,3)] (0,0)\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nGiven a set of points and an origin point, calculate the distance between the origin point and each point in the set\n\"\"\"\nimport math \ndef points_distance(points, origin):\n    distances = []\n    for point in points:\n        distances.append(math.sqrt((point[0]-origin[0])**2 + (point[1]-origin[1])**2))\n    return distances\nif __name__ == '__main__':\n    print(points_distance([(1,1),(4,4),(3,3)], (0,0))) # [1.4142135623730951, 5.65685424949238, 4.242640687119285]\n```"}]}
{"dataset": "code_high", "id": "code_high_732", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImprove the following implementation of a binary search algorithm.\n\n### Input:\ndef binary_search(array, target):\n  low = 0\n  high = len(array)-1\n  while low <= high:\n    mid = (low+high)//2\n    if array[mid] == target:\n      return mid\n    elif array[mid] < target:\n      low = mid+1\n    else:\n      high = mid-1\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(array, target):\n  low = 0\n  high = len(array)-1\n  while low <= high:\n    mid = (low+high)//2\n    if array[mid] == target:\n      return mid\n    elif array[mid] < target:\n      low = mid+1\n    else:\n      high = mid-1\n  return -1 # target not found\n```"}]}
{"dataset": "code_high", "id": "code_high_733", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a function to detect if a binary tree is balanced\n\n### Response:"}, {"role": "assistant", "content": "```python\n# A utility function to get the height of the tree \ndef height(node): \n  \n    # Base Case : Tree is empty \n    if node is None: \n        return 0 ; \n  \n    # If tree is not empty then height = 1 + max of left \n    # height and right heights  \n    return 1 + max(height(node.left) ,height(node.right)) \n  \n  \n# Function to get the difference of \n# height of left and right subtrees \ndef getHeightDiff(node): \n    if node is None: \n        return 0\n  \n    # Get the height difference of left and right subtrees \n    heightDiff = height(node.left) - height(node.right) \n  \n    # Get the maximum of left and right subtree \n    # height differences \n    return max(heightDiff, getHeightDiff(node.left) ,getHeightDiff(node.right)) \n  \n# The main function that checks if binary tree is \n# height-balanced or not \ndef isBalanced(root): \n    if root is None: \n        return 1\n  \n    # Get the height difference \n    heightDiff = getHeightDiff(root) \n  \n    # If heightDiff is more than 1 then tree is \n    # not balanced so return 0 \n    if (abs(heightDiff) > 1): \n        return 0\n    else: \n        # tree is balanced return 1 \n        return 1\n```"}]}
{"dataset": "code_high", "id": "code_high_734", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class in Python which has a method to sort an array of numbers in increasing order.\n\n### Input:\nnums = [4, 3, 1, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass ArraySort:\n    def __init__(self, nums):\n        self.nums = nums\n    \n    def sort(self):\n        for i in range(len(self.nums)):\n            for j in range(i+1, len(self.nums)):\n                if self.nums[i] > self.nums[j]:\n                    temp = self.nums[i]\n                    self.nums[i] = self.nums[j]\n                    self.nums[j] = temp\n        return self.nums\n```"}]}
{"dataset": "code_high", "id": "code_high_735", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a number n, generate a list of tuples of the form (x,n/x) where x divides n.\n\n### Input:\nn = 30\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef generate_tuples(n):\n    tuples=[]\n    for x in range (1,n+1):\n        if n % x == 0:\n            tuples.append((x,int(n/x)))\n    return tuples\n```"}]}
{"dataset": "code_high", "id": "code_high_736", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to print out all prime numbers below 100.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Function to print prime numbers \ndef prime_numbers_below_100(): \n    for num in range(2, 100): \n        prime = True\n        for i in range(2, num//2 + 1): \n            if num % i == 0: \n                prime = False\n                break\n        if prime: \n            print(num, end=\" \") \n  \nprint(\"Prime numbers below 100 are:\") \nprime_numbers_below_100()\n```"}]}
{"dataset": "code_high", "id": "code_high_737", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement selection sort to sort a list in non-decreasing order\n\n### Input:\nlist = [9, 5, 3, 1, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef selection_sort(list): \n    for i in range(len(list)): \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n        list[i], list[min_idx] = list[min_idx], list[i]\n    return list\n  \n# example  \nlist = [9, 5, 3, 1, 8]\nprint(selection_sort(list))\n```"}]}
{"dataset": "code_high", "id": "code_high_738", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to find the maximum subarray sum within the provided input array.\n\n### Input:\n[-2, 1, -3, 4, -1, 2, 1, -5, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_subarray_sum(arr):\n    max_sum = 0\n    curr_sum = 0\n    for x in arr:\n        curr_sum += x\n        if curr_sum < 0:\n            curr_sum = 0\n        elif curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\nif __name__ == '__main__':\n    arr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\n    print(max_subarray_sum(arr))\n```"}]}
{"dataset": "code_high", "id": "code_high_739", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to find the longest substring without repetition.\n\n### Input:\nstr = \"pwwkew\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_substring(str):\n    start = 0\n    max_length = 0\n    used_char = {}\n    for i, char in enumerate(str):\n        if char in used_char and start <= used_char[char]:\n            start = used_char[char] + 1\n        else:\n            max_length = max(max_length, i - start + 1)\n        used_char[char] = i\n    return max_length\n```"}]}
{"dataset": "code_high", "id": "code_high_740", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to add two linked lists of different sizes.\n\n### Input:\nlist1 = [2->4->3]\nlist2 = [5->6->4->1]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# adding two linked lists\nclass Node: \n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\ndef addTwoLists(first, second):\n    # defining current and prev variables\n    prev = None\n    carry = 0\n    temp = None\n    # looping until one list has all nodes added\n    while(first is not None or second is not None): \n        Node = Node() \t\t# Node data\n        Node.data = carry + (first.data if first else 0) + (second.data if second else 0) \n\t\t\n        # update carry\n        if Node.data >= 10: \n            Node.data = Node.data % 10\n            carry = 1\n        else: \n            carry = 0\n \n        temp = Node\n        # Move first, second pointers ahead\n        if first is not None: \n            first = first.next\n        if second is not None: \n            second = second.next\n        # Attach the previous node to the current node\n        if prev is not None: \n            prev.next = Node \n        prev = Node\n\t\t\n    if carry > 0: \n        temp.next = Node \n        temp.data = carry \n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_741", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to group a given set of numbers into a continuous range\n\n### Input:\nSet of numbers: [1, 3, 4, 6, 7, 8, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nFunction group_numbers: Groups a given set of numbers into a continuous range.\n\"\"\"\ndef group_numbers(nums):\n    # Initialize left and right pointers\n    l = 0\n    r = 1\n    # Initialize ranges list\n    ranges = []\n    \n    while r < len(nums):\n        # If the end of the range is not same as the \n        # start of the next range, append the current range \n        if nums[r - 1] + 1 != nums[r]:\n            ranges.append(str(nums[l]) + \"->\" + str(nums[r - 1]))\n            l = r\n        r += 1\n    # Append the last range\n    ranges.append(str(nums[l]) + '->' + str(nums[r - 1]))\n    return ranges\nif __name__ == '__main__':\n    nums = [1, 3, 4, 6, 7, 8, 10]\n    print(group_numbers(nums))\n```"}]}
{"dataset": "code_high", "id": "code_high_742", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that given two strings, returns a new string with the characters of the two strings alternating.\n\n### Input:\n('abcd', 'efgh')\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef alternating_strings(str1, str2):\n    result = \"\"\n    \n    for i in range(min(len(str1), len(str2))):\n        result += str1[i] + str2[i]\n    \n    # take care of the rest of the elements\n    if len(str1) > len(str2):\n        result += str1[len(str1)-1]\n    else:\n        result += str2[len(str2)-1]\n    \n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_743", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nIn a given list of integers, find the value that appears most frequently.\n\n### Input:\nnums = [2,2,2,2,3,4,5,6,6,7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_frequent(nums):\n    count = {}\n    for num in nums:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    max_count = 0\n    res = 0\n    for key, val in count.items():\n        if val > max_count:\n            res = key\n        max_count = max(max_count, val)\n    return res\n```"}]}
{"dataset": "code_high", "id": "code_high_744", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a script in Python to search a given string for a substring\n\n### Input:\nstring = \"Hello World!\"\nsubstring = \"llo\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef searchSubstring(string, substring): \n    results = [] \n    n = len(string) \n    m = len(substring) \n    for i in range(n - m + 1): \n        j = 0\n        while(j < m): \n            if(string[i + j] != substring[j]): \n                break\n            j += 1\n        if j == m: \n            results.append(i)\n  \n    print(results) \nstring = \"Hello World!\" \nsubstring = \"llo\"\nsearchSubstring(string, substring)\n```"}]}
{"dataset": "code_high", "id": "code_high_745", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nAlter the following given code so that it will implement the Bubble Sort Algorithm\n\n### Input:\ndef mySort(arr): \n\tn = len(arr) \n\n\tfor i in range(n-1): \n\t\tfor j in range(0, n-i-1): \n\t\t\tif arr[j] > arr[j+1] : \n\t\t\t\tarr[j], arr[j+1] = arr[j+1], arr[j]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef bubbleSort(arr):\n    n = len(arr) \n    for i in range(n): \n  \n        for j in range(0, n-i-1): \n  \n            if arr[j] > arr[j+1] : \n                arr[j], arr[j+1] = arr[j+1], arr[j]\n```"}]}
{"dataset": "code_high", "id": "code_high_746", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to create Fibonacci sequence in Python\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        return 0\n    elif n == 2: \n        return 1\n    else: \n        return Fibonacci(n-1) + Fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_747", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a program to delete all nodes of a linked list at a given position.\n\n### Input:\n[3, 9, 1, 5], position to delete: 2\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Node class \nclass Node: \n\t\n\tdef __init__(self, data): \n\t\tself.data = data \n\t\tself.next = None\n# Linked List class \nclass LinkedList: \n\t\n\tdef __init__(self): \n\t\tself.head = None\n\t# function to add a node at the given position \n\tdef deleteNode(self, pos): \n\t\t# if list is empty \n\t\tif self.head == None: \n\t\t\treturn\n\t\t# store head node \n\t\ttemp = self.head \n\t\t# if head needs to be removed \n\t\tif pos == 0: \n\t\t\tself.head = temp.next\n\t\t\ttemp = None\n\t\t\treturn\n\t\t# find previous node of the node to be deleted \n\t\tfor i in range(pos -1 ): \n\t\t\ttemp = temp.next\n\t\t\tif temp is None: \n\t\t\t\tbreak\n\t\t# if position is more than number of nodes \n\t\tif temp is None: \n\t\t\treturn \n\t\tif temp.next is None: \n\t\t\treturn\n\t\t# Node temp.next is the node to be deleted \n\t\t# store pointer to the next of node to be deleted \n\t\tnext = temp.next.next\n\t\t# Unlink the node from linked list \n\t\ttemp.next = None\n\t\ttemp.next = next\n```"}]}
{"dataset": "code_high", "id": "code_high_748", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to sort a list of numbers from least to greatest.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_list(mylist):\n    for i in range(len(mylist)):\n        min_idx = i\n        for j in range(i+1, len(mylist)):\n            if mylist[min_idx] > mylist[j]:\n                min_idx = j\n        mylist[i], mylist[min_idx] = mylist[min_idx], mylist[i]\n    return mylist\n```"}]}
{"dataset": "code_high", "id": "code_high_749", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the median of the given array [3,7,2,1,9].\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_median(arr):\n    arr.sort()\n    if len(arr) % 2 == 0: \n        median = (arr[(len(arr)//2)-1] + arr[len(arr)//2])/2 \n    else: \n        median = arr[len(arr)//2] \n    return median\nmedian = find_median([3,7,2,1,9])\nprint(median) # Prints 3.5\n```"}]}
{"dataset": "code_high", "id": "code_high_750", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes a list of strings and returns the longest common prefix of the list of strings.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_common_prefix(strings):\n    if len(strings) == 0:\n        return \"\"\n    smallest_string = min(strings, key=len)\n    end_word_index = len(smallest_string)\n    for i in range(end_word_index):\n        for word in strings:\n            if word[i] != smallest_string[i]:\n                return smallest_string[:i] \n    return smallest_string\n```"}]}
{"dataset": "code_high", "id": "code_high_751", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to implement insertion sort on a given list.\n\n### Input:\nList: [4, 3, 6, 1, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertionSort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >= 0 and key < arr[j] : \n                arr[j + 1] = arr[j] \n                j -= 1\n        arr[j + 1] = key \n  \narr = [4, 3, 6, 1, 5]\ninsertionSort(arr)\nprint (\"Sorted array is: \") \nfor i in range(len(arr)): \n    print (\"%d\" %arr[i])\n```"}]}
{"dataset": "code_high", "id": "code_high_752", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to calculate the Average True Range of a given array of price data\n\n### Input:\n[10, 15, 8, 11]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_ATR(data):\n    max_diff = 0\n    for i in range(1, len(data)):\n        diff = abs(data[i] - data[i-1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff/len(data)\ndata = [10, 15, 8, 11]\nprint(calculate_ATR(data)) # 2.25\n```"}]}
{"dataset": "code_high", "id": "code_high_753", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the list below using insertion sort in Python:\n\n### Input:\nlist = [1,12,1,4,8,10,13]\n\n### Response:"}, {"role": "assistant", "content": "```python\nlist = [1,1,4,8,10,12,13]\ndef insertion_sort(arr): \n    for i in range(1, len(arr)): \n        key = arr[i] \n        j = i-1\n        while j >=0 and key < arr[j] : \n                arr[j+1] = arr[j] \n                j -= 1\n        arr[j+1] = key\narr = [1,12,1,4,8,10,13]\ninsertion_sort(arr)\nprint (arr)\n```"}]}
{"dataset": "code_high", "id": "code_high_754", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the given code to use dynamic programming to solve the problem.\n\n### Input:\ndef rod_cutting(arr, n):\n    if n <= 0:\n        return 0\n    max_val = 0\n    for i in range(0, n):\n        max_val = max(max_val, arr[i] + rod_cutting(arr, n-i-1))\n    return max_val\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef rod_cutting(arr, n):\n    dp = [-1 for _ in range(n+1)]\n    dp[0] = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            dp[i] = max(dp[i], arr[j] + dp[i - j - 1])\n    return dp[n]\n```"}]}
{"dataset": "code_high", "id": "code_high_755", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nwrite a piece of code to print out the first n Fibonacci numbers in Python.\n\n### Input:\nn = 8\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    fibList = [0, 1] \n    \n    if n <= 0: \n        print(\"Incorrect input\") \n    elif n == 1: \n        print(fibList[0]) \n    elif n == 2: \n        print(fibList) \n    else: \n        temp = fibList[0] + fibList[1] \n        while len(fibList) < n: \n            fibList.append(temp) \n            temp = fibList[len(fibList)-1] +   fibList[len(fibList)-2] \n      \n    return fibList \n  \nprint(Fibonacci(8))\n```"}]}
{"dataset": "code_high", "id": "code_high_756", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a command to delete a folder with all its contents.\n\n### Input:\n/root/folder\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport os \ndef remove_folder(folder): \n    for filename in os.listdir(folder): \n        file_path = os.path.join(folder, filename) \n        try: \n            if os.path.isfile(file_path) or os.path.islink(file_path): \n                os.unlink(file_path) \n            elif os.path.isdir(file_path): \n                shutil.rmtree(file_path) \n        except Exception as e: \n            print('Failed to delete %s. Reason: %s' % (file_path, e))   \nremove_folder('/root/folder')\n```"}]}
{"dataset": "code_high", "id": "code_high_757", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that performs binary search on a given list.\n\n### Input:\nmy_array = [1,3,5,7,9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(my_array, x): \n    start = 0\n    end = len(my_array) - 1\n  \n    while start <= end: \n  \n        mid = (start + end) // 2 # calculate mid\n  \n        # Check if x is present at mid \n        if my_array[mid] < x: \n            start = mid + 1\n  \n        # If x is greater, ignore left half \n        elif my_array[mid] > x: \n            end = mid - 1\n  \n        # If x is smaller, ignore right half \n        else: \n            return mid \n    # If we reach here, then the element \n    # was not present \n    return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_758", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a sequence of numbers, write a program to find the length of the longest subsequence in which all numbers are in increasing order.\n\n### Input:\narr = [1, 7, 4, 3, 2, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef findLongestSubsequence(arr): \n    n = len(arr)\n    dp = [1]*n \n    for i in range(1, n): \n        for j in range(i): \n            if arr[i] > arr[j] and dp[i] < dp[j] + 1 : \n                dp[i] = dp[j]+1\n    return max(dp)\n```"}]}
{"dataset": "code_high", "id": "code_high_759", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code that prints the longest continuous increasing sequence of integers within a given list.\n\n### Input:\n[1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_continuous_increasing(arr):\n  \"\"\"Function to return the length of the longest continuous increasing sequence of integers within a given list\n  \n  Args:\n      arr (list): a list of integers\n  \n  Returns:\n      int: the length of the longest continuous increasing sequence\n  \"\"\"\n  n = len(arr)\n  max_len = 0\n  curr_len = 1\n  for i in range(1, n): \n    if arr[i] > arr[i-1]: \n      curr_len += 1\n    else: \n      # update current length of the increasing sequence\n      max_len = max(curr_len, max_len) \n      curr_len = 1\n  return max(max_len, curr_len) \n \n# Driver code \narr = [1, 2, 3, 4, 5, 6, 7, 8, 4, 5, 6, 7, 8, 9] \nprint(longest_continuous_increasing(arr)) # Output: 9\n```"}]}
{"dataset": "code_high", "id": "code_high_760", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop a high-level algorithm for pathfinding.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_path(start, end):\n    # Create an empty list to store the path\n    path = []\n    # Create a dictionary to store visited nodes\n    visited = {start: None}\n    # Create a queue and add the initial space to it\n    queue = [start]\n    # Keep looping until the queue is empty\n    while len(queue) > 0:\n        # Get the first element in the queue\n        curr = queue.pop(0)\n        # Add the current node to the path\n        path.append(curr)\n        # Check if we reached the end of the path\n        if curr == end:\n            return path\n        # Explore all neighbours of the current node\n        for neighbour in get_neighbours(curr):\n            # Check if the neighbour is not visited previously\n            if neighbour not in visited:\n                # Add the neighbour to the queue and mark it as visited\n                queue.append(neighbour)\n                visited[neighbour] = curr\n    # If the queue is empty, there is no path\n    return None\n```"}]}
{"dataset": "code_high", "id": "code_high_761", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to detect all possible anagrams of a given word in Python.\n\n### Input:\nword = \"cat\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef all_anagrams(word):\n \n    if len(word) ==0:\n        return [word]\n    else:\n        temp = []\n        for anagram in all_anagrams(word[1:]):\n            for i in range(len(word)):\n                temp.append(anagram[:i] + word[0:1] + anagram[i:])\n        return temp\nall_anagrams(word) // Returns ['act', 'atc', 'cat', 'cta', 'tac', 'tca']\n```"}]}
{"dataset": "code_high", "id": "code_high_762", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to detect the smallest window in a string containing all characters of another string.\n\n### Input:\nstring1 = \"abcde\", string2 = \"ade\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef smallest_window(str1, str2):\n min_str = \"\"\n min_size = float(\"inf\")\n \n for i in range(len(str1)):\n  for j in range(i+1, len(str1)):\n   curr_str = str1[i:j+1]\n   count = 0\n   for ch in str2:\n    if ch in curr_str:\n     count += 1\n   if len(curr_str) < min_size and count == len(str2):\n    min_str = curr_str\n    min_size = len(curr_str)\n return min_str\n \nprint(smallest_window(\"abcde\", \"ade\"))\n```"}]}
{"dataset": "code_high", "id": "code_high_763", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a web scraper that extracts data from a given URL.\n\n### Input:\nURL: https://www.reuters.com/article/us-oil-production/u-s-oil-production-touches-a-record-high-idUSKCN1VA19P\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a web scraper that extracts data from a given URL\n\"\"\"\nimport requests\nfrom bs4 import BeautifulSoup\ndef get_data_from_url(url):\n    response = requests.get(url)\n    html = BeautifulSoup(response.text, 'html.parser')\n    title = html.find(\"h1\", {\"class\": \"ArticleHeader_headline\"}).text\n    try:\n        body = html.find_all(\"div\", {\"class\": \"StandardArticleBody_body\"})[0].text\n    except IndexError:\n        body = \"\" \n    return title, body\nif __name__ == '__main__':\n    url = 'https://www.reuters.com/article/us-oil-production/u-s-oil-production-touches-a-record-high-idUSKCN1VA19P'\n    title, body = get_data_from_url(url)\n    print(title)\n    print(body)\n```"}]}
{"dataset": "code_high", "id": "code_high_764", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite an algorithm to identify below number is prime or not.\n\n### Input:\n7\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Function to check for prime number \ndef isPrime(n): \n      \n    # Corner cases \n    if n <= 1: \n        return False\n  \n    # Check from 2 to n-1 \n    for i in range(2, n): \n        if n % i == 0: \n            return False\n  \n    return True\n# Driver Program \nif isPrime(7):\n    print(\"YES! It is a prime number\")\nelse:\n    print(\"No! It is not a prime number\")\n```"}]}
{"dataset": "code_high", "id": "code_high_765", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm that determines the greatest common multiple of two numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef gcm(x, y): \n    if(x > y): \n        gcm = x \n    else: \n        gcm = y \n  \n    while(True): \n        if((gcm % x == 0) and (gcm % y == 0)): \n            return gcm \n        gcm = gcm + 1\n  \n# Driver Program \nx = 12\ny = 18\nprint(gcm(x, y))\n```"}]}
{"dataset": "code_high", "id": "code_high_766", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWith the provided data, find the correlation coefficient between the two variables.\n\n### Input:\nx: [4, 5, 7, 8]\ny: [6, 7, 8, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\nx = [4, 5, 7, 8]\ny = [6, 7, 8, 10]\ndef find_correlation_coefficient(x, y):\n    n = len(x)\n    # Calculate the sums\n    sum_x = sum(x)\n    sum_y = sum(y)\n    # Calculate the sum of the squares\n    squared_sum_x = sum([pow(x[i], 2) for i in range(n)])\n    squared_sum_y = sum([pow(y[i], 2) for i in range(n)])\n    # Calculate the sum of the products\n    product_sum = sum([x[i]*y[i] for i in range(n)])\n    # Calculate the correlation coefficient\n    num = product_sum - (sum_x * sum_y/n)\n    den = ((squared_sum_x - (pow(sum_x,2) / n)) * (squared_sum_y - (pow(sum_y,2) / n))) ** 0.5\n    r = num/den\n    return r\nprint(\" The correlation coefficient is: \" + str(find_correlation_coefficient(x, y))) # 0.9\n```"}]}
{"dataset": "code_high", "id": "code_high_767", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function to print the Fibonacci series up to the nth term.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef FibonacciSeries(n): \n    a = 0\n    b = 1 \n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n+1): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_768", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a priority queue.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass PriorityQueue(): \n   \n    def __init__(self): \n        self.elements = [] \n  \n    def is_empty(self): \n        return len(self.elements) == 0 \n  \n    def enqueue(self, item, priority): \n        self.elements.append((item, priority)) \n  \n    def dequeue(self): \n        max_priority_index = 0\n        for index, element in enumerate(self.elements): \n            if element[1] > self.elements[max_priority_index][1]: \n                max_priority_index = index \n        element = self.elements[max_priority_index] \n        del self.elements[max_priority_index] \n        return element\n```"}]}
{"dataset": "code_high", "id": "code_high_769", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCheck if the following word is a palindrome\n\n### Input:\nword = \"level\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nword = \"level\"\n# Program to check if a word is a palindrome\nis_palindrome = True\nfor i in range(len(word)//2):\n    if word[i] != word[len(word)-1-i]:\n        is_palindrome = False\n        break\nif is_palindrome:\n    print(f\"{word} is a palindrome.\")\nelse:\n    print(f\"{word} is not a palindrome.\")\n```"}]}
{"dataset": "code_high", "id": "code_high_770", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that finds all the prime numbers less than or equal to a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_primes(num):\n    \"\"\"Find all the prime numbers less than or equal to a given number.\"\"\"\n    primes = []\n    for i in range(2, num + 1):\n        is_prime = True\n        for j in range(2, int(i ** 0.5) + 1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_771", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python program to create a list of the first 10 prime numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_numbers(n): \n  primes = [2] \n  num = 3\n \n  while len(primes) < n: \n    for i in range(2, num): \n      if (num % i == 0): \n        break\n    else: \n      primes.append(num) \n    num += 1\n  \n  return primes\n# Usage\nprint(prime_numbers(10)) # [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n```"}]}
{"dataset": "code_high", "id": "code_high_772", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompile a program to find the number of a specific digit in a given number.\n\n### Input:\nNumber = 1234, Digit = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_digit(num, digit):\n    count = 0\n    while num > 0:\n        if num % 10 == digit:\n            count += 1\n        num //= 10\n    \n    return count\nNumber = 1234\nDigit = 3\nprint(count_digit(Number, Digit))\n```"}]}
{"dataset": "code_high", "id": "code_high_773", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a sorting algorithm to order a list of integers in descending order.\n\n### Input:\n[4,7,2,8,9,1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef descend_sort(nums):\n    for i in range(len(nums)-1): \n      for j in range(i+1,len(nums)): \n        if nums[i]<nums[j]: \n          nums[i],nums[j]=nums[j],nums[i] \n    return nums\n```"}]}
{"dataset": "code_high", "id": "code_high_774", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to implement a round-robin scheduling algorithm.\n\n### Input:\nprocesses = [10, 5, 7]\ntime_slice = 2\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Program to implement a round-robin scheduling algorithm\n# Get the list of processes and the time slice \nprocesses = [10, 5, 7]\ntime_slice = 2\n# Create an empty list to store the remaining burst time \nremaining_burst = []\n# Loop through all processes to get the remaining burst time \nfor process in processes:\n  remaining_burst.append(process)\n# Keep track of current time cycle \ntime = 0\n# Loop through the processes and implement round-robin scheduling\nwhile True:\n  done = True\n  \n  # Iterate through the processes\n  for i in range(len(processes)):\n    if remaining_burst[i] > 0:\n      done = False # Not done yet\n      \n      if remaining_burst[i] > time_slice:\n        # Increment timeline\n        time += time_slice\n        \n        # Reduce the remaining burst time \n        remaining_burst[i] -= time_slice\n      else:\n        # Increment timeline\n        time += remaining_burst[i]\n        \n        # Set remaining burst to 0 \n        remaining_burst[i] = 0\n  # Break the loop if all processes are done \n  if done:\n    break\nprint('Total time to schedule the processes is', time)\n```"}]}
{"dataset": "code_high", "id": "code_high_775", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to build a queue (i.e., a sequence of objects)\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Queue: \n      \n    def __init__(self): \n        self.items = [] \n  \n    def enqueue(self, item): \n        self.items.insert(0, item) \n  \n    def dequeue(self): \n        if not self.is_empty(): \n            return self.items.pop() \n  \n    def is_empty(self): \n        return len(self.items) == 0 \n  \n    def peek(self): \n        if not self.is_empty(): \n            return self.items[-1].value \n  \n    def __len__(self): \n        return self.size() \n  \n    def size(self): \n        return len(self.items)\n```"}]}
{"dataset": "code_high", "id": "code_high_776", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that finds all the prime numbers in a given range of numbers.\n\n### Input:\nstart_num = 1\nend_num = 100\n\n### Response:"}, {"role": "assistant", "content": "```python\nprimes = []\nfor num in range(start_num, end_num + 1):\n  if num > 1:\n    for i in range(2, num):\n      if num % i == 0:\n        break\n    else:\n      primes.append(num)\nprint(primes)\n```"}]}
{"dataset": "code_high", "id": "code_high_777", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code to identify the longest palindrome in a given string\n\n### Input:\nString: kayakracecar\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_longest_palindrome(s):\n    longest_palindrome = ''\n    s_length = len(s)\n    for i in range(s_length):\n        for j in range(i, s_length):\n            substring = s[i:j + 1]\n            if len(substring) > len(longest_palindrome) and substring == substring[::-1]:\n                longest_palindrome = substring\n    return longest_palindrome\n# Verify it works\nprint(get_longest_palindrome('kayakracecar'))\n```"}]}
{"dataset": "code_high", "id": "code_high_778", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a code to generate Fibonacci numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(num): \n    a = 0\n    b = 1  \n    if num < 0: \n        print(\"Incorrect input\")\n    elif num == 0: \n        return a \n    elif num == 1: \n        return b \n    else: \n        for i in range(2,num): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_779", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that returns the sum of the Fibonacci sequence to the nth number\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef FibonacciSum(n): \n    fib1 = 0\n    fib2 = 1\n    if n < 0: \n        return \"Incorrect input\"\n    elif n == 0:\n        return 0\n    elif n == 1: \n        return 0\n    else: \n        sum = 0\n        for i in range(2,n+1): \n            fib_n = fib1 + fib2\n            fib1 = fib2\n            fib2 = fib_n\n            sum = sum + fib_n\n        return sum\n```"}]}
{"dataset": "code_high", "id": "code_high_780", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to generate Pythagorean Triples up to a given limit.\n\n### Input:\nLimit: 20\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Create a function to generate pythagorean triples\ndef generator(limit):\n\t# Create an empty list to store the result\n\tresult = []\n    # Iterate over limit\n\tfor n in range(1, limit + 1):\n\t\tfor m in range(n + 1, limit +1):\n\t\t\ta = m*m - n*n\n\t\t\tb = 2*m*n\n\t\t\tc = m*m + n*n\n\t\t\tif c > limit:\n\t\t\t\tbreak\n\t\t\tif a > b:\n\t\t\t\tresult.append([a, b, c])\n\t\t\tif a < b:\n\t\t\t\tresult.append([b, a, c])\n\treturn result\n# Driver code\nlimit = 20\npythagorean_triples = generator(limit)\nprint(pythagorean_triples)\n```"}]}
{"dataset": "code_high", "id": "code_high_781", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to check if two binary trees are identical.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_identical(root1, root2): \n    #Check if root1 and root2 are both none\n    if root1 == None and root2 == None:\n        return True\n    #Check if root1 and root2 are none\n    if root1 == None or root2 == None:\n        return False\n    #Check if their data is same\n    if root1.data == root2.data:\n        #Check if their left subtrees are same\n        left_identical = is_identical(root1.left, root2.left)\n        #Check if their right subtrees are same\n        right_identical = is_identical(root1.right, root2.right)\n        if left_identical and right_identical:\n            return True\n    return False\n```"}]}
{"dataset": "code_high", "id": "code_high_782", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a Python program to perform matrix multiplication.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Python program to multiply two matrices \n# 3x3 matrix \nX = [[12,7,3],\n    [4 ,5,6],\n    [7 ,8,9]]\n# 3x4 matrix\nY = [[5,8,1,2],\n    [6,7,3,0],\n    [4,5,9,1]]\n# result is 3x4\nresult = [[0,0,0,0],\n         [0,0,0,0],\n         [0,0,0,0]]\n# iterate through rows of X\nfor i in range(len(X)):\n   # iterate through columns of Y\n   for j in range(len(Y[0])):\n       # iterate through rows of Y\n       for k in range(len(Y)):\n           result[i][j] += X[i][k] * Y[k][j]\nfor r in result:\n   print(r)\n```"}]}
{"dataset": "code_high", "id": "code_high_783", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform a selection sort on the given array\n\n### Input:\n[4, 1, 10, 8, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef selection_sort(arr): \n    for i in range(len(arr)): \n        min_idx = i \n        for j in range(i+1, len(arr)): \n            if arr[min_idx] > arr[j]: \n                min_idx = j        \n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\nprint(selection_sort([4, 1, 10, 8, 5]))\n```"}]}
{"dataset": "code_high", "id": "code_high_784", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a function to convert a ternary tree to a doubly linked list.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef convertTernaryTreeToDoublyLinkedList(root):\n    # Edge case\n    if (root == None):\n        return \n    \n    # Create two empty lists to hold left and right list of root\n    left = []\n    right = []\n    # Add root to left list that will hold left subtree\n    left.append(root.val)\n    # Store the value of the root for later use\n    val = root.val\n    # Recur to get the left and right lists of the left\n    # and right subtree\n    getLeft(root.left, left)\n    getRight(root.right, right)\n    # To see the linked list join the left and right lists\n    left.extend(right)\n    # Get the length of the list\n    length = len(left)\n    # Join the left and right list with the middle element\n    # of the root.\n    for i in range(length):\n        if i<length-1:\n            left[i].next = left[i+1]\n        else:\n            left[i].next = None\n        if i>0:\n            left[i].prev = left[i-1]\n        else:\n            left[i].prev = None\n    \n    # Return the list\n    return left\ndef getLeft(root, left):\n    # Iterative way to traverse and get all left subtree elements\n    if root:\n        left.append(root) \n        root = root.left\n        getLeft(root, left)\ndef getRight(root, right):\n    # Iterative way to traverse and get all right subtree elements\n    if root:\n        right.append(root)\n        root = root.right\n        getRight(root, right)\n```"}]}
{"dataset": "code_high", "id": "code_high_785", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that ciphers a given text using the caesar cipher.\n\n### Input:\ntext = \"This is a secret message\"\nkey = 3\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef caesar_cipher(text, key):\n    \"\"\"Cipher a given text using the Caesar Cipher.\"\"\"\n    ciphertext = \"\"\n    for char in text: \n        if not char.isalpha():\n            ciphertext += char\n            continue\n        offset = ord('a') if char.islower() else ord('A')\n        new_char = (ord(char) - offset + key) % 26\n        ciphertext += chr(offset + new_char)\n    return ciphertext\n```"}]}
{"dataset": "code_high", "id": "code_high_786", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow to check if a given number is an Armstrong number in Python?\n\n### Response:"}, {"role": "assistant", "content": "```python\n#Function to check if a number is an Armstrong number\ndef isArmstrong(number):\n   sum  = 0\n   temp = number\n   while temp > 0:\n    digit = temp % 10\n    sum += digit ** 3\n    temp //= 10\n \n   if number == sum:\n       return True\n   else:\n       return False\n   \n#Usage\nnumber = 9\nif(isArmstrong(number)):\n    print(f\"{number} is an Armstrong number\")\nelse:\n    print(f\"{number} is not an Armstrong number\")\n```"}]}
{"dataset": "code_high", "id": "code_high_787", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing a for loop, calculate the distance between one point to every other point in the given list.\n\n### Input:\npoints = [\n    (10, 20),\n    (12, 22),\n    (14, 24)\n]\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Using a for loop, calculate the distance between one point to every other point in the given list\nfrom math import sqrt\ndistances = []\nfor i in range(len(points)):\n    for j in range(len(points)):\n        if i != j:\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance = sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            distances.append(distance)\nprint(distances)  # Output: [2.8284271247461903, 4.242640687119285, 2.8284271247461903]\n```"}]}
{"dataset": "code_high", "id": "code_high_788", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMake a program that takes in a non-empty string and finds its longest palindrome.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_palindrome(text):\n  longest_palindrome = \"\"\n  for i in range(len(text)):\n    for j in range(len(text), i, -1):\n      substring = text[i:j]\n      if substring == substring[::-1] and len(substring) > len(longest_palindrome):\n        longest_palindrome = substring\n  return longest_palindrome\n```"}]}
{"dataset": "code_high", "id": "code_high_789", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to apply upper case to a given string.\n\n### Input:\nString = \"welcome to The world Of gEEks\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef upperCaseString(str): \n    res = \"\" \n    for i in range(len(str)):\n        if i==0 or (str[i-1]==' '): \n            res = res + str[i].upper()\n        else:\n            res = res + str[i]\n    return res \nstr = \"welcome to The world Of gEEks\"\nprint(upperCaseString(str))\n```"}]}
{"dataset": "code_high", "id": "code_high_790", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm that computes the minimum number of moves taking an array of integers to a sorted array.\n\n### Input:\n[1, 3, 5, 4, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef minMoves(arr): \n    n = len(arr) \n    moves = 0\n    for i in range(n):  \n        for j in range(n - 1):\n            if arr[j] > arr[j + 1]:  \n                temp = arr[j]\n                arr[j] = arr[j + 1] \n                arr[j + 1] = temp\n                moves += 1\n    return moves\n```"}]}
{"dataset": "code_high", "id": "code_high_791", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm for searching for an element in a sorted array.\n\n### Input:\narr = [2, 4, 6, 8, 10]\ntarget = 6\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(arr, target):\n  low = 0\n  high = len(arr) - 1\n  while low <= high: \n    mid = (low + high) // 2\n    if arr[mid] == target: \n      return mid \n    elif arr[mid] < target: \n      low = mid + 1\n    else: \n      high = mid - 1\n  return -1\n```"}]}
{"dataset": "code_high", "id": "code_high_792", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast.\n\n### Input:\nforecast = [\n  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n  {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nWrite a Python code to calculate the maximum temperature for today based on a forecast of the seven-day forecast\n\"\"\"\nimport datetime\ndef get_max_temperature_today(forecast):\n    today = datetime.datetime.today().weekday()\n    \n    max_temp = None\n    for day in forecast:\n        if day['day'] == today:\n            max_temp = max(max_temp, day['temperature'])\n    \n    return max_temp\n  \nif __name__ == \"__main__\":\n    forecast = [\n  {'day': 'Monday', 'description': 'sunny', 'temperature': 28},\n  {'day': 'Tuesday', 'description': 'sunny', 'temperature': 30},\n  {'day': 'Wednesday', 'description': 'cloudy', 'temperature': 28},\n  {'day': 'Thursday', 'description': 'raining', 'temperature': 25},\n  {'day': 'Friday', 'description': 'raining', 'temperature': 24},\n  {'day': 'Saturday', 'description': 'cloudy', 'temperature': 25},\n  {'day': 'Sunday', 'description': 'sunny', 'temperature': 27}\n]\nprint(get_max_temperature_today(forecast))\n```"}]}
{"dataset": "code_high", "id": "code_high_793", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the total number of possible binary trees with n nodes.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef numTrees(n): \n    if n == 0: \n        return 1\n    else: \n        num = 0\n        for roots in range(1, n+1): \n            leftNum = numTrees(roots - 1) \n            rightNum = numTrees(n - roots) \n            num += leftNum * rightNum \n    return num\n```"}]}
{"dataset": "code_high", "id": "code_high_794", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nModify the program to accept user input of two numbers, and show the result based on the operator provided.\n\n### Input:\ndef calculate(num1, num2):\n    result = num1 + num2\n    return result\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate(num1, num2, operator):\n    if (operator == '+'):\n        result = num1 + num2\n    elif (operator == '-'):\n        result = num1 - num2\n    elif (operator == '*'):\n        result = num1 * num2\n    elif (operator == '/'):\n        result = num1 / num2\n    else:\n        print(\"Invalid operator\")\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_795", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code that will delete a node in a Linked List at a given position.\n\n### Input:\n# Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n        \n# Given Position\nposition = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Node class \nclass Node: \n    # Function to initialise the node object \n    def __init__(self, data): \n        self.data = data  # Assign data \n        self.next = None  # Initialize next as null \n  \n# Linked List class \nclass LinkedList: \n  \n    # Function to initialize head \n    def __init__(self): \n        self.head = None\n    # Function to delete given node at position \n    def delete_node(self, position): \n  \n        # If linked list is empty \n        if self.head == None: \n            return \n  \n        # Store head node \n        temp = self.head \n  \n        # If head needs to be removed \n        if position == 0: \n            self.head = temp.next\n            temp = None\n            return \n  \n        # Find previous node of the node to be deleted \n        for i in range(position -1 ): \n            temp = temp.next\n            if temp is None: \n                break\n  \n        # If position is more than number of nodes \n        if temp is None: \n            return \n        if temp.next is None: \n            return \n  \n        # Node temp.next is the node to be deleted \n        # store pointer to the next of node to be deleted \n        next = temp.next.next\n  \n        # Unlink the node from linked list \n        temp.next = None\n  \n        temp.next = next \n  \n# Given Position\nposition = 5\n# Create a linked list with four nodes\nlinked_list = LinkedList()\nlinked_list.head = Node(1)\nsecond = Node(2)\nthird = Node(3)\nfourth = Node(4)\n# Now connect the linked list \nlinked_list.head.next = second\nsecond.next = third\nthird.next = fourth\n# Delete the node from given position\nlinked_list.delete_node(position)\n```"}]}
{"dataset": "code_high", "id": "code_high_796", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program that can output the permutation of a given string.\n\n### Input:\nFind the permutation of \u201cABC\u201d\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef permutation(str):\n    if len(str) == 0:\n        return []\n    if len(str) == 1:\n        return [str]\n    lst = [] \n    for i in range(len(str)):\n       m = str[i] \n       remLst = permutation(str[:i] + str[i+1:])\n       for p in remLst:\n           lst.append([m] + p)\n    return lst\nif __name__ == \"__main__\":\n    str = \"ABC\"\n    print(permutation(str))\n```"}]}
{"dataset": "code_high", "id": "code_high_797", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the list using Quick Sort\n\n### Input:\n[2, 3, 5, 6, 1, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef quick_sort(arr): \n\tif len(arr) <= 1:\n\t\treturn arr\n\tpivot = arr[len(arr) // 2]\n\tleft = [x for x in arr if x < pivot]\n\tright = [x for x in arr if x > pivot]\n\treturn quick_sort(left) + [pivot] + quick_sort(right)\n```"}]}
{"dataset": "code_high", "id": "code_high_798", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign a password validation system using Python code.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport re\nMIN_LENGTH = 8\nMAX_LENGTH = 15\ndef is_valid_password(password):\n    \n    #check password length\n    if len(password) < MIN_LENGTH or len(password) > MAX_LENGTH:\n        return False\n    #check for at least one digit\n    if re.search(r\"[0-9]\",password) is None:\n        return False\n    \n    #check for at least one uppercase letter\n    if re.search(r\"[A-Z]\",password) is None:\n        return False\n    \n    #check for at least one lowercase letter\n    if re.search(r\"[a-z]\",password) is None:\n        return False\n    \n    #check for at least one special character  \n    if re.search(r\"[!#$%&'()*+,-./:;<=>?@[\\] ^_`{|}~]\",password) is None:\n        return False\n    #if all conditions are met, password is valid\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_799", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python code to find the largest and the second largest numbers in a list.\n\n### Input:\nList: [2, 9, 12, 45, 10, 20]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef getLargestTwo(l):\n    first_largest = second_largest = float('-inf')\n    for num in l:\n        if num > first_largest:\n            second_largest = first_largest\n            first_largest = num\n        elif num > second_largest and num != first_largest:\n            second_largest = num\n    return (first_largest, second_largest)\n```"}]}
{"dataset": "code_high", "id": "code_high_800", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDevelop an algorithm for sorting a given list in ascending order.\n\n### Input:\nmy_list = [5,1,4,2,8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_list(my_list): \n  for i in range(len(my_list)):\n    for j in range(i+1, len(my_list)):\n      if my_list[i] > my_list[j]: \n        my_list[i], my_list[j] = my_list[j], my_list[i]\n  return my_list\nsort_list(my_list)\n```"}]}
{"dataset": "code_high", "id": "code_high_801", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a function in Python that calculates the median of a given input array.\n\n### Input:\n[5, 2, 6, 8, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculateMedian(arr):\n    n = len(arr)\n    arr.sort()\n \n    if n % 2 == 0:\n        median1 = arr[n//2]\n        median2 = arr[n//2 - 1]\n        median = (median1 + median2) / 2\n    else:\n        median = arr[n // 2]\n \n    return median\n \nprint(\"Median is: \" + str(calculateMedian([5, 2, 6, 8, 10])))\n```"}]}
{"dataset": "code_high", "id": "code_high_802", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a code in Python for comparing two strings without using a built-in function.\n\n### Input:\nstring1 = \"apple\"\nstring2 = \"orange\"\n\n### Response:"}, {"role": "assistant", "content": "```python\nstring1 = \"apple\" \nstring2 = \"orange\" \nlength = min(len(string1), len(string2))\nfor i in range(length):\n  if string1[i] != string2[i]:\n    result = string1[i] < string2[i]\n    break\nif result == True:\n  print(string1 + \" follows \" + string2 + \" alphabetically.\")\nelse:\n  print(string2 + \" follows \" + string1 + \" alphabetically.\")\n```"}]}
{"dataset": "code_high", "id": "code_high_803", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest an efficient algorithm for sorting the following list.\n\n### Input:\n[7, 1, 4, 8, 9, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort(array): \n    length = len(array) \n  \n    for i in range(length): \n  \n        j = i \n        while j > 0 and array[j-1] > array[j]: \n            # Swap elements\n            array[j], array[j-1] = array[j-1], array[j] \n            j -= 1\n    return array\n```"}]}
{"dataset": "code_high", "id": "code_high_804", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nRecreate the same result from the given sample output.\n\n### Input:\nSample output:\n\n1\n11\n21\n1211\n111221\n\n### Response:"}, {"role": "assistant", "content": "```python\nn = '1'\nfor x in range(5):\n    a, b = '', '' \n    count = 1\n  \n    for i in range(1, len(n)): \n        if(n[i] != n[i-1]): \n            a += str(count) \n            a += n[i-1] \n            count = 1\n        else: \n            count+=1\n    \n    if(n[i] == n[i-1]): \n        a += str(count) \n        a += n[i] \n  \n    n = a\n    print(n)\n```"}]}
{"dataset": "code_high", "id": "code_high_805", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a method to print out a list of prime numbers below a given number n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef prime_numbers(n): \n    numbers = list(range(2, n + 1)) \n    for i in range(2, n+1): \n        for j in range(i + 1, n+1): \n            if j % i == 0: \n                numbers[j - 2] = 0 \n  \n    return [number for number in numbers if number != 0]\n```"}]}
{"dataset": "code_high", "id": "code_high_806", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a class for constructing a new tree\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass TreeNode:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n    \n    def Insert(self, data):\n        if self.data:\n            if data < self.data:\n                if self.left is None:\n                    self.left = TreeNode(data)\n                else:\n                    self.left.Insert(data)\n            elif data > self.data:\n                if self.right is None:\n                    self.right = TreeNode(data)\n                else:\n                    self.right.Insert(data)\n        else:\n            self.data = data\n```"}]}
{"dataset": "code_high", "id": "code_high_807", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven the JSON data below, find the count of each type of fruit.\n\n### Input:\n{\n    \"fruits\": [\n        { \"type\": \"apple\", \"count\": 10 },\n        { \"type\": \"orange\", \"count\": 5 },\n        { \"type\": \"banana\", \"count\": 15 }\n    ]\n}\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport json\ndata = \"\"\"\n{\n    \"fruits\": [\n        { \"type\": \"apple\", \"count\": 10 },\n        { \"type\": \"orange\", \"count\": 5 },\n        { \"type\": \"banana\", \"count\": 15 }\n    ]\n}\n\"\"\"\ndata = json.loads(data)\n# Get the count for each type of fruit\napple_count = 0\norange_count = 0\nbanana_count = 0\nfor fruit in data['fruits']:\n    if fruit['type'] == 'apple':\n        apple_count = fruit['count']\n    elif fruit['type'] == 'orange':\n        orange_count = fruit['count']\n    elif fruit['type'] == 'banana':\n        banana_count = fruit['count']\nprint(\"Apple count = %d\" % apple_count)\nprint(\"Orange count = %d\" % orange_count)\nprint(\"Banana count = %d\" % banana_count)\n```"}]}
{"dataset": "code_high", "id": "code_high_808", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python program to find the minimum cost of a path from top left cell to bottom right cell of a matrix.\n\n### Input:\nmatrix = [[2, 0, 3, 5],\n          [4, 5, 1, 2],\n          [3, 1, 2, 7]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef min_path_sum(matrix):\n    # initialize the solution matrix\n    res = [[0 for _ in range(len(matrix[0]))] for _ in range(len(matrix))]\n    # copying the first row elements\n    res[0] = matrix[0]\n    # iterate over the remaining rows\n    for i in range(1, len(matrix)):\n        # copy the first element\n        res[i][0] = res[i-1][0] + matrix[i][0]\n        for j in range(1, len(matrix[0])):\n            # choose the smaller of the two\n            res[i][j] = min(res[i-1][j], res[i][j-1]) + matrix[i][j]\n    # return the bottom-right element\n    return res[len(matrix)-1][len(matrix[0])-1]\n```"}]}
{"dataset": "code_high", "id": "code_high_809", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the given array using insertion sort\n\n### Input:\n[5, 1, 4, 2, 8]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertion_sort(arr):\n    \"\"\"\n    Sort given array using insertion sort\n    \"\"\"\n    # Traverse through the array \n    for i in range(1, len(arr)): \n        key = arr[i] \n  \n        # Move elements of arr[0..i-1], that are \n        # greater than key, to one position ahead \n        # of their current position \n        j = i - 1\n        while j >= 0 and key < arr[j] : \n            arr[j + 1] = arr[j] \n            j -= 1\n        arr[j + 1] = key \n  \n    return arr\narr = [5, 1, 4, 2, 8]\nsorted_arr = insertion_sort(arr)\nprint(sorted_arr)\n```"}]}
{"dataset": "code_high", "id": "code_high_810", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSort the following array using the merge sort algorithm.\n\n### Input:\narr = [4, 10, 5, 1, 8, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_sort(arr):\n    if len(arr) > 1: \n      mid = len(arr)//2\n      left_arr = arr[:mid]\n      right_arr = arr[mid:]\n      merge_sort(left_arr)\n      merge_sort(right_arr)\n      i = j = k = 0\n      while i < len(left_arr) and j < len(right_arr): \n        if left_arr[i] < right_arr[j]: \n            arr[k] = left_arr[i] \n            i+=1\n        else: \n            arr[k] = right_arr[j] \n            j+=1\n        k+=1\n      while i < len(left_arr): \n        arr[k] = left_arr[i] \n        i+=1\n        k+=1\n      \n      while j < len(right_arr): \n        arr[k] = right_arr[j] \n        j+=1\n        k+=1\n```"}]}
{"dataset": "code_high", "id": "code_high_811", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a method to print all the prime numbers up to n.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_prime_numbers(n):\n    primes = [] \n    for num in range(2, n + 1): \n        is_prime = True\n        for i in range(2, num): \n            if (num % i == 0): \n                is_prime = False\n                break\n        if is_prime: \n            primes.append(num) \n    print(primes)\n```"}]}
{"dataset": "code_high", "id": "code_high_812", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to determine whether a given sequence is an arithmetic progression or not.\n\n### Input:\n[-6, -2, 2, 6]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef is_arithmetic_progression(arr):\n # Check if the given array is empty\n if len(arr) == 0:\n  return False\n # Initialize the common difference and the first element\n commonDifference = arr[1] - arr[0]\n firstElement = arr[0]\n # Iterate over the array\n for i in range(len(arr)):\n  if arr[i] != firstElement + (i * commonDifference):\n   return False\n # If all elements are in an arithmetic progression\n return True\n```"}]}
{"dataset": "code_high", "id": "code_high_813", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that uses recursion to return the Fibonacci of a given number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\")\n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return fibonacci(n-1)+fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_814", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to return the count of all prime numbers from 1 to n (inclusive).\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_primes(n):\n  count = 0\n  for i in range(2, n+1):\n    is_prime = True\n    for j in range(2, i):\n      if i % j == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count\n```"}]}
{"dataset": "code_high", "id": "code_high_815", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a list that contains the Armstrong numbers in a given range.\n\n### Input:\n100\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Code \ndef armstrong_numbers(n): \n    # Empty list to store Armstrong numbers \n    lst = [] \n  \n    for i in range(1, n + 1): \n        s = 0\n        # To find the power \n        m = len(str(i)) \n  \n        # Finding Armstrong numbers \n        temp = i \n        while temp > 0: \n            digit = temp % 10\n            s += digit ** m \n            temp //= 10\n  \n        # Adding the number to list \n        if i == s: \n            lst.append(i) \n  \n    return lst\n# Test    \nprint(armstrong_numbers(100)) \n# Output\n[1, 2, 3, 4, 5, 6, 7, 8, 9, 153, 370, 371, 407]\n```"}]}
{"dataset": "code_high", "id": "code_high_816", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python that returns all permutations of a string.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_all_permutations(string):\n \n  if len(string) == 1:\n    return [string]\n \n  permutations = []\n  for index, char in enumerate(string):\n    slice_string  = string[:index] + string[index+1:]\n    for permutation in get_all_permutations(slice_string):\n      permutations.append(char + permutation)\n  return permutations\n```"}]}
{"dataset": "code_high", "id": "code_high_817", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that takes two arguments, \"start\" and \"end\", and returns a list of all the prime numbers between the two.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef get_prime_numbers(start, end):\n    \"\"\"\n    Function to return a list of all the prime numbers between start and end\n    \"\"\"\n    prime_numbers = []\n    for num in range(start, end + 1):\n        if num > 1:\n            is_prime = True\n            for j in range(2, int(num/2) + 1):\n                if num % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                prime_numbers.append(num)\n    return prime_numbers\n    \nprint(get_prime_numbers(2, 10)) # prints [2, 3, 5, 7]\n```"}]}
{"dataset": "code_high", "id": "code_high_818", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the longest increasing subsequence of a given array of numbers.\n\n### Input:\n[10,22,9,33,21,50,41,60]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_increasing_subsequence(arr):\n    n = len(arr)\n    lis = [1] * n \n    for i in range (1 , n): \n        for j in range(0 , i): \n            if arr[i] > arr[j] and lis[i]< lis[j] + 1 : \n                lis[i] = lis[j]+1\n    return max(lis)\narr = [10,22,9,33,21,50,41,60]\nlongest_increasing_subsequence(arr) # Returns 5\n```"}]}
{"dataset": "code_high", "id": "code_high_819", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to find out the longest common sub-sequence between two string inputs.\n\n### Input:\n\"AGGTAB\"\n\"GXTXAYB\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef LCSubStr(Str1, Str2): \n    n = len(Str1)\n    m = len(Str2)\n    LCSuff = [0] * (n + 1)\n    LCSuff = [[0 for k in range(m + 1)] for l in range(n + 1)]   \n    result = 0    \n    for i in range(n): \n        for j in range(m):  \n            if (Str1[i] == Str2[j]): \n                LCSuff[i + 1][j + 1] =LCSuff[i][j] + 1\n                if (LCSuff[i + 1][j + 1] > result): \n                    result = LCSuff[i + 1][j + 1]\n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_820", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a program to check if a given string is a palindrome\n\n### Input:\n\"racecar\"\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a program to check if a given string is a palindrome\n\"\"\"\ndef is_palindrome(string):\n    n = len(string)\n    for i in range(n // 2):\n        if string[i] != string[n-i-1]:\n            return False\n    return True\nif __name__ == '__main__':\n    print(is_palindrome(\"racecar\"))\n```"}]}
{"dataset": "code_high", "id": "code_high_821", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement a linked list in Python.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n    def insert_at_head(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n    def append(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        curr_node = self.head\n        while curr_node.next is not None: \n            curr_node = curr_node.next\n        curr_node.next = new_node\n    def delete_by_value(self, data):\n        if self.head is None:\n            return\n        curr_node = self.head\n        if curr_node.data == data:\n            self.head = curr_node.next\n            return\n        prev_node = curr_node\n        while curr_node is not None:\n            if curr_node.data == data:\n                break\n            prev_node = curr_node\n            curr_node = curr_node.next\n        if curr_node is None:\n            return\n        prev_node.next = curr_node.next\n```"}]}
{"dataset": "code_high", "id": "code_high_822", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite code for displaying the Fibinacci sequence up to the nth term.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    a = 0\n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else: \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_823", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a two-dimensional array of integers, find the maximum sum of numbers you can find by tracing a path from the top-left to bottom-right corner.\n\n### Input:\n[[1, 5, 4], [2, 3, 4], [1, 9, 3]]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef max_sum(arr):\n    result = [[None] * len(arr[0]) for _ in range(len(arr))]\n    result[0][0] = arr[0][0]\n    for i in range(1, len(arr[0])):\n        result[0][i] = arr[0][i] + result[0][i - 1]\n    for i in range(1, len(arr)):\n        result[i][0] = arr[i][0] + result[i - 1][0]\n    for i in range(1, len(arr)):\n        for j in range(1, len(arr[0])):\n            result[i][j] = max(result[i - 1][j], result[i][j - 1]) + arr[i][j]\n    return result[- 1][- 1]\nif __name__ == '__main__':\n    arr = [[1, 5, 4], [2, 3, 4], [1, 9, 3]]\n    print(max_sum(arr))\n```"}]}
{"dataset": "code_high", "id": "code_high_824", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function in Python which takes an array of integers and returns a list of all distinct pairs whose sum is equal to a given value.\n\n### Input:\narr = [1, 2, 3, 4, 5]\nvalue = 7\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef pairs_with_sum(arr, value):\n    pairs = []\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if (arr[i] + arr[j] == value):\n                pairs.append((arr[i], arr[j]))\n    return pairs\n```"}]}
{"dataset": "code_high", "id": "code_high_825", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function that will add two numbers (represented as linked lists)\n\n### Input:\nLinked lists: list1 = [2, 4, 3] and list2 = [5, 6, 4]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef add_numbers(list1, list2): \n    start = result = ListNode(0)\n    carry = 0\n    # Iterate both Lists until the end \n    while list1 or list2 or carry: \n        val1 = 0\n        val2 = 0\n        # If l1 is not None, add data\n        if list1: \n            val1 = list1.data \n            list1 = list1.next \n        # If l2 is not None, add data\n        if list2: \n            val2 = list2.data \n            list2 = list2.next \n        # Calculate sum\n        total = val1 + val2 + carry \n        # Update result list present node\n        result.next = ListNode(total % 10) \n        result = result.next \n        carry = total // 10\n  \n    # Return head node of the result list \n    return start.next\n```"}]}
{"dataset": "code_high", "id": "code_high_826", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate an algorithm to find the smallest positive integer not present in an array.\n\n### Input:\narr = [2, 3, 7, 6, 8, -1, -10, 15]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef find_missing(arr):\n  # sort the array\n  arr.sort()\n  \n  # iterate through the array \n  # to find the smallest positive integer not present \n  for i in range(len(arr)):\n    if arr[i] > 0:\n      if arr[i+1] != arr[i] + 1:\n        return arr[i] + 1\n  return arr[-1] + 1\n```"}]}
{"dataset": "code_high", "id": "code_high_827", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompress a given string using Run Length Encoding\n\n### Input:\nstring=\"WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWBWWWWWWWWWWWWWW\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef RunLengthEncoding(string):\n    result = \"\" \n    count = 0\n    current = string[0] \n  \n    for i in range(len(string)): \n        if (string[i] == current): \n            count+= 1 \n        else: \n            result += current + str(count) \n            current = string[i] \n            count = 1\n    result += current + str(count)\n  \n    return result\n```"}]}
{"dataset": "code_high", "id": "code_high_828", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCompute the median of an array of integers in Python.\n\n### Input:\n[1, 2, 3, 4, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef median(arr): \n    arr.sort() \n    if (len(arr) % 2 != 0): \n        return arr[len(arr) // 2] \n    else: \n        return (arr[(len(arr) // 2) - 1] + arr[len(arr) // 2]) / 2.0\n```"}]}
{"dataset": "code_high", "id": "code_high_829", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that calculates the Fibonacci numbers to the nth number\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef Fibonacci(n): \n    if n<0: \n        print(\"Incorrect input\") \n    elif n==1: \n        return 0\n    elif n==2: \n        return 1\n    else: \n        return Fibonacci(n-1)+Fibonacci(n-2)\n```"}]}
{"dataset": "code_high", "id": "code_high_830", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nMerge two sorted lists of integers using Python.\n\n### Input:\nlist_1 = [2, 5, 9]\nlist_2 = [1, 4, 6, 7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_lists(list_1, list_2):\n    merged_list = []\n    l1, l2 = 0, 0\n    while l1 < len(list_1) and l2 < len(list_2):\n        if list_1[l1] <= list_2[l2]:\n            merged_list.append(list_1[l1])\n            l1 += 1\n        else:\n            merged_list.append(list_2[l2])\n            l2 += 1\n    merged_list += list_1[l1:]\n    merged_list += list_2[l2:]\n    return merged_list\n```"}]}
{"dataset": "code_high", "id": "code_high_831", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nSuggest a way of encrypting text using a Caesar cipher.\n\n### Input:\nplaintext = \"Hello World\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef caesar_encrypt(plaintext, k):\n    ciphertext = \"\" \n  \n    # traverse text \n    for i in range(len(plaintext)): \n        char = plaintext[i] \n  \n        # Encrypt uppercase characters \n        if (char.isupper()): \n            ciphertext += chr((ord(char) + k-65) % 26 + 65) \n  \n        # Encrypt lowercase characters \n        else: \n            ciphertext += chr((ord(char) + k - 97) % 26 + 97) \n  \n    return ciphertext \nprint(caesar_encrypt(plaintext, 3))\n# Output: Khoor Zruog\n```"}]}
{"dataset": "code_high", "id": "code_high_832", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a Python script to detect if two numbers have the same frequency of digits.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef same_frequency(num1,num2):\n    str1 = str(num1)\n    str2 = str(num2)\n    if len(str1) != len(str2):\n        return False\n    dict = {}\n    for char in str1:\n        if char in dict:\n            dict[char] += 1\n        else:\n            dict[char] = 1\n    for char in str2:\n        if not char in dict:\n            return False\n        dict[char] -= 1\n    for k in dict:\n        if dict[k] != 0:\n            return False\n    return True\n```"}]}
{"dataset": "code_high", "id": "code_high_833", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the program such that it prints the elements in a deck of cards in a specific format.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Symbols for the different ranks\nranks = [\"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"Jack\", \"Queen\", \"King\", \"Ace\"]\n# Symbols for the different suits\nsuits = [\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"]\n# Create a deck of cards as a 2D array\ndeck = []\nfor i in range(len(ranks)):\n    for j in range(len(suits)):\n        deck.append([ranks[i], suits[j]])\n# Print the elements in the deck array\nfor i in range(len(deck)):\n    rank = deck[i][0]\n    suit = deck[i][1]\n    print(\"Card %d: %s of %s\" % (i+1, rank, suit))\n```"}]}
{"dataset": "code_high", "id": "code_high_834", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nHow can you use a function to determine whether a given array is in increasing or decreasing order or unordered?\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef check_order(arr):\n     order = 0\n     if arr[0] < arr[1]:\n         order = 1\n     elif arr[0] > arr[1]:\n         order = -1\n     \n     for i in range(1, len(arr)-1):\n        if arr[i] > arr[i+1] and order == 1:\n            return 0\n        elif arr[i] < arr[i+1] and order == -1:\n            return 0\n     return order\n```"}]}
{"dataset": "code_high", "id": "code_high_835", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nDescribe a method for sorting a list of integers using selection sort.\n\n### Input:\nlist = [3, 6, 8, 9, 5]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef selection_sort(list):\n    # Traverse through all array elements \n    for i in range(len(list)): \n      \n        # Find the minimum element in remaining  \n        # unsorted array \n        min_idx = i \n        for j in range(i+1, len(list)): \n            if list[min_idx] > list[j]: \n                min_idx = j \n          \n        # Swap the found minimum element with  \n        # the first element         \n        list[i], list[min_idx] = list[min_idx], list[i] \n  \n# Driver code to test above \nlist = [3, 6, 8, 9, 5] \nselection_sort(list) \nprint (\"Sorted array\") \nfor i in range(len(list)): \n    print(\"%d\" %list[i])\n```"}]}
{"dataset": "code_high", "id": "code_high_836", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function to implement the Levenshtein Distance algorithm. The Levenshtein Distance algorithm calculates the minimum number of single-character edits (insertions, deletions, or substitutions) necessary to transform one string into another string.\n\n### Input:\n\"cats\", \"dogs\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef levenshtein_distance(str1, str2):\n # Create a matrix for storing the distances\n m = [[0 for x in range(len(str2) + 1)] for x in range(len(str1) + 1)]\n # Mark the first Edit Distance value as 0\n m[0][0] = 0\n \n # Iterate over the matrix \n for i in range(0, len(str1) + 1):\n  for j in range(0, len(str2) + 1):\n   # If we are at the first row or first col, mark the cells with corresponding numbers\n   if i == 0:\n    m[i][j] = j\n   elif j == 0:\n    m[i][j] = i\n   # Otherwise, calculate the distance according to the  formula\n   else:\n    if str1[i-1] == str2[j-1]:\n     m[i][j] = m[i-1][j-1]\n    else:\n     m[i][j] = min(m[i-1][j], m[i-1][j-1], m[i][j-1]) + 1\n  \n # Return the last element in the matrix, which is the Levenshtein Distance\n return m[-1][-1]\n```"}]}
{"dataset": "code_high", "id": "code_high_837", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nProvide the logic for sorting an array of strings alphabetically.\n\n### Response:"}, {"role": "assistant", "content": "```python\nfor i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n        if arr[i] > arr[j]:\n            arr[i], arr[j] = arr[j], arr[i]\n```"}]}
{"dataset": "code_high", "id": "code_high_838", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven a number n, write a program to find the nth prime number.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef nth_prime(n):\n    if n == 0:\n        return None\n    \n    primeCount = 0\n    checkNum = 2\n    while(primeCount < n):\n        isPrime = True\n        for i in range(2, checkNum):\n            if checkNum % i == 0:\n                isPrime = False\n        \n        if isPrime == True:\n            primeCount += 1\n        \n        if primeCount == n:\n            return checkNum\n        else:\n            checkNum += 1\n```"}]}
{"dataset": "code_high", "id": "code_high_839", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nImplement an algorithm to sort the following array.\n\n### Input:\n[3, 5, 4, 6, 1, 2]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sortArray(array):\n    n = len(array)\n    for i in range(n):\n        min_index = i\n        for j in range(i+1, n):\n            if array[min_index] > array[j]:\n                min_index = j\n        array[i], array[min_index] = array[min_index], array[i]\n    return array\n```"}]}
{"dataset": "code_high", "id": "code_high_840", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a simple Python script to print the first 10 prime numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\nprime_numbers = [] \nfor num in range(1, 11):   \n   if num > 1:  \n       for i in range(2, num):  \n           if (num % i) == 0:  \n               break  \n       else:  \n           prime_numbers.append(num)\n  \nprint(prime_numbers)\n```"}]}
{"dataset": "code_high", "id": "code_high_841", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two unsorted arrays, merge them in a sorted form without using any extra space.\n\n### Input:\nnums1 = [5, 8, 2]\nnums2 = [7, 1]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef mergeArrays2(nums1, nums2):\n  i = j = 0\n  while i < len(nums1) and j < len(nums2):\n    if nums1[i] > nums2[j]:\n      nums1[i], nums2[j] = nums2[j], nums1[i]\n      j += 1\n    else:\n      i += 1\n  \n  nums1.sort()\n  nums2.sort()\nprint(nums1) // [1, 2, 5]\nprint(nums2) // [7, 8]\n```"}]}
{"dataset": "code_high", "id": "code_high_842", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function in Python to generate a Fibonacci sequence.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef fibonacci_sequence(n):  \n    a = 0 \n    b = 1\n    if n < 0: \n        print(\"Incorrect input\") \n    elif n == 0: \n        return a \n    elif n == 1: \n        return b \n    else:  \n        for i in range(2,n): \n            c = a + b \n            a = b \n            b = c \n        return b\n```"}]}
{"dataset": "code_high", "id": "code_high_843", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function to check whether a number is a prime number using the Sieve of Eratosthenes algorithm.\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nCreate a function to check whether a number is a prime number using the Sieve of Eratosthenes algorithm.\n\"\"\"\ndef is_prime(n): \n    if n <= 1: \n        return False\n  \n    # create a list of all numbers from 0 to n\n    nums = [True for _ in range(n + 1)] \n  \n    p = 2\n    while (p * p <= n): \n        # If prime[p] is not changed, it is a prime \n        if nums[p] is True: \n            # Update all multiples of p \n            for i in range(p * 2, n + 1, p): \n                nums[i] = False\n        p += 1\n    return nums[n]\nif __name__ == '__main__':\n    n = 37\n    print(is_prime(n)) # Output: True\n```"}]}
{"dataset": "code_high", "id": "code_high_844", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a neural network class in Python using NumPy.\n\n### Response:"}, {"role": "assistant", "content": "```python\nimport numpy as np\nclass NeuralNetwork():\n    \n    def __init__(self):\n        np.random.seed(1)\n        self.weights = 2 * np.random.random((3,1)) - 1\n    def sigmoid(self, x):\n        return 1 / (1 + np.exp(-x))\n    def sigmoid_derivative(self, x):\n        return x * (1 - x)\n    def train(self, training_inputs, training_outputs, training_iterations):\n        for iteration in range(training_iterations):\n            output = self.think(training_inputs)\n            error = training_outputs - output\n            adjustments = np.dot(training_inputs.T, error * self.sigmoid_derivative(output))\n            self.weights += adjustments\n    def think(self, inputs):\n        inputs = inputs.astype(float)\n        output = self.sigmoid(np.dot(inputs, self.weights))\n        return output\n```"}]}
{"dataset": "code_high", "id": "code_high_845", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an array of strings, find the longest common prefix string.\n\n### Input:\narr = [\"Code\", \"Coder\", \"Codecademy\", \"Codesigner\"]\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nGiven an array of strings, find the longest common prefix string.\n\"\"\"\ndef longest_common_prefix(arr): \n    if len(arr) == 0: \n        return \"\" \n \n    min_length = len(min(arr, key = len)) \n  \n    result = \"\" \n    i = 0\n    while i < min_length: \n        char = arr[0][i] \n        for j in range(1, len(arr)): \n            if arr[j][i] != char: \n                return result \n        result += char \n        i += 1\n    return result\nprint(longest_common_prefix(arr)) # Code\n```"}]}
{"dataset": "code_high", "id": "code_high_846", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a code to calculate the most frequent character in a given string\n\n### Input:\ns = \"Hello world!\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef most_frequent_char(s):\n    counts = {}\n    max_char = \"\"\n    max_count = 0\n    for c in s:\n        if c in counts:\n            counts[c] += 1\n        else:\n            counts[c] = 1\n        if counts[c] > max_count:\n            max_char = c\n            max_count = counts[c]\n    return max_char\n  \n# example\ns = \"Hello world!\"\nprint(most_frequent_char(s))\n```"}]}
{"dataset": "code_high", "id": "code_high_847", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nMerge two sorted linked lists and return it as a new list.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef merge_sorted_lists(list1, list2):\n    \"\"\" Merges two sorted linked lists and returns it as a new list\n    \n    Args:\n        list1 (list): The first sorted linked list \n        list2 (list): The second sorted linked list\n        \n    Returns:\n        list: The merged sorted linked list\n    \"\"\"\n    # Initialize the merged list\n    merged_list = []\n    \n    # Initialize the pointers\n    i = 0\n    j = 0\n    # Iterate over the two lists\n    while i < len(list1) and j < len(list2):\n        # Add the element with the smaller value to the merged list\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    \n    # Add the remaining elements to the merged list\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    \n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    \n    return merged_list\n```"}]}
{"dataset": "code_high", "id": "code_high_848", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nUsing Python, write a function to multiply two matrices.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef multiply_matrices(matrixA, matrixB): \n    \"\"\"\n    Matrix multiplication\n    :param matrixA: 2D array\n    :param matrixB: 2D array\n    :return: product of matrixA and matrixB\n    \"\"\"\n    \n    # Initialize matrix to store the result with size (m x n), where m and n are the rows and columns of matrixA and matrixB\n    result_matrix = [[0 for _ in range(len(matrixB[0]))] for _ in range(len(matrixA))]\n    for i in range(len(matrixA)): \n        for j in range(len(matrixB[0])): \n            for k in range(len(matrixB)): \n                result_matrix[i][j] += matrixA[i][k] * matrixB[k][j] \n  \n    return result_matrix\n```"}]}
{"dataset": "code_high", "id": "code_high_849", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nDesign an algorithm that can be used to identify if a given binary tree is a valid BST.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef isValidBST(root): \n\t\n\t# Base Case \n\tif root is None: \n\t\treturn True\n\t\t\n\t# Check recursive if left is valid \n\tif not isValidBST(root.left): \n\t\treturn False\n\t# If root's value is smaller than left subtree, not valid \n\tif root.left is not None and root.data < root.left.data: \n\t\treturn False\n\t# Check recursive if right is valid \n\tif not isValidBST(root.right): \n\t\treturn False\n\t# If root's value is greater than right subtree, not valid \n\tif root.right is not None and root.data > root.right.data: \n\t\treturn False\n\treturn True\n```"}]}
{"dataset": "code_high", "id": "code_high_850", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nProgram a binary search algorithm.\n\n### Input:\ndata: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\n  target: 16\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(data, target):\n    low = 0\n    high = len(data) - 1\n    \n    while low <= high:\n        index = (low + high) // 2\n        value = data[index]\n        if value == target:\n            return index\n        if target < value:\n            high = index - 1\n        else:\n            low = index + 1\n    return -1\ndata = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\ntarget = 16\nindex = binary_search(data, target)\nif index != -1:\n    print(\"Target is at index: {}\".format(index))\nelse: \n    print(\"Target not found\")\n```"}]}
{"dataset": "code_high", "id": "code_high_851", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a code to form a Pascal Triangle with the given input.\n\n### Input:\nn = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef pascal(n): \n    # An auxiliary array to store \n    # generated pascal triangle values \n    arr =[[0 for x in range(n)] for x in range(n)] \n      \n    # Iterate through every line and  \n    # print integer(s) in it \n    for line in range(0, n): \n          \n        # Every line has number of  \n        # integers equal to line number \n        for i in range(0, line + 1): \n              \n            # First and last values  \n            # in every row are 1 \n            if (i == 0 or i == line): \n                arr[line][i] = 1\n                print(arr[line][i], end=\" \") \n            else: \n                arr[line][i] = (arr[line - 1][i - 1] +\n                                arr[line - 1][i]) \n                print(arr[line][i], end=\" \") \n        print(\"\\r\")\n```"}]}
{"dataset": "code_high", "id": "code_high_852", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the greatest common divisor for two integer inputs using the Euclidean Algorithm.\n\n### Input:\n30, 60\n\n### Response:"}, {"role": "assistant", "content": "```python\n\"\"\"\nFind the greatest common divisor for two integer inputs using the Euclidean Algorithm\n\"\"\"\ndef greatest_common_divisor(int1, int2):\n  if int1 == 0:\n    return int2\n  elif int2 == 0:\n    return int1\n  elif int1 == int2:\n    return int1\n  else:\n    if int1 > int2:\n      return greatest_common_divisor(int2, int1 % int2)\n    else:\n      return greatest_common_divisor(int1, int2 % int1)\nif __name__ == \"__main__\":\n   print(greatest_common_divisor(30, 60))\n```"}]}
{"dataset": "code_high", "id": "code_high_853", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a function that prints all combination of unique integer elements from an array.\n\n### Input:\nArray: [1,2,3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef print_all_combinations(arr):\n    n = len(arr)\n    result = []\n    def combinations(arr, start, end, index, r):\n        if index == r: \n            result.append(list(arr[start : end + 1]))  \n            return\n        for i in range(start, end + 1): \n            arr[start], arr[i] = arr[i], arr[start]  \n            combinations(arr, start + 1, end, index + 1, r) \n            arr[start], arr[i] = arr[i], arr[start] \n  \n    for i in range(1, n + 1):\n        combinations(arr, 0, n - 1, 0, i)\n    print(*result, sep = \"\\n\")\n```"}]}
{"dataset": "code_high", "id": "code_high_854", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven an input of numbers, sort the numbers in descending order.\n\n### Input:\narr = [6, 2, 5, 3, 9]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_numbers_desc(arr): \n    for i in range(len(arr)): \n  \n        max_element = arr[i] \n        max_index = i \n  \n        for j in range(i+1, len(arr)): \n            if arr[j] > max_element: \n                max_element = arr[j] \n                max_index = j  \n  \n        arr[i], arr[max_index] = arr[max_index], arr[i] \n    return arr\nprint(sort_numbers_desc(arr))\n```"}]}
{"dataset": "code_high", "id": "code_high_855", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a sequence of prime numbers between a given range using the Sieve of Eratosthenes algorithm.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sieve_of_eratosthenes(lower, upper):\n    # Create a list of prime numbers\n    prime_list = [True] * (upper + 1)\n    prime_list[0] = False\n    prime_list[1] = False\n    # Iterate over the list until the square root of the upper limit\n    for i in range(2, int(upper ** 0.5) + 1):\n        # If i is true, then it is prime\n        if prime_list[i]:\n            # Set all multiples of i to false\n            for j in range(i*i, upper + 1, i):\n                prime_list[j] = False\n    # Get the list of prime numbers between lower and upper\n    prime_nums = []\n    for i in range(lower, upper + 1):\n        if prime_list[i]:\n            prime_nums.append(i)\n    return prime_nums\nif __name__ == \"__main__\":\n    lower = 0\n    upper = 50\n    print(sieve_of_eratosthenes(lower, upper))\n```"}]}
{"dataset": "code_high", "id": "code_high_856", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a function that takes a list of integers and returns the shortest continuous increasing subarray in the list.\n\n### Input:\n[2,3,3,4,3,4,5,6,7]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef shortest_increasing_subarray(nums):\n    res, curr = float('inf'), 0\n    for i in range(len(nums)-1):\n        if nums[i] < nums[i+1]: \n            curr += 1\n        else:\n            res = min(res, curr)\n            curr = 0\n    return max(res, curr) + 1\n```"}]}
{"dataset": "code_high", "id": "code_high_857", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGiven two strings, create a function to find the total number of occurrences of the second string in the first string.\n\n### Input:\nstr1 = \"Hello World!\"\nstr2 = \"lo\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef count_string_occurrences(str1, str2):\n    \"\"\"This function takes in two strings and returns the total number of occurrences of the second string in the first string.\"\"\"\n    count = 0\n    for i in range(len(str1) - len(str2) + 1):\n        if str1[i:i + len(str2)] == str2:\n            count += 1\n    return count\n```"}]}
{"dataset": "code_high", "id": "code_high_858", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCalculate the area of a triangle given the coordinates of its three vertices.\n\n### Input:\nx1 = 1\ny1 = 5\nx2 = 4\ny2 = 3\nx3 = 7\ny3 = 2\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef calculate_triangle_area(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Function to calculate the area of a triangle given the coordinates of its 3 vertices\n    \"\"\"\n    a = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    b = ((x3 - x2)**2 + (y3 - y2)**2)**0.5\n    c = ((x1 - x3)**2 + (y1 - y3)**2)**0.5\n    s = (a + b + c) / 2\n    return ((s*(s-a)*(s-b)*(s-c))**0.5)\n    \nif __name__ == \"__main__\":\n    x1 = 1\n    y1 = 5\n    x2 = 4\n    y2 = 3\n    x3 = 7\n    y3 = 2\n    print(calculate_triangle_area(x1, y1, x2, y2, x3, y3))\n    # should print 4.24\n```"}]}
{"dataset": "code_high", "id": "code_high_859", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nIn a given string, create a function that returns the longest consecutive sequence of characters.\n\n### Input:\nmy_string = \u201cabccdeefghj\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_consecutive(string):\n    character_list = []\n    max_length = 0\n    max_sequence = ''\n    for char in string:\n        if char in character_list:\n            continue\n        else:\n            character_list.append(char)\n            current_length = 1\n            for i in range(1, len(string)):\n                if string[i-1] == char and string[i] == char:\n                    current_length += 1\n            if current_length>max_length:\n                max_length = current_length\n                max_sequence = char*max_length\n    return max_sequence\n```"}]}
{"dataset": "code_high", "id": "code_high_860", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nFind the longest palindromic substring of this string.\n\n### Input:\nstring = \"carrace\"\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef longest_palindrome_substring(string):\n    n = len(string)\n    t = [[False for _ in range(n)] for _ in range(n)]  \n    max_length = 1\n    i = 0\n    while (i < n): \n        t[i][i] = True\n        i = i + 1\n    start = 0\n    i = 0\n    while i < n - 1: \n        if (string[i] == string[i + 1]): \n            t[i][i + 1] = True\n            start = i \n            max_length = 2\n        i = i + 1\n    k = 3\n    while k <= n: \n        i = 0\n        while i < (n - k + 1): \n            j = i + k - 1\n            if (t[i + 1][j - 1] and \n                    string[i] == string[j]): \n                t[i][j] = True\n                if (k > max_length): \n                    start = i \n                    max_length = k \n            i = i + 1\n        k = k + 1\n    longest_palindrome = string[start:start+max_length]\n    return longest_palindrome\n  \nprint(longest_palindrome_substring(string))\n# Output: carrac\n```"}]}
{"dataset": "code_high", "id": "code_high_861", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nEdit the following code to allow for the user to input an unlimited list of numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\n# Prime numbers between 2 and n\nn = int(input(\"Enter a positive integer: \"))\n# Initially assuming all integers between 2 and n are prime\nprimeArray = [True] * (n + 1)\n# Create list of prime numbers\nfor p in range(2, n+1): \n    # If prime[p] is not changed, then it is a prime \n    if primeArray[p]== True: \n        # Update all multiples of p \n        for i in range(2*p,n+1,p): \n            primeArray[i] = False\n# Print all prime numbers \nfor i in range(2,n+1): \n    if primeArray[i]: \n        print(i, end=\" \")\n```"}]}
{"dataset": "code_high", "id": "code_high_862", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nYou need to generate an API which returns the first 10 Fibonacci numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef FibApi():\n   def fibonacci(n):\n      if n < 0: \n         print(\"Incorrect input\") \n      elif n == 1: \n         return 0\n      elif n == 2: \n         return 1\n      else: \n         return fibonacci(n-1) + fibonacci(n-2) \n   fib_list = [] \n   for i in range(1,11): \n      fib_list.append(fibonacci(i)) \n   return fib_list\n```"}]}
{"dataset": "code_high", "id": "code_high_863", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nConstruct a binary search tree from the given array of integers.\n\n### Input:\n[ 10, 5, 15, 1, 8, 12, 2 ]\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass Node: \n    def __init__(self, data): \n        self.data = data  \n        self.left = None\n        self.right = None\n  \ndef insert(root,data): \n    if root is None: \n        return Node(data) \n    else: \n        if root.data > data: \n            root.left=insert(root.left,data) \n        else: \n            root.right=insert(root.right, data) \n        return root \nroot = None\nnodes = [10, 5, 15, 1, 8, 12, 2] \nfor data in nodes:\n    root = insert(root, data)\n```"}]}
{"dataset": "code_high", "id": "code_high_864", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nWrite a class that implements an arithmetic operator.\n\n### Input:\nNone\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass ArithmeticOperator:\n    def __init__(self, operator, left, right):\n        self.operator = operator\n        self.left = left\n        self.right = right\n    def operate(self):\n        if self.operator == \"+\":\n            return self.left + self.right\n        elif self.operator == \"-\":\n            return self.left - self.right\n        elif self.operator == \"*\":\n            return self.left * self.right\n        elif self.operator == \"/\":\n            return self.left / self.right\n        else:\n            raise ValueError('Not a valid operator')\n```"}]}
{"dataset": "code_high", "id": "code_high_865", "messages": [{"role": "user", "content": "Below is an instruction that describes a task. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a Python class to work with complex numbers.\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass ComplexNumber:\n    \"\"\"This class is used to work with complex numbers.\"\"\"\n    def __init__(self, real, imag): \n        self.real = real \n        self.imag = imag \n      \n    def __add__(self, other):\n        \"\"\"This method overloads the '+' operator to add complex numbers.\"\"\"\n        return ComplexNumber(self.real + other.real, self.imag + other.imag) \n      \n    def __sub__(self, other):\n        \"\"\"This method overloads the '-' operator to subtract complex numbers.\"\"\"\n        return ComplexNumber(self.real - other.real, self.imag - other.imag) \n  \n    def __mul__(self, other): \n        \"\"\"This method overloads the '*' operator to multiply complex numbers.\"\"\"\n        return ComplexNumber(self.real*other.real - self.imag*other.imag, self.real*other.imag + self.imag*other.real) \n  \n    def __str__(self): \n        \"\"\"This method overrides the __str__ method to print complex numbers in a readable format.\"\"\"\n        return self.real + self.imag + \"i\"\nif __name__ == '__main__':\n    c1 = ComplexNumber(1, 2) \n    c2 = ComplexNumber(2, 3) \n  \n    print(\"Addition of c1 and c2 =\", c1 + c2) \n    print(\"Subtration of c1 and c2 =\", c1 - c2) \n    print(\"Multiplication of c1 and c2 =\", c1 * c2)\n```"}]}
{"dataset": "code_high", "id": "code_high_866", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nPerform insertion sort on a given array.\n\n### Input:\narr = [5, 1, 6, 2, 4, 3]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef insertionSort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j+1] = arr[j]\n            j -= 1\n        arr[j+1] = key\n    return arr\narr = [5, 1, 6, 2, 4, 3]\nprint(insertionSort(arr)) # output: [1, 2, 3, 4, 5, 6]\n```"}]}
{"dataset": "code_high", "id": "code_high_867", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nGenerate a python class for calculating prime numbers up to n.\n\n### Input:\nn = 10\n\n### Response:"}, {"role": "assistant", "content": "```python\nclass PrimeCalculator:\n    def __init__(self, n):\n        self.n = n\n    \n    def get_primes(self):\n        primes = []\n        for number in range(2, self.n+1):\n            is_prime = True\n            for divisor in range(2, number):\n                if number % divisor == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(number)\n        return primes\n```"}]}
{"dataset": "code_high", "id": "code_high_868", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a function named `binary_search` that implement a binary search algorithm.\n\n### Input:\nlist = [1, 3, 5, 7, 8, 9, 11]\ngoal = 5\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef binary_search(list, goal): \n    start = 0 \n    end = len(list) - 1\n    while start <= end: \n        mid = (start + end) // 2\n        if list[mid] == goal: \n            return mid \n        elif goal < list[mid]: \n            end = mid - 1 \n        else: \n            start = mid + 1\n    return -1\nresult = binary_search(list, goal)\nprint(result)\n```"}]}
{"dataset": "code_high", "id": "code_high_869", "messages": [{"role": "user", "content": "Below is an instruction that describes a task, paired with an input that provides further context. Write a response that appropriately completes the request.\n\n### Instruction:\nCreate a sorting algorithm to sort a given list of numbers from lowest to highest.\n\n### Input:\n[1, 4, 3, 7, 8, 10]\n\n### Response:"}, {"role": "assistant", "content": "```python\ndef sort_list(arr):\n    for i in range(len(arr) - 1):\n        min_index = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        if min_index != i:\n            arr[i], arr[min_index] = arr[min_index], arr[i]\n    return arr\n```"}]}
